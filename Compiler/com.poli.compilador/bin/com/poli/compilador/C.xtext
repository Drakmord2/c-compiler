
grammar com.poli.compilador.C with org.eclipse.xtext.common.Terminals

generate c "http://www.poli.com/compilador/C"

//--------------------------------------------------------------------

Program		: (definition+=Definition)* ;
Definition	: Struct | Function | Declaration;
		  	
Function		: {Function}		'function' tipo=Type name=ID '(' (params+=Declaration (',' params+=Declaration)*)? ')' '{' (commands+=Command)* '}';
Declaration 	: {Declaration}	( {VarDecl.obj=current} (tipo=Type '**'? name=ID (val=Assignment)?) | {StrDecl.obj=current} ('struct' str=[Struct|ID] name=ID) ) ';' ;
Struct		: {Struct} 		'struct' name=ID '{' decl+=Declaration* '}' ';' ;

Command		: {IfCmd} 		'if''(' exp=Expression ')' '{' (trueCommands+=Command)* '}' ('else' '{' (falseCommands+=Command)* '}')?  
			| {WhileCmd} 	'while''(' exp=Expression ')' '{' (commands+=Command)* '}'
			| {ForCmd} 		'for''(' init=lValue initAsg=Assignment ';' exp=Expression ';' inc=Factor incAsg=Assignment? ')' '{' (commands+=Command)* '}'	
			| {SwitchCmd} 	'switch''(' exp=Expression ')''{' cases+=Case* ('default'':' (defaultCmds+=Command)* )? '}'
			| {DoWhileCmd}	'do''{' (commands+=Command)* '}' 'while''(' exp=Expression ')'';'
			| {VarCmd}		lval=Factor asg=Assignment?';'
			| {BreakCmd} 	'break'';'
			| {ContinueCmd} 'continue'';' 
			| {ReturnCmd} 	'return' exp=Expression? ';'
			| {DeclCmd} 		val=Declaration 
			| {PrintCmd}    'print''(' exp=Expression? ')'';';
			
Argument		: exp+=Expression (',' exp+=Expression)* ;
Assignment	: '=' exp=Expression;
			
Expression	: RelExp    						( {LogicExp.args+=current} 	op=LO args+=RelExp)* ;
RelExp		returns Expression : ArithExp	( {RelExp.args+=current} 	op=RO args+=ArithExp)* ;
ArithExp		returns Expression : Term 		( {ArithExp.args+=current}	op=AO1 args+=Term)* ;
Term			returns Expression : Factor 		( {Term.args+=current} 		op=AO2 args+=Factor)* ;
Factor		returns Expression : Atom 		({PostfixOp.arg=current} uo=UO)? 
	        | {PrefixOp} uo=UO arg=Atom ;
	        
Atom			returns Expression : Literal
			| {Parenteses} '(' exp=Expression ')' 
			| lValue ;
			
lValue      returns Expression : {Var} valor=[Definition|ID] (
	               ({FuncCall.def=current} '(' arg=Argument? ')') | 
	               ({FieldAccess.obj=current} '.' field=ID) |
	               ({ArrayAccess.arr=current} '[' index=Expression ']')
                   )*
			| PointerExp ;			

PointerExp	: {PointerExp} '**' '(' exp=Expression ')' ;

Case			: 'case' val=Atom ':' (commands+=Command)* ;

Type			: tipo=TYPELIT ('[' exp=Expression? ']')?;
Literal		: {IntLit} val=INT | {TrueLit} val='true' | {FalseLit} val='false' | {StrLit} val=STRING;

//--------------------------------------------------------------------

terminal TYPELIT	: 'int' | 'bool' | 'string' | 'void' ;
terminal AO1		: '+' | '-' ;
terminal AO2		: '*' | '/' ;
terminal RO		: '>' | '>=' | '<' | '<=' | '==' | '!=' ;
terminal LO		: '&&' | '||' ;
terminal UO		: '!' | '++' | '--' | '&' ;
