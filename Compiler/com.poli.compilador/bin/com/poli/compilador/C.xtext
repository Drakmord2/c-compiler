
grammar com.poli.compilador.C with org.eclipse.xtext.common.Terminals

generate c "http://www.poli.com/compilador/C"

//--------------------------------------------------------------------

Program: (definition+=Definition)* ;

Definition	:   Struct | Function | Declaration;
		  	
Function		: {Function}		'function' tipo=Type name=ID '(' (params+=IdDef (',' params+=IdDef)*)? ')' '{' (commands+=Command)* '}';
Declaration 	: {Declaration}	(tipo=Type '**'? name=ID (val=Assignment)? | 'struct' str=[Struct|ID] name=ID) ';' ;
Struct		: {Struct} 		'struct' name=ID '{' decl+=Declaration* '}' ';' ;

IdDef		: tipo=Type name=Variable;
Variable		: {Variable} ID | PointerExp;

Command		: {ifCmd} 		'if''(' exp=Expression ')' '{' (trueCommands+=Command)* '}' ('else''{' (falseCommands+=Command)* '}')?  
			| {whileCmd} 	'while''(' exp=Expression ')''{' (commands+=Command)* '}'
			| {forCmd} 		'for''(' init+=lValue init+=Assignment ';' exp=Expression ';' inc+=lValue inc+=Assignment ')''{' (commands+=Command)* '}'
			| {switchCmd} 	'switch''(' exp=Expression ')''{' cases+=Case* ('default'':' (commands+=Command)* )? '}'
			| Declaration
			| {doWhileCmd}	'do''{' (commands+=Command)* '}''while''(' exp=Expression ')'';'
			| {varCmd}		val+=lValue val+=Assignment? ';'
			| {breakCmd} 	'break'';'
			| {continueCmd} 'continue'';' 
			| {returnCmd} 	'return' exp+=Expression? ';';
			
Argument		: exp+=Expression (',' exp+=Expression)* ;
Assignment	: '=' exp=Expression;
			
Expression	: args+=RelExp	( {LogicExp.args+=current} 	op=LO args+=RelExp)* ;
RelExp		: ArithExp 		( {RelExp.args+=current} 	op=RO args+=ArithExp)? ;
ArithExp		: Term 			( {AritmExp.args+=current}	op=AO1 args+=Term)* ;
Term			: Factor 		( {Term.args+=current} 		op=AO2 args+=Factor)* ;

Factor		: {UnaryExp} op=UO arg=Atom
	        | Atom ;
	        
Atom			: Literal
			| '(' Expression ')' 
			| lValue ;
			
lValue      : valor=[Definition|ID] ('(' arg=Argument? ')' | acc=AccessExp )?
			| PointerExp ;			

PointerExp	: {PointerExp} '**' (ID | '(' exp=Expression ')' ) ;
AccessExp	: {arrayAccess} '[' exp=Expression? ']'
			| {fieldAccess} '.' field=ID ;

Case			: 'case' val=Atom ':' (commands+=Command)* ;

Type			: tipo=TYPELIT ('[' exp=Expression? ']')?;
Literal		: {IntLit} val=INT | {TrueLit} val=TRUE | {FalseLit} val=FALSE ;

//--------------------------------------------------------------------

terminal TYPELIT	: 'int' | 'float' | 'double' | 'bool' | 'char' | 'void';
terminal TRUE	: 'true' ;
terminal FALSE	: 'false' ;
terminal AO1		: '+' | '-' ;
terminal AO2		: '*' | '/' ;
terminal RO		: '>' | '>=' | '<' | '<=' | '==' | '!=' ;
terminal LO		: '&&' | '||';
terminal UO		: '~' | '++' | '--' | '&' ;
