/*
 * generated by Xtext 2.12.0
 */
grammar InternalC;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package com.poli.compilador.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.poli.compilador.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.poli.compilador.services.CGrammarAccess;

}

@parser::members {

 	private CGrammarAccess grammarAccess;

    public InternalCParser(TokenStream input, CGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Program";
   	}

   	@Override
   	protected CGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleProgram=ruleProgram
	{ $current=$iv_ruleProgram.current; }
	EOF;

// Rule Program
ruleProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getProgramAccess().getDefinitionDefinitionParserRuleCall_0());
			}
			lv_definition_0_0=ruleDefinition
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getProgramRule());
				}
				add(
					$current,
					"definition",
					lv_definition_0_0,
					"com.poli.compilador.C.Definition");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleDefinition
entryRuleDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDefinitionRule()); }
	iv_ruleDefinition=ruleDefinition
	{ $current=$iv_ruleDefinition.current; }
	EOF;

// Rule Definition
ruleDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDefinitionAccess().getValFunctionParserRuleCall_0_0());
				}
				lv_val_0_0=ruleFunction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDefinitionRule());
					}
					add(
						$current,
						"val",
						lv_val_0_0,
						"com.poli.compilador.C.Function");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getDefinitionAccess().getDeclarationParserRuleCall_1());
		}
		this_Declaration_1=ruleDeclaration
		{
			$current = $this_Declaration_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFunction
entryRuleFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	iv_ruleFunction=ruleFunction
	{ $current=$iv_ruleFunction.current; }
	EOF;

// Rule Function
ruleFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionAccess().getTipoTypeParserRuleCall_0_0());
				}
				lv_tipo_0_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionRule());
					}
					set(
						$current,
						"tipo",
						lv_tipo_0_0,
						"com.poli.compilador.C.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunctionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionAccess().getParamsParameterParserRuleCall_3_0());
				}
				lv_params_3_0=ruleParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionRule());
					}
					add(
						$current,
						"params",
						lv_params_3_0,
						"com.poli.compilador.C.Parameter");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getFunctionAccess().getRightParenthesisKeyword_4());
		}
		otherlv_5='{'
		{
			newLeafNode(otherlv_5, grammarAccess.getFunctionAccess().getLeftCurlyBracketKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionAccess().getCommandsCommandParserRuleCall_6_0());
				}
				lv_commands_6_0=ruleCommand
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionRule());
					}
					add(
						$current,
						"commands",
						lv_commands_6_0,
						"com.poli.compilador.C.Command");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getFunctionAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleDeclaration
entryRuleDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeclarationRule()); }
	iv_ruleDeclaration=ruleDeclaration
	{ $current=$iv_ruleDeclaration.current; }
	EOF;

// Rule Declaration
ruleDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDeclarationAccess().getTipoTypeParserRuleCall_0_0());
				}
				lv_tipo_0_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeclarationRule());
					}
					set(
						$current,
						"tipo",
						lv_tipo_0_0,
						"com.poli.compilador.C.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getDeclarationAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDeclarationRule());
					}
					addWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getDeclarationAccess().getAsgAssignmentParserRuleCall_2_0());
				}
				lv_asg_2_0=ruleAssignment
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeclarationRule());
					}
					set(
						$current,
						"asg",
						lv_asg_2_0,
						"com.poli.compilador.C.Assignment");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCommand
entryRuleCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommandRule()); }
	iv_ruleCommand=ruleCommand
	{ $current=$iv_ruleCommand.current; }
	EOF;

// Rule Command
ruleCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getCommandAccess().getCommandAction_0_0(),
						$current);
				}
			)
			otherlv_1='if'
			{
				newLeafNode(otherlv_1, grammarAccess.getCommandAccess().getIfKeyword_0_1());
			}
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getCommandAccess().getLeftParenthesisKeyword_0_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCommandAccess().getExpExpressionParserRuleCall_0_3_0());
					}
					lv_exp_3_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCommandRule());
						}
						add(
							$current,
							"exp",
							lv_exp_3_0,
							"com.poli.compilador.C.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getCommandAccess().getRightParenthesisKeyword_0_4());
			}
			otherlv_5='{'
			{
				newLeafNode(otherlv_5, grammarAccess.getCommandAccess().getLeftCurlyBracketKeyword_0_5());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCommandAccess().getCommandsCommandParserRuleCall_0_6_0());
					}
					lv_commands_6_0=ruleCommand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCommandRule());
						}
						add(
							$current,
							"commands",
							lv_commands_6_0,
							"com.poli.compilador.C.Command");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_7='}'
			{
				newLeafNode(otherlv_7, grammarAccess.getCommandAccess().getRightCurlyBracketKeyword_0_7());
			}
			(
				otherlv_8='else'
				{
					newLeafNode(otherlv_8, grammarAccess.getCommandAccess().getElseKeyword_0_8_0());
				}
				otherlv_9='{'
				{
					newLeafNode(otherlv_9, grammarAccess.getCommandAccess().getLeftCurlyBracketKeyword_0_8_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getCommandAccess().getCommandsCommandParserRuleCall_0_8_2_0());
						}
						lv_commands_10_0=ruleCommand
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getCommandRule());
							}
							add(
								$current,
								"commands",
								lv_commands_10_0,
								"com.poli.compilador.C.Command");
							afterParserOrEnumRuleCall();
						}
					)
				)*
				otherlv_11='}'
				{
					newLeafNode(otherlv_11, grammarAccess.getCommandAccess().getRightCurlyBracketKeyword_0_8_3());
				}
			)?
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getCommandAccess().getCommandAction_1_0(),
						$current);
				}
			)
			otherlv_13='break'
			{
				newLeafNode(otherlv_13, grammarAccess.getCommandAccess().getBreakKeyword_1_1());
			}
			otherlv_14=';'
			{
				newLeafNode(otherlv_14, grammarAccess.getCommandAccess().getSemicolonKeyword_1_2());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getCommandAccess().getCommandAction_2_0(),
						$current);
				}
			)
			otherlv_16='continue'
			{
				newLeafNode(otherlv_16, grammarAccess.getCommandAccess().getContinueKeyword_2_1());
			}
			otherlv_17=';'
			{
				newLeafNode(otherlv_17, grammarAccess.getCommandAccess().getSemicolonKeyword_2_2());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getCommandAccess().getCommandAction_3_0(),
						$current);
				}
			)
			otherlv_19='return'
			{
				newLeafNode(otherlv_19, grammarAccess.getCommandAccess().getReturnKeyword_3_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCommandAccess().getExpExpressionParserRuleCall_3_2_0());
					}
					lv_exp_20_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCommandRule());
						}
						add(
							$current,
							"exp",
							lv_exp_20_0,
							"com.poli.compilador.C.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			otherlv_21=';'
			{
				newLeafNode(otherlv_21, grammarAccess.getCommandAccess().getSemicolonKeyword_3_3());
			}
		)
	)
;

// Entry rule entryRuleParameter
entryRuleParameter returns [String current=null]:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	iv_ruleParameter=ruleParameter
	{ $current=$iv_ruleParameter.current.getText(); }
	EOF;

// Rule Parameter
ruleParameter returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='1'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getParameterAccess().getDigitOneKeyword());
	}
;

// Entry rule entryRuleArgument
entryRuleArgument returns [String current=null]:
	{ newCompositeNode(grammarAccess.getArgumentRule()); }
	iv_ruleArgument=ruleArgument
	{ $current=$iv_ruleArgument.current.getText(); }
	EOF;

// Rule Argument
ruleArgument returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='1'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getArgumentAccess().getDigitOneKeyword());
	}
;

// Entry rule entryRuleAssignment
entryRuleAssignment returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	iv_ruleAssignment=ruleAssignment
	{ $current=$iv_ruleAssignment.current.getText(); }
	EOF;

// Rule Assignment
ruleAssignment returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='1'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getAssignmentAccess().getDigitOneKeyword());
	}
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getArgsRelExpParserRuleCall_0_0());
				}
				lv_args_0_0=ruleRelExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					add(
						$current,
						"args",
						lv_args_0_0,
						"com.poli.compilador.C.RelExp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					$current = forceCreateModelElementAndAdd(
						grammarAccess.getExpressionAccess().getLogicExpArgsAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_val_2_0=RULE_LO
					{
						newLeafNode(lv_val_2_0, grammarAccess.getExpressionAccess().getValLOTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getExpressionRule());
						}
						setWithLastConsumed(
							$current,
							"val",
							lv_val_2_0,
							"com.poli.compilador.C.LO");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionAccess().getArgsRelExpParserRuleCall_1_2_0());
					}
					lv_args_3_0=ruleRelExp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionRule());
						}
						add(
							$current,
							"args",
							lv_args_3_0,
							"com.poli.compilador.C.RelExp");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleRelExp
entryRuleRelExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelExpRule()); }
	iv_ruleRelExp=ruleRelExp
	{ $current=$iv_ruleRelExp.current; }
	EOF;

// Rule RelExp
ruleRelExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRelExpAccess().getArithExpParserRuleCall_0());
		}
		this_ArithExp_0=ruleArithExp
		{
			$current = $this_ArithExp_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndAdd(
						grammarAccess.getRelExpAccess().getRelExpArgsAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_val_2_0=RULE_RO
					{
						newLeafNode(lv_val_2_0, grammarAccess.getRelExpAccess().getValROTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRelExpRule());
						}
						setWithLastConsumed(
							$current,
							"val",
							lv_val_2_0,
							"com.poli.compilador.C.RO");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRelExpAccess().getArgsArithExpParserRuleCall_1_2_0());
					}
					lv_args_3_0=ruleArithExp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRelExpRule());
						}
						add(
							$current,
							"args",
							lv_args_3_0,
							"com.poli.compilador.C.ArithExp");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleArithExp
entryRuleArithExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArithExpRule()); }
	iv_ruleArithExp=ruleArithExp
	{ $current=$iv_ruleArithExp.current; }
	EOF;

// Rule ArithExp
ruleArithExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getArithExpAccess().getTermParserRuleCall_0());
		}
		this_Term_0=ruleTerm
		{
			$current = $this_Term_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndAdd(
						grammarAccess.getArithExpAccess().getAritmExpArgsAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_val_2_0=RULE_AO1
					{
						newLeafNode(lv_val_2_0, grammarAccess.getArithExpAccess().getValAO1TerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getArithExpRule());
						}
						setWithLastConsumed(
							$current,
							"val",
							lv_val_2_0,
							"com.poli.compilador.C.AO1");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getArithExpAccess().getArgsTermParserRuleCall_1_2_0());
					}
					lv_args_3_0=ruleTerm
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArithExpRule());
						}
						add(
							$current,
							"args",
							lv_args_3_0,
							"com.poli.compilador.C.Term");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleTerm
entryRuleTerm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTermRule()); }
	iv_ruleTerm=ruleTerm
	{ $current=$iv_ruleTerm.current; }
	EOF;

// Rule Term
ruleTerm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTermAccess().getFactorParserRuleCall_0());
		}
		this_Factor_0=ruleFactor
		{
			$current = $this_Factor_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndAdd(
						grammarAccess.getTermAccess().getTermArgsAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_val_2_0=RULE_AO2
					{
						newLeafNode(lv_val_2_0, grammarAccess.getTermAccess().getValAO2TerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTermRule());
						}
						setWithLastConsumed(
							$current,
							"val",
							lv_val_2_0,
							"com.poli.compilador.C.AO2");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getTermAccess().getArgsFactorParserRuleCall_1_2_0());
					}
					lv_args_3_0=ruleFactor
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTermRule());
						}
						add(
							$current,
							"args",
							lv_args_3_0,
							"com.poli.compilador.C.Factor");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleFactor
entryRuleFactor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFactorRule()); }
	iv_ruleFactor=ruleFactor
	{ $current=$iv_ruleFactor.current; }
	EOF;

// Rule Factor
ruleFactor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getFactorAccess().getUnaryExpAction_0_0(),
						$current);
				}
			)
			(
				(
					lv_val_1_0=RULE_UO
					{
						newLeafNode(lv_val_1_0, grammarAccess.getFactorAccess().getValUOTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFactorRule());
						}
						setWithLastConsumed(
							$current,
							"val",
							lv_val_1_0,
							"com.poli.compilador.C.UO");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getFactorAccess().getArgsAtomParserRuleCall_0_2_0());
					}
					lv_args_2_0=ruleAtom
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFactorRule());
						}
						add(
							$current,
							"args",
							lv_args_2_0,
							"com.poli.compilador.C.Atom");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getFactorAccess().getAtomParserRuleCall_1());
		}
		this_Atom_3=ruleAtom
		{
			$current = $this_Atom_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAtom
entryRuleAtom returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtomRule()); }
	iv_ruleAtom=ruleAtom
	{ $current=$iv_ruleAtom.current; }
	EOF;

// Rule Atom
ruleAtom returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAtomAccess().getLiteralParserRuleCall_0());
		}
		this_Literal_0=ruleLiteral
		{
			$current = $this_Literal_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getAtomAccess().getLeftParenthesisKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getAtomAccess().getExpressionParserRuleCall_1_1());
			}
			this_Expression_2=ruleExpression
			{
				$current = $this_Expression_2.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_3=')'
			{
				newLeafNode(otherlv_3, grammarAccess.getAtomAccess().getRightParenthesisKeyword_1_2());
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getAtomAccess().getLValueParserRuleCall_2());
		}
		this_lValue_4=rulelValue
		{
			$current = $this_lValue_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulelValue
entryRulelValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLValueRule()); }
	iv_rulelValue=rulelValue
	{ $current=$iv_rulelValue.current; }
	EOF;

// Rule lValue
rulelValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getLValueAccess().getIDValAction_0_0(),
						$current);
				}
			)
			(
				(
					lv_val_1_0=RULE_ID
					{
						newLeafNode(lv_val_1_0, grammarAccess.getLValueAccess().getValIDTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLValueRule());
						}
						setWithLastConsumed(
							$current,
							"val",
							lv_val_1_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			(
				otherlv_2='('
				{
					newLeafNode(otherlv_2, grammarAccess.getLValueAccess().getLeftParenthesisKeyword_0_2_0());
				}
				{
					newCompositeNode(grammarAccess.getLValueAccess().getArgumentParserRuleCall_0_2_1());
				}
				ruleArgument
				{
					afterParserOrEnumRuleCall();
				}
				otherlv_4=')'
				{
					newLeafNode(otherlv_4, grammarAccess.getLValueAccess().getRightParenthesisKeyword_0_2_2());
				}
			)?
		)
		    |
		{
			newCompositeNode(grammarAccess.getLValueAccess().getPointerExpParserRuleCall_1());
		}
		this_PointerExp_5=rulePointerExp
		{
			$current = $this_PointerExp_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePointerExp
entryRulePointerExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPointerExpRule()); }
	iv_rulePointerExp=rulePointerExp
	{ $current=$iv_rulePointerExp.current; }
	EOF;

// Rule PointerExp
rulePointerExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='**'
		{
			newLeafNode(otherlv_0, grammarAccess.getPointerExpAccess().getAsteriskAsteriskKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPointerExpAccess().getPtrAtomParserRuleCall_1_0());
				}
				lv_ptr_1_0=ruleAtom
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPointerExpRule());
					}
					set(
						$current,
						"ptr",
						lv_ptr_1_0,
						"com.poli.compilador.C.Atom");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleType
entryRuleType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current.getText(); }
	EOF;

// Rule Type
ruleType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_TYPELIT_0=RULE_TYPELIT
	{
		$current.merge(this_TYPELIT_0);
	}
	{
		newLeafNode(this_TYPELIT_0, grammarAccess.getTypeAccess().getTYPELITTerminalRuleCall());
	}
;

// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	iv_ruleLiteral=ruleLiteral
	{ $current=$iv_ruleLiteral.current; }
	EOF;

// Rule Literal
ruleLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getLiteralAccess().getIntLitAction_0_0(),
						$current);
				}
			)
			(
				(
					lv_valor_1_0=RULE_INT
					{
						newLeafNode(lv_valor_1_0, grammarAccess.getLiteralAccess().getValorINTTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLiteralRule());
						}
						setWithLastConsumed(
							$current,
							"valor",
							lv_valor_1_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getLiteralAccess().getTrueLitAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_val_3_0=RULE_TRUE
					{
						newLeafNode(lv_val_3_0, grammarAccess.getLiteralAccess().getValTRUETerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLiteralRule());
						}
						setWithLastConsumed(
							$current,
							"val",
							lv_val_3_0,
							"com.poli.compilador.C.TRUE");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getLiteralAccess().getFalseLitAction_2_0(),
						$current);
				}
			)
			(
				(
					lv_val_5_0=RULE_FALSE
					{
						newLeafNode(lv_val_5_0, grammarAccess.getLiteralAccess().getValFALSETerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLiteralRule());
						}
						setWithLastConsumed(
							$current,
							"val",
							lv_val_5_0,
							"com.poli.compilador.C.FALSE");
					}
				)
			)
		)
	)
;

RULE_TYPELIT : ('int'|'bool'|'char'|'void');

RULE_TRUE : 'true';

RULE_FALSE : 'false';

RULE_AO1 : ('+'|'-');

RULE_AO2 : ('*'|'/');

RULE_RO : ('>'|'>='|'<'|'<='|'=='|'!=');

RULE_LO : ('&&'|'||');

RULE_UO : ('~'|'++'|'--'|'&');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
