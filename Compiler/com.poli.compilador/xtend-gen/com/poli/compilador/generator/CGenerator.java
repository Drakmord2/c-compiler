/**
 * generated by Xtext 2.12.0
 */
package com.poli.compilador.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterators;
import com.poli.compilador.c.Argument;
import com.poli.compilador.c.ArithExp;
import com.poli.compilador.c.ArrayAccess;
import com.poli.compilador.c.Assignment;
import com.poli.compilador.c.Command;
import com.poli.compilador.c.Declaration;
import com.poli.compilador.c.Definition;
import com.poli.compilador.c.Expression;
import com.poli.compilador.c.FalseLit;
import com.poli.compilador.c.FieldAccess;
import com.poli.compilador.c.FuncCall;
import com.poli.compilador.c.Function;
import com.poli.compilador.c.IfCmd;
import com.poli.compilador.c.IntLit;
import com.poli.compilador.c.LogicExp;
import com.poli.compilador.c.Parenteses;
import com.poli.compilador.c.PointerExp;
import com.poli.compilador.c.PostfixOp;
import com.poli.compilador.c.PrefixOp;
import com.poli.compilador.c.PrintCmd;
import com.poli.compilador.c.Program;
import com.poli.compilador.c.RelExp;
import com.poli.compilador.c.ReturnCmd;
import com.poli.compilador.c.StrLit;
import com.poli.compilador.c.Struct;
import com.poli.compilador.c.Term;
import com.poli.compilador.c.TrueLit;
import com.poli.compilador.c.Var;
import com.poli.compilador.c.VarCmd;
import com.poli.compilador.c.VarDecl;
import com.poli.compilador.validation.Validator;
import java.util.Hashtable;
import java.util.Stack;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class CGenerator extends AbstractGenerator {
  public int label = 0;
  
  public int stackIdx = 0;
  
  public Stack<String> globals = new Stack<String>();
  
  public Stack<String> locals = new Stack<String>();
  
  public Stack<String> fName = new Stack<String>();
  
  public Hashtable<String, String> strings = new Hashtable<String, String>();
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Program p = IteratorExtensions.<Program>head(Iterators.<Program>filter(resource.getAllContents(), Program.class));
    String filename = resource.getURI().lastSegment().split("\\.")[0];
    if ((p == null)) {
      return;
    }
    fsa.generateFile((filename + ".asm"), this.compile(p));
  }
  
  public CharSequence compile(final Program P) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Definition> _definition = P.getDefinition();
      for(final Definition D : _definition) {
        Object _definition_1 = this.definition(D);
        _builder.append(_definition_1);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("exit:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("li $v0, 10");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("syscall");
    _builder.newLine();
    return _builder;
  }
  
  public Object definition(final Definition D) {
    Object _switchResult = null;
    boolean _matched = false;
    if ((D instanceof Function)) {
      _matched=true;
      _switchResult = this.function(((Function) D));
    }
    if (!_matched) {
      if ((D instanceof Declaration)) {
        _matched=true;
        _switchResult = this.declaration(((Declaration) D));
      }
    }
    if (!_matched) {
      if ((D instanceof Struct)) {
        _matched=true;
        _switchResult = this.struct(((Struct) D));
      }
    }
    return _switchResult;
  }
  
  public Object struct(final Struct S) {
    return null;
  }
  
  public String declaration(final Declaration D) {
    if ((D instanceof VarDecl)) {
      StringConcatenation _builder = new StringConcatenation();
      String mips = _builder.toString();
      final String vName = ((VarDecl)D).getName();
      final int size = 4;
      this.globals.add(vName);
      String _tipo = ((VarDecl)D).getTipo().getTipo();
      boolean _equals = Objects.equal(_tipo, "string");
      if (_equals) {
        String _xifexpression = null;
        Assignment _val = ((VarDecl)D).getVal();
        boolean _tripleEquals = (_val == null);
        if (_tripleEquals) {
          _xifexpression = "";
        } else {
          Expression _exp = ((VarDecl)D).getVal().getExp();
          _xifexpression = ((StrLit) _exp).getVal();
        }
        String content = _xifexpression;
        this.strings.put(vName, vName);
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append(".data");
        _builder_1.newLine();
        _builder_1.append("_");
        _builder_1.append(vName);
        _builder_1.append(": .asciiz \"");
        _builder_1.append(content);
        _builder_1.append("\"");
        _builder_1.newLineIfNotEmpty();
        _builder_1.newLine();
        mips = _builder_1.toString();
        return mips;
      }
      StringConcatenation _builder_2 = new StringConcatenation();
      _builder_2.append(".data");
      _builder_2.newLine();
      _builder_2.append(".align 2");
      _builder_2.newLine();
      _builder_2.append("_");
      _builder_2.append(vName);
      _builder_2.append(": .space ");
      _builder_2.append(size);
      _builder_2.newLineIfNotEmpty();
      _builder_2.newLine();
      mips = _builder_2.toString();
      Assignment _val_1 = ((VarDecl)D).getVal();
      boolean _tripleNotEquals = (_val_1 != null);
      if (_tripleNotEquals) {
        String _mips = mips;
        StringConcatenation _builder_3 = new StringConcatenation();
        _builder_3.append(".text");
        _builder_3.newLine();
        mips = (_mips + _builder_3);
        String _mips_1 = mips;
        CharSequence _assign = this.assign(((VarDecl)D).getVal());
        mips = (_mips_1 + _assign);
      }
      return mips;
    }
    return null;
  }
  
  public String function(final Function F) {
    this.fName.push(F.getName());
    this.globals.add(F.getName());
    StringConcatenation _builder = new StringConcatenation();
    _builder.append(".text");
    _builder.newLine();
    _builder.append(".align 2");
    _builder.newLine();
    {
      boolean _equals = F.getName().equals("main");
      if (_equals) {
        _builder.append(".globl main");
        _builder.newLine();
        String _name = F.getName();
        _builder.append(_name);
        _builder.append(":");
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append("_");
        String _name_1 = F.getName();
        _builder.append(_name_1);
        _builder.append(":");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    CharSequence _functionEntry = this.functionEntry(0, 0);
    _builder.append(_functionEntry, "\t");
    _builder.newLineIfNotEmpty();
    {
      EList<Command> _commands = F.getCommands();
      for(final Command C : _commands) {
        _builder.append("\t");
        CharSequence _command = this.command(C);
        _builder.append(_command, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("    ");
    CharSequence _functionExit = this.functionExit(0);
    _builder.append(_functionExit, "    ");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    String mips = _builder.toString();
    return mips;
  }
  
  public CharSequence command(final Command C) {
    CharSequence _switchResult = null;
    boolean _matched = false;
    if ((C instanceof PrintCmd)) {
      _matched=true;
      _switchResult = this.printCommand(((PrintCmd) C));
    }
    if (!_matched) {
      if ((C instanceof IfCmd)) {
        _matched=true;
        _switchResult = this.ifCommand(((IfCmd) C));
      }
    }
    if (!_matched) {
      if ((C instanceof VarCmd)) {
        _matched=true;
        _switchResult = this.varCommand(((VarCmd) C));
      }
    }
    if (!_matched) {
      if ((C instanceof ReturnCmd)) {
        _matched=true;
        _switchResult = this.returnCommand(((ReturnCmd) C));
      }
    }
    return _switchResult;
  }
  
  public CharSequence printCommand(final PrintCmd C) {
    StringConcatenation _builder = new StringConcatenation();
    String mips = _builder.toString();
    final Validator.Tipo tipo = Validator.tipode(C.getExp(), null);
    String _mips = mips;
    CharSequence _expression = this.expression(C.getExp());
    mips = (_mips + _expression);
    String _mips_1 = mips;
    CharSequence _pop = this.pop("a0");
    mips = (_mips_1 + _pop);
    if ((Objects.equal(tipo, Validator.Tipo.INT) || Objects.equal(tipo, Validator.Tipo.BOOL))) {
      String _mips_2 = mips;
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("li\t\t$v0, 1");
      _builder_1.newLine();
      mips = (_mips_2 + _builder_1);
    } else {
      boolean _equals = Objects.equal(tipo, Validator.Tipo.STR);
      if (_equals) {
        String _mips_3 = mips;
        StringConcatenation _builder_2 = new StringConcatenation();
        _builder_2.append("li\t\t$v0, 4");
        _builder_2.newLine();
        mips = (_mips_3 + _builder_2);
      }
    }
    String _mips_4 = mips;
    StringConcatenation _builder_3 = new StringConcatenation();
    _builder_3.append("syscall");
    _builder_3.newLine();
    _builder_3.newLine();
    mips = (_mips_4 + _builder_3);
    return mips;
  }
  
  public CharSequence ifCommand(final IfCmd C) {
    StringConcatenation _builder = new StringConcatenation();
    String mips = _builder.toString();
    final String label = this.nextLabel();
    final String falsel = (label + "_FALSE");
    final String truel = (label + "_TRUE");
    String _mips = mips;
    StringConcatenation _builder_1 = new StringConcatenation();
    CharSequence _expression = this.expression(C.getExp());
    _builder_1.append(_expression);
    _builder_1.newLineIfNotEmpty();
    _builder_1.newLine();
    mips = (_mips + _builder_1);
    String _mips_1 = mips;
    CharSequence _pop = this.pop("t0");
    mips = (_mips_1 + _pop);
    String _mips_2 = mips;
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("beq\t\t$t0, $0, ");
    _builder_2.append(falsel);
    _builder_2.newLineIfNotEmpty();
    {
      EList<Command> _trueCommands = C.getTrueCommands();
      for(final Command tc : _trueCommands) {
        CharSequence _command = this.command(tc);
        _builder_2.append(_command);
        _builder_2.newLineIfNotEmpty();
      }
    }
    mips = (_mips_2 + _builder_2);
    String _mips_3 = mips;
    StringConcatenation _builder_3 = new StringConcatenation();
    _builder_3.append("j ");
    _builder_3.append(truel);
    _builder_3.newLineIfNotEmpty();
    _builder_3.newLine();
    mips = (_mips_3 + _builder_3);
    String _mips_4 = mips;
    StringConcatenation _builder_4 = new StringConcatenation();
    _builder_4.append(falsel);
    _builder_4.append(":");
    _builder_4.newLineIfNotEmpty();
    mips = (_mips_4 + _builder_4);
    EList<Command> _falseCommands = C.getFalseCommands();
    boolean _tripleNotEquals = (_falseCommands != null);
    if (_tripleNotEquals) {
      EList<Command> _falseCommands_1 = C.getFalseCommands();
      for (final Command fc : _falseCommands_1) {
        String _mips_5 = mips;
        StringConcatenation _builder_5 = new StringConcatenation();
        CharSequence _command_1 = this.command(fc);
        _builder_5.append(_command_1);
        _builder_5.newLineIfNotEmpty();
        mips = (_mips_5 + _builder_5);
      }
    }
    String _mips_6 = mips;
    StringConcatenation _builder_6 = new StringConcatenation();
    _builder_6.append(truel);
    _builder_6.append(":");
    _builder_6.newLineIfNotEmpty();
    mips = (_mips_6 + _builder_6);
    return mips;
  }
  
  public String returnCommand(final ReturnCmd C) {
    StringConcatenation _builder = new StringConcatenation();
    String mips = _builder.toString();
    Expression _exp = C.getExp();
    boolean _tripleNotEquals = (_exp != null);
    if (_tripleNotEquals) {
      String _mips = mips;
      CharSequence _expression = this.expression(C.getExp());
      mips = (_mips + _expression);
      String _mips_1 = mips;
      CharSequence _pop = this.pop("v0");
      mips = (_mips_1 + _pop);
    }
    String _mips_2 = mips;
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("j ");
    String _peek = this.fName.peek();
    _builder_1.append(_peek);
    _builder_1.append("_return");
    _builder_1.newLineIfNotEmpty();
    _builder_1.newLine();
    mips = (_mips_2 + _builder_1);
    return mips;
  }
  
  public String varCommand(final VarCmd V) {
    StringConcatenation _builder = new StringConcatenation();
    String mips = _builder.toString();
    Assignment _asg = V.getAsg();
    boolean _tripleNotEquals = (_asg != null);
    if (_tripleNotEquals) {
      String _mips = mips;
      StringConcatenation _builder_1 = new StringConcatenation();
      CharSequence _assign = this.assign(V.getAsg());
      _builder_1.append(_assign);
      _builder_1.newLineIfNotEmpty();
      CharSequence _store = this.store(V.getLval());
      _builder_1.append(_store);
      _builder_1.newLineIfNotEmpty();
      mips = (_mips + _builder_1);
      return mips;
    }
    String _mips_1 = mips;
    StringConcatenation _builder_2 = new StringConcatenation();
    CharSequence _expression = this.expression(V.getLval());
    _builder_2.append(_expression);
    _builder_2.newLineIfNotEmpty();
    CharSequence _pop = this.pop("v0");
    _builder_2.append(_pop);
    _builder_2.newLineIfNotEmpty();
    _builder_2.newLine();
    mips = (_mips_1 + _builder_2);
    return mips;
  }
  
  public CharSequence assign(final Assignment A) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _expression = this.expression(A.getExp());
    _builder.append(_expression);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public String arithExp(final ArithExp E, final String opCode) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _expression = this.expression(E.getArgs().get(0));
    _builder.append(_expression);
    _builder.newLineIfNotEmpty();
    CharSequence _expression_1 = this.expression(E.getArgs().get(1));
    _builder.append(_expression_1);
    _builder.newLineIfNotEmpty();
    CharSequence _pop = this.pop("t1");
    _builder.append(_pop);
    _builder.newLineIfNotEmpty();
    CharSequence _pop_1 = this.pop("t0");
    _builder.append(_pop_1);
    _builder.newLineIfNotEmpty();
    _builder.append(opCode);
    _builder.append("\t\t$t0, $t0, $t1");
    _builder.newLineIfNotEmpty();
    CharSequence _push = this.push("t0");
    _builder.append(_push);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    String mips = _builder.toString();
    return mips;
  }
  
  public String termExp(final Term E, final String opCode) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _expression = this.expression(E.getArgs().get(0));
    _builder.append(_expression);
    _builder.newLineIfNotEmpty();
    CharSequence _expression_1 = this.expression(E.getArgs().get(1));
    _builder.append(_expression_1);
    _builder.newLineIfNotEmpty();
    CharSequence _pop = this.pop("t1");
    _builder.append(_pop);
    _builder.newLineIfNotEmpty();
    CharSequence _pop_1 = this.pop("t0");
    _builder.append(_pop_1);
    _builder.newLineIfNotEmpty();
    _builder.append(opCode);
    _builder.append("\t\t$t0, $t0, $t1");
    _builder.newLineIfNotEmpty();
    CharSequence _push = this.push("t0");
    _builder.append(_push);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    String mips = _builder.toString();
    return mips;
  }
  
  public CharSequence expression(final Expression E) {
    StringConcatenation _builder = new StringConcatenation();
    String mips = _builder.toString();
    if ((E instanceof ArithExp)) {
      boolean _equalsIgnoreCase = ((ArithExp)E).getOp().equalsIgnoreCase("+");
      if (_equalsIgnoreCase) {
        String _mips = mips;
        String _arithExp = this.arithExp(((ArithExp)E), "add");
        mips = (_mips + _arithExp);
      }
      boolean _equalsIgnoreCase_1 = ((ArithExp)E).getOp().equalsIgnoreCase("-");
      if (_equalsIgnoreCase_1) {
        String _mips_1 = mips;
        String _arithExp_1 = this.arithExp(((ArithExp)E), "sub");
        mips = (_mips_1 + _arithExp_1);
      }
      return mips;
    }
    if ((E instanceof Term)) {
      boolean _equalsIgnoreCase_2 = ((Term)E).getOp().equalsIgnoreCase("*");
      if (_equalsIgnoreCase_2) {
        String _mips_2 = mips;
        String _termExp = this.termExp(((Term)E), "mul");
        mips = (_mips_2 + _termExp);
      }
      boolean _equalsIgnoreCase_3 = ((Term)E).getOp().equalsIgnoreCase("/");
      if (_equalsIgnoreCase_3) {
        String _mips_3 = mips;
        String _termExp_1 = this.termExp(((Term)E), "div");
        mips = (_mips_3 + _termExp_1);
      }
      return mips;
    }
    if ((E instanceof LogicExp)) {
    }
    if ((E instanceof RelExp)) {
    }
    if ((E instanceof PostfixOp)) {
    }
    if ((E instanceof PrefixOp)) {
    }
    if ((E instanceof Parenteses)) {
      return this.expression(((Parenteses)E).getExp());
    }
    if ((E instanceof FuncCall)) {
      Argument _arg = ((FuncCall)E).getArg();
      boolean _tripleNotEquals = (_arg != null);
      if (_tripleNotEquals) {
        EList<Expression> _exp = ((FuncCall)E).getArg().getExp();
        for (final Expression arg : _exp) {
          String _mips_4 = mips;
          CharSequence _expression = this.expression(arg);
          mips = (_mips_4 + _expression);
        }
      }
      Expression _def = ((FuncCall)E).getDef();
      final Var func = ((Var) _def);
      String _xifexpression = null;
      String _name = func.getValor().getName();
      boolean _equals = Objects.equal(_name, "main");
      if (_equals) {
        _xifexpression = func.getValor().getName();
      } else {
        String _name_1 = func.getValor().getName();
        _xifexpression = ("_" + _name_1);
      }
      final String funcName = _xifexpression;
      String _mips_5 = mips;
      StringConcatenation _builder_1 = new StringConcatenation();
      CharSequence _jumpLink = this.jumpLink(funcName);
      _builder_1.append(_jumpLink);
      _builder_1.newLineIfNotEmpty();
      mips = (_mips_5 + _builder_1);
      String _mips_6 = mips;
      CharSequence _push = this.push("v0");
      mips = (_mips_6 + _push);
      return mips;
    }
    if ((E instanceof FieldAccess)) {
    }
    if ((E instanceof ArrayAccess)) {
    }
    if ((E instanceof PointerExp)) {
    }
    if ((E instanceof Var)) {
      final String varname = ((Var)E).getValor().getName();
      Definition _valor = ((Var)E).getValor();
      final VarDecl decl = ((VarDecl) _valor);
      final String tipo = decl.getTipo().getTipo();
      String _xifexpression_1 = null;
      boolean _equals_1 = Objects.equal(tipo, "string");
      if (_equals_1) {
        _xifexpression_1 = "la";
      } else {
        _xifexpression_1 = "lw";
      }
      final String opCode = _xifexpression_1;
      String _mips_7 = mips;
      CharSequence _evalExp = this.evalExp(opCode, ("_" + varname));
      mips = (_mips_7 + _evalExp);
      return mips;
    }
    if ((E instanceof IntLit)) {
      final int valor = ((IntLit)E).getVal();
      String _mips_8 = mips;
      CharSequence _evalExp_1 = this.evalExp("li", Integer.valueOf(valor).toString());
      mips = (_mips_8 + _evalExp_1);
      return mips;
    }
    if ((E instanceof TrueLit)) {
      String _mips_9 = mips;
      CharSequence _evalExp_2 = this.evalExp("li", "1");
      mips = (_mips_9 + _evalExp_2);
      return mips;
    }
    if ((E instanceof FalseLit)) {
      String _mips_10 = mips;
      CharSequence _evalExp_3 = this.evalExp("li", "0");
      mips = (_mips_10 + _evalExp_3);
      return mips;
    }
    if ((E instanceof StrLit)) {
      String _nextLabel = this.nextLabel();
      final String strLabel = ("S" + _nextLabel);
      String _mips_11 = mips;
      String _storeString = this.storeString(((StrLit)E), strLabel);
      mips = (_mips_11 + _storeString);
      return mips;
    }
    return mips;
  }
  
  public String storeString(final StrLit E, final String strLabel) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append(".data");
    _builder.newLine();
    _builder.append("_");
    _builder.append(strLabel);
    _builder.append(": .asciiz \"");
    String _val = E.getVal();
    _builder.append(_val);
    _builder.append("\"");
    _builder.newLineIfNotEmpty();
    _builder.append(".text");
    _builder.newLine();
    CharSequence _evalExp = this.evalExp("la", strLabel);
    _builder.append(_evalExp);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    String mips = _builder.toString();
    return mips;
  }
  
  public CharSequence evalExp(final String opCode, final String value) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append(opCode);
    _builder.append("\t\t$t8, ");
    _builder.append(value);
    _builder.newLineIfNotEmpty();
    String mips = _builder.toString();
    String _mips = mips;
    CharSequence _push = this.push("t8");
    mips = (_mips + _push);
    String _mips_1 = mips;
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.newLine();
    mips = (_mips_1 + _builder_1);
    return mips;
  }
  
  public CharSequence argument(final Argument A) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("# arg");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence functionEntry(final int paramSize, final int localSize) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("sw\t \t$ra, 0($sp)");
    _builder.newLine();
    _builder.append("addiu \t$sp, $sp, -4");
    _builder.newLine();
    _builder.append("sw   \t$fp, 0($sp)");
    _builder.newLine();
    _builder.append("addiu\t$sp, $sp, -4");
    _builder.newLine();
    _builder.append("addiu \t$fp, $sp, ");
    _builder.append((paramSize + 8));
    _builder.newLineIfNotEmpty();
    _builder.append("addiu \t$sp, $sp, -");
    _builder.append(localSize);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence functionExit(final int paramSize) {
    StringConcatenation _builder = new StringConcatenation();
    String _pop = this.fName.pop();
    _builder.append(_pop);
    _builder.append("_return:");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("lw   $ra, ");
    _builder.append(paramSize, "  ");
    _builder.append("($fp)");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("move $t0, $fp");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("lw   $fp, ");
    _builder.append((paramSize + 4), "  ");
    _builder.append("($fp)");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("move $sp, $t0");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("jr   $ra");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence jumpLink(final String func) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("jal ");
    _builder.append(func);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence store(final Expression E) {
    final Var varexp = ((Var) E);
    final String varname = varexp.getValor().getName();
    StringConcatenation _builder = new StringConcatenation();
    String mips = _builder.toString();
    boolean _contains = this.globals.contains(varname);
    if (_contains) {
      String _mips = mips;
      CharSequence _pop = this.pop("t9");
      mips = (_mips + _pop);
      String _mips_1 = mips;
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("sw\t\t$t9, _");
      _builder_1.append(varname);
      _builder_1.newLineIfNotEmpty();
      _builder_1.newLine();
      mips = (_mips_1 + _builder_1);
      return mips;
    }
    boolean _contains_1 = this.locals.contains(varname);
    if (_contains_1) {
      String _mips_2 = mips;
      StringConcatenation _builder_2 = new StringConcatenation();
      _builder_2.newLine();
      mips = (_mips_2 + _builder_2);
      return mips;
    }
    return mips;
  }
  
  public CharSequence push(final String reg) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("addiu\t$sp, $sp, -4");
    _builder.newLine();
    _builder.append("sw\t\t$");
    _builder.append(reg);
    _builder.append(", ($sp)");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence pop(final String reg) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("lw \t\t$");
    _builder.append(reg);
    _builder.append(", ($sp)");
    _builder.newLineIfNotEmpty();
    _builder.append("addiu\t$sp, $sp, 4");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence indexed(final String opCode, final String reg1, final String reg2, final int offset) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append(opCode);
    _builder.append("\t\t$");
    _builder.append(reg1);
    _builder.append(", ");
    _builder.append(offset);
    _builder.append("($");
    _builder.append(reg2);
    _builder.append(")");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public String nextLabel() {
    this.label++;
    return ("L" + Integer.valueOf(this.label));
  }
}
