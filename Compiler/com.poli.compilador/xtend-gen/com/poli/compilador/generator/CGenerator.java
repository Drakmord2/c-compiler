/**
 * generated by Xtext 2.12.0
 */
package com.poli.compilador.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterators;
import com.poli.compilador.c.Argument;
import com.poli.compilador.c.Assignment;
import com.poli.compilador.c.Command;
import com.poli.compilador.c.Declaration;
import com.poli.compilador.c.Definition;
import com.poli.compilador.c.Expression;
import com.poli.compilador.c.Function;
import com.poli.compilador.c.IfCmd;
import com.poli.compilador.c.PrintCmd;
import com.poli.compilador.c.Program;
import com.poli.compilador.c.ReturnCmd;
import com.poli.compilador.c.Struct;
import com.poli.compilador.c.VarCmd;
import com.poli.compilador.c.VarDecl;
import com.poli.compilador.validation.Validator;
import java.util.Stack;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class CGenerator extends AbstractGenerator {
  public int label = 0;
  
  public int stackIdx = 0;
  
  public Stack<String> globais = new Stack<String>();
  
  public Stack<String> locais = new Stack<String>();
  
  public Stack<String> fName = new Stack<String>();
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Program p = IteratorExtensions.<Program>head(Iterators.<Program>filter(resource.getAllContents(), Program.class));
    String filename = resource.getURI().lastSegment().split("\\.")[0];
    fsa.generateFile((filename + ".asm"), this.compile(p));
  }
  
  public CharSequence compile(final Program P) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Definition> _definition = P.getDefinition();
      for(final Definition D : _definition) {
        Object _definition_1 = this.definition(D);
        _builder.append(_definition_1);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("exit:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("li $v0, 10");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("syscall");
    _builder.newLine();
    return _builder;
  }
  
  public Object definition(final Definition D) {
    Object _switchResult = null;
    boolean _matched = false;
    if ((D instanceof Function)) {
      _matched=true;
      _switchResult = this.function(((Function) D));
    }
    if (!_matched) {
      if ((D instanceof Declaration)) {
        _matched=true;
        _switchResult = this.declaration(((Declaration) D));
      }
    }
    if (!_matched) {
      if ((D instanceof Struct)) {
        _matched=true;
        _switchResult = this.struct(((Struct) D));
      }
    }
    return _switchResult;
  }
  
  public Object struct(final Struct S) {
    return null;
  }
  
  public String declaration(final Declaration D) {
    if ((D instanceof VarDecl)) {
      final String vName = ((VarDecl)D).getName();
      final int size = 4;
      this.globais.add(vName);
      StringConcatenation _builder = new StringConcatenation();
      _builder.append(".data");
      _builder.newLine();
      _builder.append(".align 2");
      _builder.newLine();
      _builder.append("_");
      _builder.append(vName);
      _builder.append(": .space ");
      _builder.append(size);
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      final String mips = _builder.toString();
      return mips;
    }
    return null;
  }
  
  public String function(final Function F) {
    this.fName.push(F.getName());
    StringConcatenation _builder = new StringConcatenation();
    _builder.append(".text");
    _builder.newLine();
    {
      boolean _equals = F.getName().equals("main");
      if (_equals) {
        _builder.append(".globl main");
        _builder.newLine();
        String _name = F.getName();
        _builder.append(_name);
        _builder.append(":");
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append("_");
        String _name_1 = F.getName();
        _builder.append(_name_1);
        _builder.append(":");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    CharSequence _functionEntry = this.functionEntry(0, 8);
    _builder.append(_functionEntry, "\t");
    _builder.newLineIfNotEmpty();
    {
      EList<Command> _commands = F.getCommands();
      for(final Command C : _commands) {
        _builder.append("\t");
        CharSequence _command = this.command(C);
        _builder.append(_command, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("    ");
    CharSequence _functionExit = this.functionExit(0);
    _builder.append(_functionExit, "    ");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    String mips = _builder.toString();
    return mips;
  }
  
  public CharSequence command(final Command C) {
    CharSequence _switchResult = null;
    boolean _matched = false;
    if ((C instanceof PrintCmd)) {
      _matched=true;
      _switchResult = this.printCommand(((PrintCmd) C));
    }
    if (!_matched) {
      if ((C instanceof IfCmd)) {
        _matched=true;
        _switchResult = this.ifCommand(((IfCmd) C));
      }
    }
    if (!_matched) {
      if ((C instanceof ReturnCmd)) {
        _matched=true;
        _switchResult = this.returnCommand(((ReturnCmd) C));
      }
    }
    return _switchResult;
  }
  
  public CharSequence printCommand(final PrintCmd C) {
    StringConcatenation _builder = new StringConcatenation();
    String mips = _builder.toString();
    final Validator.Tipo tipo = Validator.tipode(C.getExp(), null);
    String _mips = mips;
    CharSequence _expression = this.expression(C.getExp());
    mips = (_mips + _expression);
    String _mips_1 = mips;
    CharSequence _pop = this.pop("a0");
    mips = (_mips_1 + _pop);
    if ((Objects.equal(tipo, Validator.Tipo.INT) || Objects.equal(tipo, Validator.Tipo.BOOL))) {
      String _mips_2 = mips;
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("li $v0, 1");
      _builder_1.newLine();
      mips = (_mips_2 + _builder_1);
    } else {
      boolean _equals = Objects.equal(tipo, Validator.Tipo.STR);
      if (_equals) {
        String _mips_3 = mips;
        StringConcatenation _builder_2 = new StringConcatenation();
        _builder_2.append("li $v0, 4");
        _builder_2.newLine();
        mips = (_mips_3 + _builder_2);
      }
    }
    String _mips_4 = mips;
    StringConcatenation _builder_3 = new StringConcatenation();
    _builder_3.append("syscall");
    _builder_3.newLine();
    _builder_3.newLine();
    mips = (_mips_4 + _builder_3);
    return mips;
  }
  
  public CharSequence ifCommand(final IfCmd C) {
    StringConcatenation _builder = new StringConcatenation();
    String mips = _builder.toString();
    final String label = this.nextLabel();
    final String falsel = (label + "_FALSE");
    final String truel = (label + "_TRUE");
    String _mips = mips;
    StringConcatenation _builder_1 = new StringConcatenation();
    CharSequence _expression = this.expression(C.getExp());
    _builder_1.append(_expression);
    _builder_1.newLineIfNotEmpty();
    _builder_1.newLine();
    mips = (_mips + _builder_1);
    String _mips_1 = mips;
    CharSequence _pop = this.pop("t0");
    mips = (_mips_1 + _pop);
    String _mips_2 = mips;
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("bne $t0, 1, ");
    _builder_2.append(falsel);
    _builder_2.newLineIfNotEmpty();
    _builder_2.newLine();
    mips = (_mips_2 + _builder_2);
    EList<Command> _trueCommands = C.getTrueCommands();
    for (final Command tc : _trueCommands) {
      String _mips_3 = mips;
      StringConcatenation _builder_3 = new StringConcatenation();
      CharSequence _command = this.command(tc);
      _builder_3.append(_command);
      _builder_3.newLineIfNotEmpty();
      mips = (_mips_3 + _builder_3);
    }
    String _mips_4 = mips;
    StringConcatenation _builder_4 = new StringConcatenation();
    _builder_4.append("j ");
    _builder_4.append(truel);
    _builder_4.newLineIfNotEmpty();
    _builder_4.newLine();
    mips = (_mips_4 + _builder_4);
    String _mips_5 = mips;
    StringConcatenation _builder_5 = new StringConcatenation();
    _builder_5.append(falsel);
    _builder_5.append(":");
    _builder_5.newLineIfNotEmpty();
    mips = (_mips_5 + _builder_5);
    EList<Command> _falseCommands = C.getFalseCommands();
    boolean _tripleNotEquals = (_falseCommands != null);
    if (_tripleNotEquals) {
      EList<Command> _falseCommands_1 = C.getFalseCommands();
      for (final Command fc : _falseCommands_1) {
        String _mips_6 = mips;
        StringConcatenation _builder_6 = new StringConcatenation();
        CharSequence _command_1 = this.command(fc);
        _builder_6.append(_command_1);
        _builder_6.newLineIfNotEmpty();
        mips = (_mips_6 + _builder_6);
      }
    }
    String _mips_7 = mips;
    StringConcatenation _builder_7 = new StringConcatenation();
    _builder_7.append(truel);
    _builder_7.append(":");
    _builder_7.newLineIfNotEmpty();
    mips = (_mips_7 + _builder_7);
    return mips;
  }
  
  public String returnCommand(final ReturnCmd C) {
    StringConcatenation _builder = new StringConcatenation();
    String mips = _builder.toString();
    Expression _exp = C.getExp();
    boolean _tripleNotEquals = (_exp != null);
    if (_tripleNotEquals) {
      String _mips = mips;
      CharSequence _expression = this.expression(C.getExp());
      mips = (_mips + _expression);
      String _mips_1 = mips;
      CharSequence _pop = this.pop("v0");
      mips = (_mips_1 + _pop);
    }
    String _mips_2 = mips;
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("j ");
    String _peek = this.fName.peek();
    _builder_1.append(_peek);
    _builder_1.append("_return");
    _builder_1.newLineIfNotEmpty();
    _builder_1.newLine();
    mips = (_mips_2 + _builder_1);
    return mips;
  }
  
  public CharSequence varCommand(final VarCmd V) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _assign = this.assign(V.getAsg());
    _builder.append(_assign);
    _builder.newLineIfNotEmpty();
    CharSequence _store = this.store(V.getLval());
    _builder.append(_store);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence expression(final Expression E) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder;
  }
  
  public CharSequence assign(final Assignment A) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _expression = this.expression(A.getExp());
    _builder.append(_expression);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence argument(final Argument A) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("# arg");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence functionEntry(final int paramSize, final int localSize) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("sw\t \t$ra, 0($sp)");
    _builder.newLine();
    _builder.append("addiu \t$sp, $sp, -4");
    _builder.newLine();
    _builder.append("sw   \t$fp, 0($sp)");
    _builder.newLine();
    _builder.append("addiu\t$sp, $sp, -4");
    _builder.newLine();
    _builder.append("addu \t$fp, $sp, ");
    _builder.append((paramSize + 8));
    _builder.newLineIfNotEmpty();
    _builder.append("subu \t$sp, $sp, ");
    _builder.append(localSize);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence functionExit(final int paramSize) {
    StringConcatenation _builder = new StringConcatenation();
    String _pop = this.fName.pop();
    _builder.append(_pop);
    _builder.append("_return:");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("lw   $ra, ");
    _builder.append(paramSize, "  ");
    _builder.append("($fp)");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("move $t0, $fp");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("lw   $fp, ");
    _builder.append((paramSize + 4), "  ");
    _builder.append("($fp)");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("move $sp, $t0");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("jr   $ra");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence jumpLink(final String func) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("jal ");
    _builder.append(func);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence store(final Expression E) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _pop = this.pop("t7");
    _builder.append(_pop);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence push(final String reg) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("addiu\t$sp, $sp, -4");
    _builder.newLine();
    _builder.append("sw\t\t$");
    _builder.append(reg);
    _builder.append(", ($sp)");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence pop(final String reg) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("lw \t\t$");
    _builder.append(reg);
    _builder.append(", ($sp)");
    _builder.newLineIfNotEmpty();
    _builder.append("addiu\t$sp, $sp, 4");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence indexed(final String opCode, final String reg1, final String reg2, final int offset) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("op $");
    _builder.append(reg1);
    _builder.append(", ");
    _builder.append(offset);
    _builder.append("($");
    _builder.append(reg2);
    _builder.append(")");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public String nextLabel() {
    this.label++;
    return ("L" + Integer.valueOf(this.label));
  }
}
