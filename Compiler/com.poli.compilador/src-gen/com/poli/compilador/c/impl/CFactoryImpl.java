/**
 * generated by Xtext 2.12.0
 */
package com.poli.compilador.c.impl;

import com.poli.compilador.c.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class CFactoryImpl extends EFactoryImpl implements CFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static CFactory init()
  {
    try
    {
      CFactory theCFactory = (CFactory)EPackage.Registry.INSTANCE.getEFactory(CPackage.eNS_URI);
      if (theCFactory != null)
      {
        return theCFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new CFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case CPackage.PROGRAM: return createProgram();
      case CPackage.DEFINITION: return createDefinition();
      case CPackage.FUNCTION: return createFunction();
      case CPackage.DECLARATION: return createDeclaration();
      case CPackage.STRUCT: return createStruct();
      case CPackage.COMMAND: return createCommand();
      case CPackage.ARGUMENT: return createArgument();
      case CPackage.ASSIGNMENT: return createAssignment();
      case CPackage.EXPRESSION: return createExpression();
      case CPackage.POINTER_EXP: return createPointerExp();
      case CPackage.CASE: return createCase();
      case CPackage.TYPE: return createType();
      case CPackage.LITERAL: return createLiteral();
      case CPackage.VAR_DECL: return createVarDecl();
      case CPackage.STR_DECL: return createStrDecl();
      case CPackage.IF_CMD: return createIfCmd();
      case CPackage.WHILE_CMD: return createWhileCmd();
      case CPackage.FOR_CMD: return createForCmd();
      case CPackage.SWITCH_CMD: return createSwitchCmd();
      case CPackage.DO_WHILE_CMD: return createDoWhileCmd();
      case CPackage.VAR_CMD: return createVarCmd();
      case CPackage.BREAK_CMD: return createBreakCmd();
      case CPackage.CONTINUE_CMD: return createContinueCmd();
      case CPackage.RETURN_CMD: return createReturnCmd();
      case CPackage.DECL_CMD: return createDeclCmd();
      case CPackage.PRINT_CMD: return createPrintCmd();
      case CPackage.LOGIC_EXP: return createLogicExp();
      case CPackage.REL_EXP: return createRelExp();
      case CPackage.ARITH_EXP: return createArithExp();
      case CPackage.TERM: return createTerm();
      case CPackage.POSTFIX_OP: return createPostfixOp();
      case CPackage.PREFIX_OP: return createPrefixOp();
      case CPackage.PARENTESES: return createParenteses();
      case CPackage.VAR: return createVar();
      case CPackage.FUNC_CALL: return createFuncCall();
      case CPackage.FIELD_ACCESS: return createFieldAccess();
      case CPackage.ARRAY_ACCESS: return createArrayAccess();
      case CPackage.INT_LIT: return createIntLit();
      case CPackage.TRUE_LIT: return createTrueLit();
      case CPackage.FALSE_LIT: return createFalseLit();
      case CPackage.STR_LIT: return createStrLit();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Program createProgram()
  {
    ProgramImpl program = new ProgramImpl();
    return program;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Definition createDefinition()
  {
    DefinitionImpl definition = new DefinitionImpl();
    return definition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Function createFunction()
  {
    FunctionImpl function = new FunctionImpl();
    return function;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Declaration createDeclaration()
  {
    DeclarationImpl declaration = new DeclarationImpl();
    return declaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Struct createStruct()
  {
    StructImpl struct = new StructImpl();
    return struct;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Command createCommand()
  {
    CommandImpl command = new CommandImpl();
    return command;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Argument createArgument()
  {
    ArgumentImpl argument = new ArgumentImpl();
    return argument;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Assignment createAssignment()
  {
    AssignmentImpl assignment = new AssignmentImpl();
    return assignment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PointerExp createPointerExp()
  {
    PointerExpImpl pointerExp = new PointerExpImpl();
    return pointerExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Case createCase()
  {
    CaseImpl case_ = new CaseImpl();
    return case_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Type createType()
  {
    TypeImpl type = new TypeImpl();
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Literal createLiteral()
  {
    LiteralImpl literal = new LiteralImpl();
    return literal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VarDecl createVarDecl()
  {
    VarDeclImpl varDecl = new VarDeclImpl();
    return varDecl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StrDecl createStrDecl()
  {
    StrDeclImpl strDecl = new StrDeclImpl();
    return strDecl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IfCmd createIfCmd()
  {
    IfCmdImpl ifCmd = new IfCmdImpl();
    return ifCmd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WhileCmd createWhileCmd()
  {
    WhileCmdImpl whileCmd = new WhileCmdImpl();
    return whileCmd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ForCmd createForCmd()
  {
    ForCmdImpl forCmd = new ForCmdImpl();
    return forCmd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SwitchCmd createSwitchCmd()
  {
    SwitchCmdImpl switchCmd = new SwitchCmdImpl();
    return switchCmd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DoWhileCmd createDoWhileCmd()
  {
    DoWhileCmdImpl doWhileCmd = new DoWhileCmdImpl();
    return doWhileCmd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VarCmd createVarCmd()
  {
    VarCmdImpl varCmd = new VarCmdImpl();
    return varCmd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BreakCmd createBreakCmd()
  {
    BreakCmdImpl breakCmd = new BreakCmdImpl();
    return breakCmd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ContinueCmd createContinueCmd()
  {
    ContinueCmdImpl continueCmd = new ContinueCmdImpl();
    return continueCmd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ReturnCmd createReturnCmd()
  {
    ReturnCmdImpl returnCmd = new ReturnCmdImpl();
    return returnCmd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DeclCmd createDeclCmd()
  {
    DeclCmdImpl declCmd = new DeclCmdImpl();
    return declCmd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PrintCmd createPrintCmd()
  {
    PrintCmdImpl printCmd = new PrintCmdImpl();
    return printCmd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LogicExp createLogicExp()
  {
    LogicExpImpl logicExp = new LogicExpImpl();
    return logicExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RelExp createRelExp()
  {
    RelExpImpl relExp = new RelExpImpl();
    return relExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ArithExp createArithExp()
  {
    ArithExpImpl arithExp = new ArithExpImpl();
    return arithExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Term createTerm()
  {
    TermImpl term = new TermImpl();
    return term;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PostfixOp createPostfixOp()
  {
    PostfixOpImpl postfixOp = new PostfixOpImpl();
    return postfixOp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PrefixOp createPrefixOp()
  {
    PrefixOpImpl prefixOp = new PrefixOpImpl();
    return prefixOp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Parenteses createParenteses()
  {
    ParentesesImpl parenteses = new ParentesesImpl();
    return parenteses;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Var createVar()
  {
    VarImpl var = new VarImpl();
    return var;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FuncCall createFuncCall()
  {
    FuncCallImpl funcCall = new FuncCallImpl();
    return funcCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FieldAccess createFieldAccess()
  {
    FieldAccessImpl fieldAccess = new FieldAccessImpl();
    return fieldAccess;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ArrayAccess createArrayAccess()
  {
    ArrayAccessImpl arrayAccess = new ArrayAccessImpl();
    return arrayAccess;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IntLit createIntLit()
  {
    IntLitImpl intLit = new IntLitImpl();
    return intLit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TrueLit createTrueLit()
  {
    TrueLitImpl trueLit = new TrueLitImpl();
    return trueLit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FalseLit createFalseLit()
  {
    FalseLitImpl falseLit = new FalseLitImpl();
    return falseLit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StrLit createStrLit()
  {
    StrLitImpl strLit = new StrLitImpl();
    return strLit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CPackage getCPackage()
  {
    return (CPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static CPackage getPackage()
  {
    return CPackage.eINSTANCE;
  }

} //CFactoryImpl
