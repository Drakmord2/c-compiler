/**
 * generated by Xtext 2.12.0
 */
package com.poli.compilador.c.impl;

import com.poli.compilador.c.CPackage;
import com.poli.compilador.c.CommandBlock;
import com.poli.compilador.c.Expression;
import com.poli.compilador.c.ifCmd;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>if Cmd</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.poli.compilador.c.impl.ifCmdImpl#getExp <em>Exp</em>}</li>
 *   <li>{@link com.poli.compilador.c.impl.ifCmdImpl#getTrueCommands <em>True Commands</em>}</li>
 *   <li>{@link com.poli.compilador.c.impl.ifCmdImpl#getFalseCommands <em>False Commands</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ifCmdImpl extends CommandImpl implements ifCmd
{
  /**
   * The cached value of the '{@link #getExp() <em>Exp</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExp()
   * @generated
   * @ordered
   */
  protected Expression exp;

  /**
   * The cached value of the '{@link #getTrueCommands() <em>True Commands</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTrueCommands()
   * @generated
   * @ordered
   */
  protected CommandBlock trueCommands;

  /**
   * The cached value of the '{@link #getFalseCommands() <em>False Commands</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFalseCommands()
   * @generated
   * @ordered
   */
  protected CommandBlock falseCommands;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ifCmdImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CPackage.Literals.IF_CMD;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getExp()
  {
    return exp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExp(Expression newExp, NotificationChain msgs)
  {
    Expression oldExp = exp;
    exp = newExp;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CPackage.IF_CMD__EXP, oldExp, newExp);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExp(Expression newExp)
  {
    if (newExp != exp)
    {
      NotificationChain msgs = null;
      if (exp != null)
        msgs = ((InternalEObject)exp).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CPackage.IF_CMD__EXP, null, msgs);
      if (newExp != null)
        msgs = ((InternalEObject)newExp).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CPackage.IF_CMD__EXP, null, msgs);
      msgs = basicSetExp(newExp, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CPackage.IF_CMD__EXP, newExp, newExp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CommandBlock getTrueCommands()
  {
    return trueCommands;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTrueCommands(CommandBlock newTrueCommands, NotificationChain msgs)
  {
    CommandBlock oldTrueCommands = trueCommands;
    trueCommands = newTrueCommands;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CPackage.IF_CMD__TRUE_COMMANDS, oldTrueCommands, newTrueCommands);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTrueCommands(CommandBlock newTrueCommands)
  {
    if (newTrueCommands != trueCommands)
    {
      NotificationChain msgs = null;
      if (trueCommands != null)
        msgs = ((InternalEObject)trueCommands).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CPackage.IF_CMD__TRUE_COMMANDS, null, msgs);
      if (newTrueCommands != null)
        msgs = ((InternalEObject)newTrueCommands).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CPackage.IF_CMD__TRUE_COMMANDS, null, msgs);
      msgs = basicSetTrueCommands(newTrueCommands, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CPackage.IF_CMD__TRUE_COMMANDS, newTrueCommands, newTrueCommands));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CommandBlock getFalseCommands()
  {
    return falseCommands;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFalseCommands(CommandBlock newFalseCommands, NotificationChain msgs)
  {
    CommandBlock oldFalseCommands = falseCommands;
    falseCommands = newFalseCommands;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CPackage.IF_CMD__FALSE_COMMANDS, oldFalseCommands, newFalseCommands);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFalseCommands(CommandBlock newFalseCommands)
  {
    if (newFalseCommands != falseCommands)
    {
      NotificationChain msgs = null;
      if (falseCommands != null)
        msgs = ((InternalEObject)falseCommands).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CPackage.IF_CMD__FALSE_COMMANDS, null, msgs);
      if (newFalseCommands != null)
        msgs = ((InternalEObject)newFalseCommands).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CPackage.IF_CMD__FALSE_COMMANDS, null, msgs);
      msgs = basicSetFalseCommands(newFalseCommands, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CPackage.IF_CMD__FALSE_COMMANDS, newFalseCommands, newFalseCommands));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case CPackage.IF_CMD__EXP:
        return basicSetExp(null, msgs);
      case CPackage.IF_CMD__TRUE_COMMANDS:
        return basicSetTrueCommands(null, msgs);
      case CPackage.IF_CMD__FALSE_COMMANDS:
        return basicSetFalseCommands(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CPackage.IF_CMD__EXP:
        return getExp();
      case CPackage.IF_CMD__TRUE_COMMANDS:
        return getTrueCommands();
      case CPackage.IF_CMD__FALSE_COMMANDS:
        return getFalseCommands();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CPackage.IF_CMD__EXP:
        setExp((Expression)newValue);
        return;
      case CPackage.IF_CMD__TRUE_COMMANDS:
        setTrueCommands((CommandBlock)newValue);
        return;
      case CPackage.IF_CMD__FALSE_COMMANDS:
        setFalseCommands((CommandBlock)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CPackage.IF_CMD__EXP:
        setExp((Expression)null);
        return;
      case CPackage.IF_CMD__TRUE_COMMANDS:
        setTrueCommands((CommandBlock)null);
        return;
      case CPackage.IF_CMD__FALSE_COMMANDS:
        setFalseCommands((CommandBlock)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CPackage.IF_CMD__EXP:
        return exp != null;
      case CPackage.IF_CMD__TRUE_COMMANDS:
        return trueCommands != null;
      case CPackage.IF_CMD__FALSE_COMMANDS:
        return falseCommands != null;
    }
    return super.eIsSet(featureID);
  }

} //ifCmdImpl
