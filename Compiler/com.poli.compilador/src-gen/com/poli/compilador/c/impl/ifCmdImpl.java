/**
 * generated by Xtext 2.12.0
 */
package com.poli.compilador.c.impl;

import com.poli.compilador.c.CPackage;
import com.poli.compilador.c.Command;
import com.poli.compilador.c.Expression;
import com.poli.compilador.c.IfCmd;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>If Cmd</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.poli.compilador.c.impl.IfCmdImpl#getExp <em>Exp</em>}</li>
 *   <li>{@link com.poli.compilador.c.impl.IfCmdImpl#getTrueCommands <em>True Commands</em>}</li>
 *   <li>{@link com.poli.compilador.c.impl.IfCmdImpl#getFalseCommands <em>False Commands</em>}</li>
 * </ul>
 *
 * @generated
 */
public class IfCmdImpl extends CommandImpl implements IfCmd
{
  /**
   * The cached value of the '{@link #getExp() <em>Exp</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExp()
   * @generated
   * @ordered
   */
  protected Expression exp;

  /**
   * The cached value of the '{@link #getTrueCommands() <em>True Commands</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTrueCommands()
   * @generated
   * @ordered
   */
  protected EList<Command> trueCommands;

  /**
   * The cached value of the '{@link #getFalseCommands() <em>False Commands</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFalseCommands()
   * @generated
   * @ordered
   */
  protected EList<Command> falseCommands;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IfCmdImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CPackage.Literals.IF_CMD;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getExp()
  {
    return exp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExp(Expression newExp, NotificationChain msgs)
  {
    Expression oldExp = exp;
    exp = newExp;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CPackage.IF_CMD__EXP, oldExp, newExp);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExp(Expression newExp)
  {
    if (newExp != exp)
    {
      NotificationChain msgs = null;
      if (exp != null)
        msgs = ((InternalEObject)exp).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CPackage.IF_CMD__EXP, null, msgs);
      if (newExp != null)
        msgs = ((InternalEObject)newExp).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CPackage.IF_CMD__EXP, null, msgs);
      msgs = basicSetExp(newExp, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CPackage.IF_CMD__EXP, newExp, newExp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Command> getTrueCommands()
  {
    if (trueCommands == null)
    {
      trueCommands = new EObjectContainmentEList<Command>(Command.class, this, CPackage.IF_CMD__TRUE_COMMANDS);
    }
    return trueCommands;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Command> getFalseCommands()
  {
    if (falseCommands == null)
    {
      falseCommands = new EObjectContainmentEList<Command>(Command.class, this, CPackage.IF_CMD__FALSE_COMMANDS);
    }
    return falseCommands;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case CPackage.IF_CMD__EXP:
        return basicSetExp(null, msgs);
      case CPackage.IF_CMD__TRUE_COMMANDS:
        return ((InternalEList<?>)getTrueCommands()).basicRemove(otherEnd, msgs);
      case CPackage.IF_CMD__FALSE_COMMANDS:
        return ((InternalEList<?>)getFalseCommands()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CPackage.IF_CMD__EXP:
        return getExp();
      case CPackage.IF_CMD__TRUE_COMMANDS:
        return getTrueCommands();
      case CPackage.IF_CMD__FALSE_COMMANDS:
        return getFalseCommands();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CPackage.IF_CMD__EXP:
        setExp((Expression)newValue);
        return;
      case CPackage.IF_CMD__TRUE_COMMANDS:
        getTrueCommands().clear();
        getTrueCommands().addAll((Collection<? extends Command>)newValue);
        return;
      case CPackage.IF_CMD__FALSE_COMMANDS:
        getFalseCommands().clear();
        getFalseCommands().addAll((Collection<? extends Command>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CPackage.IF_CMD__EXP:
        setExp((Expression)null);
        return;
      case CPackage.IF_CMD__TRUE_COMMANDS:
        getTrueCommands().clear();
        return;
      case CPackage.IF_CMD__FALSE_COMMANDS:
        getFalseCommands().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CPackage.IF_CMD__EXP:
        return exp != null;
      case CPackage.IF_CMD__TRUE_COMMANDS:
        return trueCommands != null && !trueCommands.isEmpty();
      case CPackage.IF_CMD__FALSE_COMMANDS:
        return falseCommands != null && !falseCommands.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //IfCmdImpl
