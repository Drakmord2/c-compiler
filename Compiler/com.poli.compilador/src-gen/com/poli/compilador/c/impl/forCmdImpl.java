/**
 * generated by Xtext 2.12.0
 */
package com.poli.compilador.c.impl;

import com.poli.compilador.c.Assignment;
import com.poli.compilador.c.CPackage;
import com.poli.compilador.c.Command;
import com.poli.compilador.c.Expression;
import com.poli.compilador.c.ForCmd;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>For Cmd</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.poli.compilador.c.impl.ForCmdImpl#getInit <em>Init</em>}</li>
 *   <li>{@link com.poli.compilador.c.impl.ForCmdImpl#getInitAsg <em>Init Asg</em>}</li>
 *   <li>{@link com.poli.compilador.c.impl.ForCmdImpl#getExp <em>Exp</em>}</li>
 *   <li>{@link com.poli.compilador.c.impl.ForCmdImpl#getInc <em>Inc</em>}</li>
 *   <li>{@link com.poli.compilador.c.impl.ForCmdImpl#getIncAsg <em>Inc Asg</em>}</li>
 *   <li>{@link com.poli.compilador.c.impl.ForCmdImpl#getCommands <em>Commands</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ForCmdImpl extends CommandImpl implements ForCmd
{
  /**
   * The cached value of the '{@link #getInit() <em>Init</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInit()
   * @generated
   * @ordered
   */
  protected Expression init;

  /**
   * The cached value of the '{@link #getInitAsg() <em>Init Asg</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInitAsg()
   * @generated
   * @ordered
   */
  protected Assignment initAsg;

  /**
   * The cached value of the '{@link #getExp() <em>Exp</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExp()
   * @generated
   * @ordered
   */
  protected Expression exp;

  /**
   * The cached value of the '{@link #getInc() <em>Inc</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInc()
   * @generated
   * @ordered
   */
  protected Expression inc;

  /**
   * The cached value of the '{@link #getIncAsg() <em>Inc Asg</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIncAsg()
   * @generated
   * @ordered
   */
  protected Assignment incAsg;

  /**
   * The cached value of the '{@link #getCommands() <em>Commands</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCommands()
   * @generated
   * @ordered
   */
  protected EList<Command> commands;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ForCmdImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CPackage.Literals.FOR_CMD;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getInit()
  {
    return init;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetInit(Expression newInit, NotificationChain msgs)
  {
    Expression oldInit = init;
    init = newInit;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CPackage.FOR_CMD__INIT, oldInit, newInit);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setInit(Expression newInit)
  {
    if (newInit != init)
    {
      NotificationChain msgs = null;
      if (init != null)
        msgs = ((InternalEObject)init).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CPackage.FOR_CMD__INIT, null, msgs);
      if (newInit != null)
        msgs = ((InternalEObject)newInit).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CPackage.FOR_CMD__INIT, null, msgs);
      msgs = basicSetInit(newInit, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CPackage.FOR_CMD__INIT, newInit, newInit));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Assignment getInitAsg()
  {
    return initAsg;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetInitAsg(Assignment newInitAsg, NotificationChain msgs)
  {
    Assignment oldInitAsg = initAsg;
    initAsg = newInitAsg;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CPackage.FOR_CMD__INIT_ASG, oldInitAsg, newInitAsg);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setInitAsg(Assignment newInitAsg)
  {
    if (newInitAsg != initAsg)
    {
      NotificationChain msgs = null;
      if (initAsg != null)
        msgs = ((InternalEObject)initAsg).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CPackage.FOR_CMD__INIT_ASG, null, msgs);
      if (newInitAsg != null)
        msgs = ((InternalEObject)newInitAsg).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CPackage.FOR_CMD__INIT_ASG, null, msgs);
      msgs = basicSetInitAsg(newInitAsg, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CPackage.FOR_CMD__INIT_ASG, newInitAsg, newInitAsg));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getExp()
  {
    return exp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExp(Expression newExp, NotificationChain msgs)
  {
    Expression oldExp = exp;
    exp = newExp;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CPackage.FOR_CMD__EXP, oldExp, newExp);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExp(Expression newExp)
  {
    if (newExp != exp)
    {
      NotificationChain msgs = null;
      if (exp != null)
        msgs = ((InternalEObject)exp).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CPackage.FOR_CMD__EXP, null, msgs);
      if (newExp != null)
        msgs = ((InternalEObject)newExp).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CPackage.FOR_CMD__EXP, null, msgs);
      msgs = basicSetExp(newExp, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CPackage.FOR_CMD__EXP, newExp, newExp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getInc()
  {
    return inc;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetInc(Expression newInc, NotificationChain msgs)
  {
    Expression oldInc = inc;
    inc = newInc;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CPackage.FOR_CMD__INC, oldInc, newInc);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setInc(Expression newInc)
  {
    if (newInc != inc)
    {
      NotificationChain msgs = null;
      if (inc != null)
        msgs = ((InternalEObject)inc).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CPackage.FOR_CMD__INC, null, msgs);
      if (newInc != null)
        msgs = ((InternalEObject)newInc).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CPackage.FOR_CMD__INC, null, msgs);
      msgs = basicSetInc(newInc, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CPackage.FOR_CMD__INC, newInc, newInc));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Assignment getIncAsg()
  {
    return incAsg;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetIncAsg(Assignment newIncAsg, NotificationChain msgs)
  {
    Assignment oldIncAsg = incAsg;
    incAsg = newIncAsg;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CPackage.FOR_CMD__INC_ASG, oldIncAsg, newIncAsg);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIncAsg(Assignment newIncAsg)
  {
    if (newIncAsg != incAsg)
    {
      NotificationChain msgs = null;
      if (incAsg != null)
        msgs = ((InternalEObject)incAsg).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CPackage.FOR_CMD__INC_ASG, null, msgs);
      if (newIncAsg != null)
        msgs = ((InternalEObject)newIncAsg).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CPackage.FOR_CMD__INC_ASG, null, msgs);
      msgs = basicSetIncAsg(newIncAsg, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CPackage.FOR_CMD__INC_ASG, newIncAsg, newIncAsg));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Command> getCommands()
  {
    if (commands == null)
    {
      commands = new EObjectContainmentEList<Command>(Command.class, this, CPackage.FOR_CMD__COMMANDS);
    }
    return commands;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case CPackage.FOR_CMD__INIT:
        return basicSetInit(null, msgs);
      case CPackage.FOR_CMD__INIT_ASG:
        return basicSetInitAsg(null, msgs);
      case CPackage.FOR_CMD__EXP:
        return basicSetExp(null, msgs);
      case CPackage.FOR_CMD__INC:
        return basicSetInc(null, msgs);
      case CPackage.FOR_CMD__INC_ASG:
        return basicSetIncAsg(null, msgs);
      case CPackage.FOR_CMD__COMMANDS:
        return ((InternalEList<?>)getCommands()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CPackage.FOR_CMD__INIT:
        return getInit();
      case CPackage.FOR_CMD__INIT_ASG:
        return getInitAsg();
      case CPackage.FOR_CMD__EXP:
        return getExp();
      case CPackage.FOR_CMD__INC:
        return getInc();
      case CPackage.FOR_CMD__INC_ASG:
        return getIncAsg();
      case CPackage.FOR_CMD__COMMANDS:
        return getCommands();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CPackage.FOR_CMD__INIT:
        setInit((Expression)newValue);
        return;
      case CPackage.FOR_CMD__INIT_ASG:
        setInitAsg((Assignment)newValue);
        return;
      case CPackage.FOR_CMD__EXP:
        setExp((Expression)newValue);
        return;
      case CPackage.FOR_CMD__INC:
        setInc((Expression)newValue);
        return;
      case CPackage.FOR_CMD__INC_ASG:
        setIncAsg((Assignment)newValue);
        return;
      case CPackage.FOR_CMD__COMMANDS:
        getCommands().clear();
        getCommands().addAll((Collection<? extends Command>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CPackage.FOR_CMD__INIT:
        setInit((Expression)null);
        return;
      case CPackage.FOR_CMD__INIT_ASG:
        setInitAsg((Assignment)null);
        return;
      case CPackage.FOR_CMD__EXP:
        setExp((Expression)null);
        return;
      case CPackage.FOR_CMD__INC:
        setInc((Expression)null);
        return;
      case CPackage.FOR_CMD__INC_ASG:
        setIncAsg((Assignment)null);
        return;
      case CPackage.FOR_CMD__COMMANDS:
        getCommands().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CPackage.FOR_CMD__INIT:
        return init != null;
      case CPackage.FOR_CMD__INIT_ASG:
        return initAsg != null;
      case CPackage.FOR_CMD__EXP:
        return exp != null;
      case CPackage.FOR_CMD__INC:
        return inc != null;
      case CPackage.FOR_CMD__INC_ASG:
        return incAsg != null;
      case CPackage.FOR_CMD__COMMANDS:
        return commands != null && !commands.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ForCmdImpl
