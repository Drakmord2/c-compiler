/**
 * generated by Xtext 2.12.0
 */
package com.poli.compilador.c.impl;

import com.poli.compilador.c.Atom;
import com.poli.compilador.c.CPackage;
import com.poli.compilador.c.PointerExp;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Pointer Exp</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.poli.compilador.c.impl.PointerExpImpl#getPtr <em>Ptr</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PointerExpImpl extends lValueImpl implements PointerExp
{
  /**
   * The cached value of the '{@link #getPtr() <em>Ptr</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPtr()
   * @generated
   * @ordered
   */
  protected Atom ptr;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PointerExpImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CPackage.Literals.POINTER_EXP;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Atom getPtr()
  {
    return ptr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPtr(Atom newPtr, NotificationChain msgs)
  {
    Atom oldPtr = ptr;
    ptr = newPtr;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CPackage.POINTER_EXP__PTR, oldPtr, newPtr);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPtr(Atom newPtr)
  {
    if (newPtr != ptr)
    {
      NotificationChain msgs = null;
      if (ptr != null)
        msgs = ((InternalEObject)ptr).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CPackage.POINTER_EXP__PTR, null, msgs);
      if (newPtr != null)
        msgs = ((InternalEObject)newPtr).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CPackage.POINTER_EXP__PTR, null, msgs);
      msgs = basicSetPtr(newPtr, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CPackage.POINTER_EXP__PTR, newPtr, newPtr));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case CPackage.POINTER_EXP__PTR:
        return basicSetPtr(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CPackage.POINTER_EXP__PTR:
        return getPtr();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CPackage.POINTER_EXP__PTR:
        setPtr((Atom)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CPackage.POINTER_EXP__PTR:
        setPtr((Atom)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CPackage.POINTER_EXP__PTR:
        return ptr != null;
    }
    return super.eIsSet(featureID);
  }

} //PointerExpImpl
