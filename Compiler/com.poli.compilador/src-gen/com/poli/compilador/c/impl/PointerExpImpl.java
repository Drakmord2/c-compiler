/**
 * generated by Xtext 2.12.0
 */
package com.poli.compilador.c.impl;

import com.poli.compilador.c.AccessExp;
import com.poli.compilador.c.ArithExp;
import com.poli.compilador.c.Atom;
import com.poli.compilador.c.CPackage;
import com.poli.compilador.c.Expression;
import com.poli.compilador.c.Factor;
import com.poli.compilador.c.PointerExp;
import com.poli.compilador.c.RelExp;
import com.poli.compilador.c.Term;
import com.poli.compilador.c.lValue;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Pointer Exp</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.poli.compilador.c.impl.PointerExpImpl#getArgs <em>Args</em>}</li>
 *   <li>{@link com.poli.compilador.c.impl.PointerExpImpl#getVal <em>Val</em>}</li>
 *   <li>{@link com.poli.compilador.c.impl.PointerExpImpl#getAcc <em>Acc</em>}</li>
 *   <li>{@link com.poli.compilador.c.impl.PointerExpImpl#getExp <em>Exp</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PointerExpImpl extends VariableImpl implements PointerExp
{
  /**
   * The cached value of the '{@link #getArgs() <em>Args</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArgs()
   * @generated
   * @ordered
   */
  protected EList<EObject> args;

  /**
   * The default value of the '{@link #getVal() <em>Val</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVal()
   * @generated
   * @ordered
   */
  protected static final String VAL_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getVal() <em>Val</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVal()
   * @generated
   * @ordered
   */
  protected String val = VAL_EDEFAULT;

  /**
   * The cached value of the '{@link #getAcc() <em>Acc</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAcc()
   * @generated
   * @ordered
   */
  protected AccessExp acc;

  /**
   * The cached value of the '{@link #getExp() <em>Exp</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExp()
   * @generated
   * @ordered
   */
  protected EList<Expression> exp;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PointerExpImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CPackage.Literals.POINTER_EXP;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<EObject> getArgs()
  {
    if (args == null)
    {
      args = new EObjectContainmentEList<EObject>(EObject.class, this, CPackage.POINTER_EXP__ARGS);
    }
    return args;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getVal()
  {
    return val;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setVal(String newVal)
  {
    String oldVal = val;
    val = newVal;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CPackage.POINTER_EXP__VAL, oldVal, val));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AccessExp getAcc()
  {
    return acc;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAcc(AccessExp newAcc, NotificationChain msgs)
  {
    AccessExp oldAcc = acc;
    acc = newAcc;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CPackage.POINTER_EXP__ACC, oldAcc, newAcc);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAcc(AccessExp newAcc)
  {
    if (newAcc != acc)
    {
      NotificationChain msgs = null;
      if (acc != null)
        msgs = ((InternalEObject)acc).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CPackage.POINTER_EXP__ACC, null, msgs);
      if (newAcc != null)
        msgs = ((InternalEObject)newAcc).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CPackage.POINTER_EXP__ACC, null, msgs);
      msgs = basicSetAcc(newAcc, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CPackage.POINTER_EXP__ACC, newAcc, newAcc));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Expression> getExp()
  {
    if (exp == null)
    {
      exp = new EObjectContainmentEList<Expression>(Expression.class, this, CPackage.POINTER_EXP__EXP);
    }
    return exp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case CPackage.POINTER_EXP__ARGS:
        return ((InternalEList<?>)getArgs()).basicRemove(otherEnd, msgs);
      case CPackage.POINTER_EXP__ACC:
        return basicSetAcc(null, msgs);
      case CPackage.POINTER_EXP__EXP:
        return ((InternalEList<?>)getExp()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CPackage.POINTER_EXP__ARGS:
        return getArgs();
      case CPackage.POINTER_EXP__VAL:
        return getVal();
      case CPackage.POINTER_EXP__ACC:
        return getAcc();
      case CPackage.POINTER_EXP__EXP:
        return getExp();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CPackage.POINTER_EXP__ARGS:
        getArgs().clear();
        getArgs().addAll((Collection<? extends EObject>)newValue);
        return;
      case CPackage.POINTER_EXP__VAL:
        setVal((String)newValue);
        return;
      case CPackage.POINTER_EXP__ACC:
        setAcc((AccessExp)newValue);
        return;
      case CPackage.POINTER_EXP__EXP:
        getExp().clear();
        getExp().addAll((Collection<? extends Expression>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CPackage.POINTER_EXP__ARGS:
        getArgs().clear();
        return;
      case CPackage.POINTER_EXP__VAL:
        setVal(VAL_EDEFAULT);
        return;
      case CPackage.POINTER_EXP__ACC:
        setAcc((AccessExp)null);
        return;
      case CPackage.POINTER_EXP__EXP:
        getExp().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CPackage.POINTER_EXP__ARGS:
        return args != null && !args.isEmpty();
      case CPackage.POINTER_EXP__VAL:
        return VAL_EDEFAULT == null ? val != null : !VAL_EDEFAULT.equals(val);
      case CPackage.POINTER_EXP__ACC:
        return acc != null;
      case CPackage.POINTER_EXP__EXP:
        return exp != null && !exp.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int eBaseStructuralFeatureID(int derivedFeatureID, Class<?> baseClass)
  {
    if (baseClass == RelExp.class)
    {
      switch (derivedFeatureID)
      {
        case CPackage.POINTER_EXP__ARGS: return CPackage.REL_EXP__ARGS;
        case CPackage.POINTER_EXP__VAL: return CPackage.REL_EXP__VAL;
        default: return -1;
      }
    }
    if (baseClass == ArithExp.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == Term.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == Factor.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == Atom.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == lValue.class)
    {
      switch (derivedFeatureID)
      {
        case CPackage.POINTER_EXP__ACC: return CPackage.LVALUE__ACC;
        default: return -1;
      }
    }
    return super.eBaseStructuralFeatureID(derivedFeatureID, baseClass);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int eDerivedStructuralFeatureID(int baseFeatureID, Class<?> baseClass)
  {
    if (baseClass == RelExp.class)
    {
      switch (baseFeatureID)
      {
        case CPackage.REL_EXP__ARGS: return CPackage.POINTER_EXP__ARGS;
        case CPackage.REL_EXP__VAL: return CPackage.POINTER_EXP__VAL;
        default: return -1;
      }
    }
    if (baseClass == ArithExp.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == Term.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == Factor.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == Atom.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == lValue.class)
    {
      switch (baseFeatureID)
      {
        case CPackage.LVALUE__ACC: return CPackage.POINTER_EXP__ACC;
        default: return -1;
      }
    }
    return super.eDerivedStructuralFeatureID(baseFeatureID, baseClass);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (val: ");
    result.append(val);
    result.append(')');
    return result.toString();
  }

} //PointerExpImpl
