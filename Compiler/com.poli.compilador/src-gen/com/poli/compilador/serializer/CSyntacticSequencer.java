/*
 * generated by Xtext 2.12.0
 */
package com.poli.compilador.serializer;

import com.google.inject.Inject;
import com.poli.compilador.services.CGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class CSyntacticSequencer extends AbstractSyntacticSequencer {

	protected CGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Command___BreakKeyword_1_1_SemicolonKeyword_1_2___or___ContinueKeyword_2_1_SemicolonKeyword_2_2___or___ReturnKeyword_3_1_SemicolonKeyword_3_3__;
	protected AbstractElementAlias match_Command___ElseKeyword_0_8_0_LeftCurlyBracketKeyword_0_8_1_RightCurlyBracketKeyword_0_8_3__q;
	protected AbstractElementAlias match_lValue___LeftParenthesisKeyword_0_2_0_ArgumentParserRuleCall_0_2_1_RightParenthesisKeyword_0_2_2__q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (CGrammarAccess) access;
		match_Command___BreakKeyword_1_1_SemicolonKeyword_1_2___or___ContinueKeyword_2_1_SemicolonKeyword_2_2___or___ReturnKeyword_3_1_SemicolonKeyword_3_3__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getCommandAccess().getBreakKeyword_1_1()), new TokenAlias(false, false, grammarAccess.getCommandAccess().getSemicolonKeyword_1_2())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getCommandAccess().getContinueKeyword_2_1()), new TokenAlias(false, false, grammarAccess.getCommandAccess().getSemicolonKeyword_2_2())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getCommandAccess().getReturnKeyword_3_1()), new TokenAlias(false, false, grammarAccess.getCommandAccess().getSemicolonKeyword_3_3())));
		match_Command___ElseKeyword_0_8_0_LeftCurlyBracketKeyword_0_8_1_RightCurlyBracketKeyword_0_8_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getCommandAccess().getElseKeyword_0_8_0()), new TokenAlias(false, false, grammarAccess.getCommandAccess().getLeftCurlyBracketKeyword_0_8_1()), new TokenAlias(false, false, grammarAccess.getCommandAccess().getRightCurlyBracketKeyword_0_8_3()));
		match_lValue___LeftParenthesisKeyword_0_2_0_ArgumentParserRuleCall_0_2_1_RightParenthesisKeyword_0_2_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getLValueAccess().getLeftParenthesisKeyword_0_2_0()), new TokenAlias(false, false, grammarAccess.getLValueAccess().getArgumentParserRuleCall_0_2_1()), new TokenAlias(false, false, grammarAccess.getLValueAccess().getRightParenthesisKeyword_0_2_2()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getArgumentRule())
			return getArgumentToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * Argument		: '1';
	 */
	protected String getArgumentToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "1";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Command___BreakKeyword_1_1_SemicolonKeyword_1_2___or___ContinueKeyword_2_1_SemicolonKeyword_2_2___or___ReturnKeyword_3_1_SemicolonKeyword_3_3__.equals(syntax))
				emit_Command___BreakKeyword_1_1_SemicolonKeyword_1_2___or___ContinueKeyword_2_1_SemicolonKeyword_2_2___or___ReturnKeyword_3_1_SemicolonKeyword_3_3__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Command___ElseKeyword_0_8_0_LeftCurlyBracketKeyword_0_8_1_RightCurlyBracketKeyword_0_8_3__q.equals(syntax))
				emit_Command___ElseKeyword_0_8_0_LeftCurlyBracketKeyword_0_8_1_RightCurlyBracketKeyword_0_8_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_lValue___LeftParenthesisKeyword_0_2_0_ArgumentParserRuleCall_0_2_1_RightParenthesisKeyword_0_2_2__q.equals(syntax))
				emit_lValue___LeftParenthesisKeyword_0_2_0_ArgumentParserRuleCall_0_2_1_RightParenthesisKeyword_0_2_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ('break' ';') | ('continue' ';') | ('return' ';')
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_Command___BreakKeyword_1_1_SemicolonKeyword_1_2___or___ContinueKeyword_2_1_SemicolonKeyword_2_2___or___ReturnKeyword_3_1_SemicolonKeyword_3_3__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('else' '{' '}')?
	 *
	 * This ambiguous syntax occurs at:
	 *     commands+=Command '}' (ambiguity) (rule end)
	 *     exp+=Expression ')' '{' '}' (ambiguity) (rule end)
	 */
	protected void emit_Command___ElseKeyword_0_8_0_LeftCurlyBracketKeyword_0_8_1_RightCurlyBracketKeyword_0_8_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' Argument ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     val=ID (ambiguity) (rule end)
	 */
	protected void emit_lValue___LeftParenthesisKeyword_0_2_0_ArgumentParserRuleCall_0_2_1_RightParenthesisKeyword_0_2_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
