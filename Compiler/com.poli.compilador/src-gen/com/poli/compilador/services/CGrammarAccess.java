/*
 * generated by Xtext 2.12.0
 */
package com.poli.compilador.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.Program");
		private final Assignment cDefinitionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDefinitionDefinitionParserRuleCall_0 = (RuleCall)cDefinitionAssignment.eContents().get(0);
		
		////--------------------------------------------------------------------
		//Program:
		//	definition+=Definition*;
		@Override public ParserRule getRule() { return rule; }
		
		//definition+=Definition*
		public Assignment getDefinitionAssignment() { return cDefinitionAssignment; }
		
		//Definition
		public RuleCall getDefinitionDefinitionParserRuleCall_0() { return cDefinitionDefinitionParserRuleCall_0; }
	}
	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.Definition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStructParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Definition:
		//	Struct | Function | Declaration;
		@Override public ParserRule getRule() { return rule; }
		
		//Struct | Function | Declaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Struct
		public RuleCall getStructParserRuleCall_0() { return cStructParserRuleCall_0; }
		
		//Function
		public RuleCall getFunctionParserRuleCall_1() { return cFunctionParserRuleCall_1; }
		
		//Declaration
		public RuleCall getDeclarationParserRuleCall_2() { return cDeclarationParserRuleCall_2; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFunctionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTipoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTipoTypeParserRuleCall_2_0 = (RuleCall)cTipoAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cParamsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cParamsDeclarationParserRuleCall_5_0_0 = (RuleCall)cParamsAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cParamsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cParamsDeclarationParserRuleCall_5_1_1_0 = (RuleCall)cParamsAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cCommandsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cCommandsCommandParserRuleCall_8_0 = (RuleCall)cCommandsAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Function:
		//	{Function} 'function' tipo=Type name=ID '(' (params+=Declaration (',' params+=Declaration)*)? ')' '{'
		//	commands+=Command* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Function} 'function' tipo=Type name=ID '(' (params+=Declaration (',' params+=Declaration)*)? ')' '{' commands+=Command*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Function}
		public Action getFunctionAction_0() { return cFunctionAction_0; }
		
		//'function'
		public Keyword getFunctionKeyword_1() { return cFunctionKeyword_1; }
		
		//tipo=Type
		public Assignment getTipoAssignment_2() { return cTipoAssignment_2; }
		
		//Type
		public RuleCall getTipoTypeParserRuleCall_2_0() { return cTipoTypeParserRuleCall_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//(params+=Declaration (',' params+=Declaration)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//params+=Declaration
		public Assignment getParamsAssignment_5_0() { return cParamsAssignment_5_0; }
		
		//Declaration
		public RuleCall getParamsDeclarationParserRuleCall_5_0_0() { return cParamsDeclarationParserRuleCall_5_0_0; }
		
		//(',' params+=Declaration)*
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//','
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }
		
		//params+=Declaration
		public Assignment getParamsAssignment_5_1_1() { return cParamsAssignment_5_1_1; }
		
		//Declaration
		public RuleCall getParamsDeclarationParserRuleCall_5_1_1_0() { return cParamsDeclarationParserRuleCall_5_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }
		
		//commands+=Command*
		public Assignment getCommandsAssignment_8() { return cCommandsAssignment_8; }
		
		//Command
		public RuleCall getCommandsCommandParserRuleCall_8_0() { return cCommandsCommandParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.Declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cVarDeclObjAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Assignment cTipoAssignment_1_0_1_0 = (Assignment)cGroup_1_0_1.eContents().get(0);
		private final RuleCall cTipoTypeParserRuleCall_1_0_1_0_0 = (RuleCall)cTipoAssignment_1_0_1_0.eContents().get(0);
		private final Keyword cAsteriskAsteriskKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cNameAssignment_1_0_1_2 = (Assignment)cGroup_1_0_1.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_1_0_1_2_0 = (RuleCall)cNameAssignment_1_0_1_2.eContents().get(0);
		private final Assignment cValAssignment_1_0_1_3 = (Assignment)cGroup_1_0_1.eContents().get(3);
		private final RuleCall cValAssignmentParserRuleCall_1_0_1_3_0 = (RuleCall)cValAssignment_1_0_1_3.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cStrDeclObjAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cStructKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cStrAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final CrossReference cStrStructCrossReference_1_1_1_1_0 = (CrossReference)cStrAssignment_1_1_1_1.eContents().get(0);
		private final RuleCall cStrStructIDTerminalRuleCall_1_1_1_1_0_1 = (RuleCall)cStrStructCrossReference_1_1_1_1_0.eContents().get(1);
		private final Assignment cNameAssignment_1_1_1_2 = (Assignment)cGroup_1_1_1.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_1_1_1_2_0 = (RuleCall)cNameAssignment_1_1_1_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Declaration:
		//	{Declaration} ({VarDecl.obj=current} (tipo=Type '**'? name=ID val=Assignment?) | {StrDecl.obj=current} ('struct'
		//	str=[Struct] name=ID)) ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{Declaration} ({VarDecl.obj=current} (tipo=Type '**'? name=ID val=Assignment?) | {StrDecl.obj=current} ('struct'
		//str=[Struct] name=ID)) ';'
		public Group getGroup() { return cGroup; }
		
		//{Declaration}
		public Action getDeclarationAction_0() { return cDeclarationAction_0; }
		
		//{VarDecl.obj=current} (tipo=Type '**'? name=ID val=Assignment?) | {StrDecl.obj=current} ('struct' str=[Struct] name=ID)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//{VarDecl.obj=current} (tipo=Type '**'? name=ID val=Assignment?)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{VarDecl.obj=current}
		public Action getVarDeclObjAction_1_0_0() { return cVarDeclObjAction_1_0_0; }
		
		//tipo=Type '**'? name=ID val=Assignment?
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//tipo=Type
		public Assignment getTipoAssignment_1_0_1_0() { return cTipoAssignment_1_0_1_0; }
		
		//Type
		public RuleCall getTipoTypeParserRuleCall_1_0_1_0_0() { return cTipoTypeParserRuleCall_1_0_1_0_0; }
		
		//'**'?
		public Keyword getAsteriskAsteriskKeyword_1_0_1_1() { return cAsteriskAsteriskKeyword_1_0_1_1; }
		
		//name=ID
		public Assignment getNameAssignment_1_0_1_2() { return cNameAssignment_1_0_1_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_1_2_0() { return cNameIDTerminalRuleCall_1_0_1_2_0; }
		
		//val=Assignment?
		public Assignment getValAssignment_1_0_1_3() { return cValAssignment_1_0_1_3; }
		
		//Assignment
		public RuleCall getValAssignmentParserRuleCall_1_0_1_3_0() { return cValAssignmentParserRuleCall_1_0_1_3_0; }
		
		//{StrDecl.obj=current} ('struct' str=[Struct] name=ID)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{StrDecl.obj=current}
		public Action getStrDeclObjAction_1_1_0() { return cStrDeclObjAction_1_1_0; }
		
		//'struct' str=[Struct] name=ID
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//'struct'
		public Keyword getStructKeyword_1_1_1_0() { return cStructKeyword_1_1_1_0; }
		
		//str=[Struct]
		public Assignment getStrAssignment_1_1_1_1() { return cStrAssignment_1_1_1_1; }
		
		//[Struct]
		public CrossReference getStrStructCrossReference_1_1_1_1_0() { return cStrStructCrossReference_1_1_1_1_0; }
		
		//ID
		public RuleCall getStrStructIDTerminalRuleCall_1_1_1_1_0_1() { return cStrStructIDTerminalRuleCall_1_1_1_1_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1_1_1_2() { return cNameAssignment_1_1_1_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_1_2_0() { return cNameIDTerminalRuleCall_1_1_1_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class StructElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.Struct");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStructAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStructKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDeclAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDeclDeclarationParserRuleCall_4_0 = (RuleCall)cDeclAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Struct:
		//	{Struct} 'struct' name=ID '{' decl+=Declaration* '}' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{Struct} 'struct' name=ID '{' decl+=Declaration* '}' ';'
		public Group getGroup() { return cGroup; }
		
		//{Struct}
		public Action getStructAction_0() { return cStructAction_0; }
		
		//'struct'
		public Keyword getStructKeyword_1() { return cStructKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//decl+=Declaration*
		public Assignment getDeclAssignment_4() { return cDeclAssignment_4; }
		
		//Declaration
		public RuleCall getDeclDeclarationParserRuleCall_4_0() { return cDeclDeclarationParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.Command");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIfCmdAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cIfKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cExpAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cExpExpressionParserRuleCall_0_3_0 = (RuleCall)cExpAssignment_0_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Assignment cTrueCommandsAssignment_0_6 = (Assignment)cGroup_0.eContents().get(6);
		private final RuleCall cTrueCommandsCommandParserRuleCall_0_6_0 = (RuleCall)cTrueCommandsAssignment_0_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_7 = (Keyword)cGroup_0.eContents().get(7);
		private final Group cGroup_0_8 = (Group)cGroup_0.eContents().get(8);
		private final Keyword cElseKeyword_0_8_0 = (Keyword)cGroup_0_8.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_8_1 = (Keyword)cGroup_0_8.eContents().get(1);
		private final Assignment cFalseCommandsAssignment_0_8_2 = (Assignment)cGroup_0_8.eContents().get(2);
		private final RuleCall cFalseCommandsCommandParserRuleCall_0_8_2_0 = (RuleCall)cFalseCommandsAssignment_0_8_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_8_3 = (Keyword)cGroup_0_8.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cWhileCmdAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cWhileKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cExpAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cExpExpressionParserRuleCall_1_3_0 = (RuleCall)cExpAssignment_1_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Assignment cCommandsAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cCommandsCommandParserRuleCall_1_6_0 = (RuleCall)cCommandsAssignment_1_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_7 = (Keyword)cGroup_1.eContents().get(7);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cForCmdAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cForKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cInitAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cInitLValueParserRuleCall_2_3_0 = (RuleCall)cInitAssignment_2_3.eContents().get(0);
		private final Assignment cInitAsgAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cInitAsgAssignmentParserRuleCall_2_4_0 = (RuleCall)cInitAsgAssignment_2_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		private final Assignment cExpAssignment_2_6 = (Assignment)cGroup_2.eContents().get(6);
		private final RuleCall cExpExpressionParserRuleCall_2_6_0 = (RuleCall)cExpAssignment_2_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_7 = (Keyword)cGroup_2.eContents().get(7);
		private final Assignment cIncAssignment_2_8 = (Assignment)cGroup_2.eContents().get(8);
		private final RuleCall cIncFactorParserRuleCall_2_8_0 = (RuleCall)cIncAssignment_2_8.eContents().get(0);
		private final Assignment cIncAsgAssignment_2_9 = (Assignment)cGroup_2.eContents().get(9);
		private final RuleCall cIncAsgAssignmentParserRuleCall_2_9_0 = (RuleCall)cIncAsgAssignment_2_9.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_10 = (Keyword)cGroup_2.eContents().get(10);
		private final Keyword cLeftCurlyBracketKeyword_2_11 = (Keyword)cGroup_2.eContents().get(11);
		private final Assignment cCommandsAssignment_2_12 = (Assignment)cGroup_2.eContents().get(12);
		private final RuleCall cCommandsCommandParserRuleCall_2_12_0 = (RuleCall)cCommandsAssignment_2_12.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_13 = (Keyword)cGroup_2.eContents().get(13);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cSwitchCmdAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cSwitchKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cExpAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cExpExpressionParserRuleCall_3_3_0 = (RuleCall)cExpAssignment_3_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_3_5 = (Keyword)cGroup_3.eContents().get(5);
		private final Assignment cCasesAssignment_3_6 = (Assignment)cGroup_3.eContents().get(6);
		private final RuleCall cCasesCaseParserRuleCall_3_6_0 = (RuleCall)cCasesAssignment_3_6.eContents().get(0);
		private final Group cGroup_3_7 = (Group)cGroup_3.eContents().get(7);
		private final Keyword cDefaultKeyword_3_7_0 = (Keyword)cGroup_3_7.eContents().get(0);
		private final Keyword cColonKeyword_3_7_1 = (Keyword)cGroup_3_7.eContents().get(1);
		private final Assignment cDefaultCmdsAssignment_3_7_2 = (Assignment)cGroup_3_7.eContents().get(2);
		private final RuleCall cDefaultCmdsCommandParserRuleCall_3_7_2_0 = (RuleCall)cDefaultCmdsAssignment_3_7_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_8 = (Keyword)cGroup_3.eContents().get(8);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cDoWhileCmdAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cDoKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cCommandsAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cCommandsCommandParserRuleCall_4_3_0 = (RuleCall)cCommandsAssignment_4_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Keyword cWhileKeyword_4_5 = (Keyword)cGroup_4.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_4_6 = (Keyword)cGroup_4.eContents().get(6);
		private final Assignment cExpAssignment_4_7 = (Assignment)cGroup_4.eContents().get(7);
		private final RuleCall cExpExpressionParserRuleCall_4_7_0 = (RuleCall)cExpAssignment_4_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_8 = (Keyword)cGroup_4.eContents().get(8);
		private final Keyword cSemicolonKeyword_4_9 = (Keyword)cGroup_4.eContents().get(9);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cVarCmdAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cLvalAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cLvalFactorParserRuleCall_5_1_0 = (RuleCall)cLvalAssignment_5_1.eContents().get(0);
		private final Assignment cAsgAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cAsgAssignmentParserRuleCall_5_2_0 = (RuleCall)cAsgAssignment_5_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cBreakCmdAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Keyword cBreakKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Keyword cSemicolonKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cContinueCmdAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Keyword cContinueKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Keyword cSemicolonKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cReturnCmdAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Keyword cReturnKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cExpAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cExpExpressionParserRuleCall_8_2_0 = (RuleCall)cExpAssignment_8_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Action cDeclCmdAction_9_0 = (Action)cGroup_9.eContents().get(0);
		private final Assignment cValAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cValDeclarationParserRuleCall_9_1_0 = (RuleCall)cValAssignment_9_1.eContents().get(0);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Action cPrintCmdAction_10_0 = (Action)cGroup_10.eContents().get(0);
		private final Keyword cPrintKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_10_2 = (Keyword)cGroup_10.eContents().get(2);
		private final Assignment cExpAssignment_10_3 = (Assignment)cGroup_10.eContents().get(3);
		private final RuleCall cExpExpressionParserRuleCall_10_3_0 = (RuleCall)cExpAssignment_10_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10_4 = (Keyword)cGroup_10.eContents().get(4);
		private final Keyword cSemicolonKeyword_10_5 = (Keyword)cGroup_10.eContents().get(5);
		
		//Command:
		//	{IfCmd} 'if' '(' exp=Expression ')' '{' trueCommands+=Command* '}' ('else' '{' falseCommands+=Command* '}')?
		//	| {WhileCmd} 'while' '(' exp=Expression ')' '{' commands+=Command* '}'
		//	| {ForCmd} 'for' '(' init=lValue initAsg=Assignment ';' exp=Expression ';' inc=Factor incAsg=Assignment? ')' '{'
		//	commands+=Command* '}'
		//	| {SwitchCmd} 'switch' '(' exp=Expression ')' '{' cases+=Case* ('default' ':' defaultCmds+=Command*)? '}'
		//	| {DoWhileCmd} 'do' '{' commands+=Command* '}' 'while' '(' exp=Expression ')' ';'
		//	| {VarCmd} lval=Factor asg=Assignment? ';'
		//	| {BreakCmd} 'break' ';'
		//	| {ContinueCmd} 'continue' ';'
		//	| {ReturnCmd} 'return' exp=Expression? ';'
		//	| {DeclCmd} val=Declaration
		//	| {PrintCmd} 'print' '(' exp=Expression? ')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{IfCmd} 'if' '(' exp=Expression ')' '{' trueCommands+=Command* '}' ('else' '{' falseCommands+=Command* '}')? |
		//{WhileCmd} 'while' '(' exp=Expression ')' '{' commands+=Command* '}' | {ForCmd} 'for' '(' init=lValue
		//initAsg=Assignment ';' exp=Expression ';' inc=Factor incAsg=Assignment? ')' '{' commands+=Command* '}' | {SwitchCmd}
		//'switch' '(' exp=Expression ')' '{' cases+=Case* ('default' ':' defaultCmds+=Command*)? '}' | {DoWhileCmd} 'do' '{'
		//commands+=Command* '}' 'while' '(' exp=Expression ')' ';' | {VarCmd} lval=Factor asg=Assignment? ';' | {BreakCmd}
		//'break' ';' | {ContinueCmd} 'continue' ';' | {ReturnCmd} 'return' exp=Expression? ';' | {DeclCmd} val=Declaration |
		//{PrintCmd} 'print' '(' exp=Expression? ')' ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{IfCmd} 'if' '(' exp=Expression ')' '{' trueCommands+=Command* '}' ('else' '{' falseCommands+=Command* '}')?
		public Group getGroup_0() { return cGroup_0; }
		
		//{IfCmd}
		public Action getIfCmdAction_0_0() { return cIfCmdAction_0_0; }
		
		//'if'
		public Keyword getIfKeyword_0_1() { return cIfKeyword_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_2() { return cLeftParenthesisKeyword_0_2; }
		
		//exp=Expression
		public Assignment getExpAssignment_0_3() { return cExpAssignment_0_3; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_0_3_0() { return cExpExpressionParserRuleCall_0_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_4() { return cRightParenthesisKeyword_0_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_5() { return cLeftCurlyBracketKeyword_0_5; }
		
		//trueCommands+=Command*
		public Assignment getTrueCommandsAssignment_0_6() { return cTrueCommandsAssignment_0_6; }
		
		//Command
		public RuleCall getTrueCommandsCommandParserRuleCall_0_6_0() { return cTrueCommandsCommandParserRuleCall_0_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_0_7() { return cRightCurlyBracketKeyword_0_7; }
		
		//('else' '{' falseCommands+=Command* '}')?
		public Group getGroup_0_8() { return cGroup_0_8; }
		
		//'else'
		public Keyword getElseKeyword_0_8_0() { return cElseKeyword_0_8_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_8_1() { return cLeftCurlyBracketKeyword_0_8_1; }
		
		//falseCommands+=Command*
		public Assignment getFalseCommandsAssignment_0_8_2() { return cFalseCommandsAssignment_0_8_2; }
		
		//Command
		public RuleCall getFalseCommandsCommandParserRuleCall_0_8_2_0() { return cFalseCommandsCommandParserRuleCall_0_8_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_0_8_3() { return cRightCurlyBracketKeyword_0_8_3; }
		
		//{WhileCmd} 'while' '(' exp=Expression ')' '{' commands+=Command* '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//{WhileCmd}
		public Action getWhileCmdAction_1_0() { return cWhileCmdAction_1_0; }
		
		//'while'
		public Keyword getWhileKeyword_1_1() { return cWhileKeyword_1_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }
		
		//exp=Expression
		public Assignment getExpAssignment_1_3() { return cExpAssignment_1_3; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_3_0() { return cExpExpressionParserRuleCall_1_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_5() { return cLeftCurlyBracketKeyword_1_5; }
		
		//commands+=Command*
		public Assignment getCommandsAssignment_1_6() { return cCommandsAssignment_1_6; }
		
		//Command
		public RuleCall getCommandsCommandParserRuleCall_1_6_0() { return cCommandsCommandParserRuleCall_1_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_7() { return cRightCurlyBracketKeyword_1_7; }
		
		//{ForCmd} 'for' '(' init=lValue initAsg=Assignment ';' exp=Expression ';' inc=Factor incAsg=Assignment? ')' '{'
		//commands+=Command* '}'
		public Group getGroup_2() { return cGroup_2; }
		
		//{ForCmd}
		public Action getForCmdAction_2_0() { return cForCmdAction_2_0; }
		
		//'for'
		public Keyword getForKeyword_2_1() { return cForKeyword_2_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_2() { return cLeftParenthesisKeyword_2_2; }
		
		//init=lValue
		public Assignment getInitAssignment_2_3() { return cInitAssignment_2_3; }
		
		//lValue
		public RuleCall getInitLValueParserRuleCall_2_3_0() { return cInitLValueParserRuleCall_2_3_0; }
		
		//initAsg=Assignment
		public Assignment getInitAsgAssignment_2_4() { return cInitAsgAssignment_2_4; }
		
		//Assignment
		public RuleCall getInitAsgAssignmentParserRuleCall_2_4_0() { return cInitAsgAssignmentParserRuleCall_2_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_5() { return cSemicolonKeyword_2_5; }
		
		//exp=Expression
		public Assignment getExpAssignment_2_6() { return cExpAssignment_2_6; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_2_6_0() { return cExpExpressionParserRuleCall_2_6_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_7() { return cSemicolonKeyword_2_7; }
		
		//inc=Factor
		public Assignment getIncAssignment_2_8() { return cIncAssignment_2_8; }
		
		//Factor
		public RuleCall getIncFactorParserRuleCall_2_8_0() { return cIncFactorParserRuleCall_2_8_0; }
		
		//incAsg=Assignment?
		public Assignment getIncAsgAssignment_2_9() { return cIncAsgAssignment_2_9; }
		
		//Assignment
		public RuleCall getIncAsgAssignmentParserRuleCall_2_9_0() { return cIncAsgAssignmentParserRuleCall_2_9_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_10() { return cRightParenthesisKeyword_2_10; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_11() { return cLeftCurlyBracketKeyword_2_11; }
		
		//commands+=Command*
		public Assignment getCommandsAssignment_2_12() { return cCommandsAssignment_2_12; }
		
		//Command
		public RuleCall getCommandsCommandParserRuleCall_2_12_0() { return cCommandsCommandParserRuleCall_2_12_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_13() { return cRightCurlyBracketKeyword_2_13; }
		
		//{SwitchCmd} 'switch' '(' exp=Expression ')' '{' cases+=Case* ('default' ':' defaultCmds+=Command*)? '}'
		public Group getGroup_3() { return cGroup_3; }
		
		//{SwitchCmd}
		public Action getSwitchCmdAction_3_0() { return cSwitchCmdAction_3_0; }
		
		//'switch'
		public Keyword getSwitchKeyword_3_1() { return cSwitchKeyword_3_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_2() { return cLeftParenthesisKeyword_3_2; }
		
		//exp=Expression
		public Assignment getExpAssignment_3_3() { return cExpAssignment_3_3; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_3_3_0() { return cExpExpressionParserRuleCall_3_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_4() { return cRightParenthesisKeyword_3_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_5() { return cLeftCurlyBracketKeyword_3_5; }
		
		//cases+=Case*
		public Assignment getCasesAssignment_3_6() { return cCasesAssignment_3_6; }
		
		//Case
		public RuleCall getCasesCaseParserRuleCall_3_6_0() { return cCasesCaseParserRuleCall_3_6_0; }
		
		//('default' ':' defaultCmds+=Command*)?
		public Group getGroup_3_7() { return cGroup_3_7; }
		
		//'default'
		public Keyword getDefaultKeyword_3_7_0() { return cDefaultKeyword_3_7_0; }
		
		//':'
		public Keyword getColonKeyword_3_7_1() { return cColonKeyword_3_7_1; }
		
		//defaultCmds+=Command*
		public Assignment getDefaultCmdsAssignment_3_7_2() { return cDefaultCmdsAssignment_3_7_2; }
		
		//Command
		public RuleCall getDefaultCmdsCommandParserRuleCall_3_7_2_0() { return cDefaultCmdsCommandParserRuleCall_3_7_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_8() { return cRightCurlyBracketKeyword_3_8; }
		
		//{DoWhileCmd} 'do' '{' commands+=Command* '}' 'while' '(' exp=Expression ')' ';'
		public Group getGroup_4() { return cGroup_4; }
		
		//{DoWhileCmd}
		public Action getDoWhileCmdAction_4_0() { return cDoWhileCmdAction_4_0; }
		
		//'do'
		public Keyword getDoKeyword_4_1() { return cDoKeyword_4_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_2() { return cLeftCurlyBracketKeyword_4_2; }
		
		//commands+=Command*
		public Assignment getCommandsAssignment_4_3() { return cCommandsAssignment_4_3; }
		
		//Command
		public RuleCall getCommandsCommandParserRuleCall_4_3_0() { return cCommandsCommandParserRuleCall_4_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
		
		//'while'
		public Keyword getWhileKeyword_4_5() { return cWhileKeyword_4_5; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_6() { return cLeftParenthesisKeyword_4_6; }
		
		//exp=Expression
		public Assignment getExpAssignment_4_7() { return cExpAssignment_4_7; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_4_7_0() { return cExpExpressionParserRuleCall_4_7_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_8() { return cRightParenthesisKeyword_4_8; }
		
		//';'
		public Keyword getSemicolonKeyword_4_9() { return cSemicolonKeyword_4_9; }
		
		//{VarCmd} lval=Factor asg=Assignment? ';'
		public Group getGroup_5() { return cGroup_5; }
		
		//{VarCmd}
		public Action getVarCmdAction_5_0() { return cVarCmdAction_5_0; }
		
		//lval=Factor
		public Assignment getLvalAssignment_5_1() { return cLvalAssignment_5_1; }
		
		//Factor
		public RuleCall getLvalFactorParserRuleCall_5_1_0() { return cLvalFactorParserRuleCall_5_1_0; }
		
		//asg=Assignment?
		public Assignment getAsgAssignment_5_2() { return cAsgAssignment_5_2; }
		
		//Assignment
		public RuleCall getAsgAssignmentParserRuleCall_5_2_0() { return cAsgAssignmentParserRuleCall_5_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5_3() { return cSemicolonKeyword_5_3; }
		
		//{BreakCmd} 'break' ';'
		public Group getGroup_6() { return cGroup_6; }
		
		//{BreakCmd}
		public Action getBreakCmdAction_6_0() { return cBreakCmdAction_6_0; }
		
		//'break'
		public Keyword getBreakKeyword_6_1() { return cBreakKeyword_6_1; }
		
		//';'
		public Keyword getSemicolonKeyword_6_2() { return cSemicolonKeyword_6_2; }
		
		//{ContinueCmd} 'continue' ';'
		public Group getGroup_7() { return cGroup_7; }
		
		//{ContinueCmd}
		public Action getContinueCmdAction_7_0() { return cContinueCmdAction_7_0; }
		
		//'continue'
		public Keyword getContinueKeyword_7_1() { return cContinueKeyword_7_1; }
		
		//';'
		public Keyword getSemicolonKeyword_7_2() { return cSemicolonKeyword_7_2; }
		
		//{ReturnCmd} 'return' exp=Expression? ';'
		public Group getGroup_8() { return cGroup_8; }
		
		//{ReturnCmd}
		public Action getReturnCmdAction_8_0() { return cReturnCmdAction_8_0; }
		
		//'return'
		public Keyword getReturnKeyword_8_1() { return cReturnKeyword_8_1; }
		
		//exp=Expression?
		public Assignment getExpAssignment_8_2() { return cExpAssignment_8_2; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_8_2_0() { return cExpExpressionParserRuleCall_8_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_8_3() { return cSemicolonKeyword_8_3; }
		
		//{DeclCmd} val=Declaration
		public Group getGroup_9() { return cGroup_9; }
		
		//{DeclCmd}
		public Action getDeclCmdAction_9_0() { return cDeclCmdAction_9_0; }
		
		//val=Declaration
		public Assignment getValAssignment_9_1() { return cValAssignment_9_1; }
		
		//Declaration
		public RuleCall getValDeclarationParserRuleCall_9_1_0() { return cValDeclarationParserRuleCall_9_1_0; }
		
		//{PrintCmd} 'print' '(' exp=Expression? ')' ';'
		public Group getGroup_10() { return cGroup_10; }
		
		//{PrintCmd}
		public Action getPrintCmdAction_10_0() { return cPrintCmdAction_10_0; }
		
		//'print'
		public Keyword getPrintKeyword_10_1() { return cPrintKeyword_10_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_10_2() { return cLeftParenthesisKeyword_10_2; }
		
		//exp=Expression?
		public Assignment getExpAssignment_10_3() { return cExpAssignment_10_3; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_10_3_0() { return cExpExpressionParserRuleCall_10_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_10_4() { return cRightParenthesisKeyword_10_4; }
		
		//';'
		public Keyword getSemicolonKeyword_10_5() { return cSemicolonKeyword_10_5; }
	}
	public class ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.Argument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpExpressionParserRuleCall_0_0 = (RuleCall)cExpAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_1_1_0 = (RuleCall)cExpAssignment_1_1.eContents().get(0);
		
		//Argument:
		//	exp+=Expression (',' exp+=Expression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//exp+=Expression (',' exp+=Expression)*
		public Group getGroup() { return cGroup; }
		
		//exp+=Expression
		public Assignment getExpAssignment_0() { return cExpAssignment_0; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_0_0() { return cExpExpressionParserRuleCall_0_0; }
		
		//(',' exp+=Expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//exp+=Expression
		public Assignment getExpAssignment_1_1() { return cExpAssignment_1_1; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_1_0() { return cExpExpressionParserRuleCall_1_1_0; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		
		//Assignment:
		//	'=' exp=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'=' exp=Expression
		public Group getGroup() { return cGroup; }
		
		//'='
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }
		
		//exp=Expression
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_0() { return cExpExpressionParserRuleCall_1_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRelExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLogicExpArgsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpLOTerminalRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cArgsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cArgsRelExpParserRuleCall_1_2_0 = (RuleCall)cArgsAssignment_1_2.eContents().get(0);
		
		//Expression:
		//	RelExp ({LogicExp.args+=current} op=LO args+=RelExp)*;
		@Override public ParserRule getRule() { return rule; }
		
		//RelExp ({LogicExp.args+=current} op=LO args+=RelExp)*
		public Group getGroup() { return cGroup; }
		
		//RelExp
		public RuleCall getRelExpParserRuleCall_0() { return cRelExpParserRuleCall_0; }
		
		//({LogicExp.args+=current} op=LO args+=RelExp)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{LogicExp.args+=current}
		public Action getLogicExpArgsAction_1_0() { return cLogicExpArgsAction_1_0; }
		
		//op=LO
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//LO
		public RuleCall getOpLOTerminalRuleCall_1_1_0() { return cOpLOTerminalRuleCall_1_1_0; }
		
		//args+=RelExp
		public Assignment getArgsAssignment_1_2() { return cArgsAssignment_1_2; }
		
		//RelExp
		public RuleCall getArgsRelExpParserRuleCall_1_2_0() { return cArgsRelExpParserRuleCall_1_2_0; }
	}
	public class RelExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.RelExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cArithExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cRelExpArgsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpROTerminalRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cArgsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cArgsArithExpParserRuleCall_1_2_0 = (RuleCall)cArgsAssignment_1_2.eContents().get(0);
		
		//RelExp Expression:
		//	ArithExp ({RelExp.args+=current} op=RO args+=ArithExp)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ArithExp ({RelExp.args+=current} op=RO args+=ArithExp)*
		public Group getGroup() { return cGroup; }
		
		//ArithExp
		public RuleCall getArithExpParserRuleCall_0() { return cArithExpParserRuleCall_0; }
		
		//({RelExp.args+=current} op=RO args+=ArithExp)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{RelExp.args+=current}
		public Action getRelExpArgsAction_1_0() { return cRelExpArgsAction_1_0; }
		
		//op=RO
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//RO
		public RuleCall getOpROTerminalRuleCall_1_1_0() { return cOpROTerminalRuleCall_1_1_0; }
		
		//args+=ArithExp
		public Assignment getArgsAssignment_1_2() { return cArgsAssignment_1_2; }
		
		//ArithExp
		public RuleCall getArgsArithExpParserRuleCall_1_2_0() { return cArgsArithExpParserRuleCall_1_2_0; }
	}
	public class ArithExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.ArithExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTermParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cArithExpArgsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpAO1TerminalRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cArgsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cArgsTermParserRuleCall_1_2_0 = (RuleCall)cArgsAssignment_1_2.eContents().get(0);
		
		//ArithExp Expression:
		//	Term ({ArithExp.args+=current} op=AO1 args+=Term)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Term ({ArithExp.args+=current} op=AO1 args+=Term)*
		public Group getGroup() { return cGroup; }
		
		//Term
		public RuleCall getTermParserRuleCall_0() { return cTermParserRuleCall_0; }
		
		//({ArithExp.args+=current} op=AO1 args+=Term)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ArithExp.args+=current}
		public Action getArithExpArgsAction_1_0() { return cArithExpArgsAction_1_0; }
		
		//op=AO1
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//AO1
		public RuleCall getOpAO1TerminalRuleCall_1_1_0() { return cOpAO1TerminalRuleCall_1_1_0; }
		
		//args+=Term
		public Assignment getArgsAssignment_1_2() { return cArgsAssignment_1_2; }
		
		//Term
		public RuleCall getArgsTermParserRuleCall_1_2_0() { return cArgsTermParserRuleCall_1_2_0; }
	}
	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.Term");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFactorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cTermArgsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpAO2TerminalRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cArgsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cArgsFactorParserRuleCall_1_2_0 = (RuleCall)cArgsAssignment_1_2.eContents().get(0);
		
		//Term Expression:
		//	Factor ({Term.args+=current} op=AO2 args+=Factor)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Factor ({Term.args+=current} op=AO2 args+=Factor)*
		public Group getGroup() { return cGroup; }
		
		//Factor
		public RuleCall getFactorParserRuleCall_0() { return cFactorParserRuleCall_0; }
		
		//({Term.args+=current} op=AO2 args+=Factor)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Term.args+=current}
		public Action getTermArgsAction_1_0() { return cTermArgsAction_1_0; }
		
		//op=AO2
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//AO2
		public RuleCall getOpAO2TerminalRuleCall_1_1_0() { return cOpAO2TerminalRuleCall_1_1_0; }
		
		//args+=Factor
		public Assignment getArgsAssignment_1_2() { return cArgsAssignment_1_2; }
		
		//Factor
		public RuleCall getArgsFactorParserRuleCall_1_2_0() { return cArgsFactorParserRuleCall_1_2_0; }
	}
	public class FactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.Factor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cAtomParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Action cPostfixOpArgAction_0_1_0 = (Action)cGroup_0_1.eContents().get(0);
		private final Assignment cUoAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cUoUOTerminalRuleCall_0_1_1_0 = (RuleCall)cUoAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cPrefixOpAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cUoAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cUoUOTerminalRuleCall_1_1_0 = (RuleCall)cUoAssignment_1_1.eContents().get(0);
		private final Assignment cArgAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cArgAtomParserRuleCall_1_2_0 = (RuleCall)cArgAssignment_1_2.eContents().get(0);
		
		//Factor Expression:
		//	Atom ({PostfixOp.arg=current} uo=UO)?
		//	| {PrefixOp} uo=UO arg=Atom;
		@Override public ParserRule getRule() { return rule; }
		
		//Atom ({PostfixOp.arg=current} uo=UO)? | {PrefixOp} uo=UO arg=Atom
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Atom ({PostfixOp.arg=current} uo=UO)?
		public Group getGroup_0() { return cGroup_0; }
		
		//Atom
		public RuleCall getAtomParserRuleCall_0_0() { return cAtomParserRuleCall_0_0; }
		
		//({PostfixOp.arg=current} uo=UO)?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//{PostfixOp.arg=current}
		public Action getPostfixOpArgAction_0_1_0() { return cPostfixOpArgAction_0_1_0; }
		
		//uo=UO
		public Assignment getUoAssignment_0_1_1() { return cUoAssignment_0_1_1; }
		
		//UO
		public RuleCall getUoUOTerminalRuleCall_0_1_1_0() { return cUoUOTerminalRuleCall_0_1_1_0; }
		
		//{PrefixOp} uo=UO arg=Atom
		public Group getGroup_1() { return cGroup_1; }
		
		//{PrefixOp}
		public Action getPrefixOpAction_1_0() { return cPrefixOpAction_1_0; }
		
		//uo=UO
		public Assignment getUoAssignment_1_1() { return cUoAssignment_1_1; }
		
		//UO
		public RuleCall getUoUOTerminalRuleCall_1_1_0() { return cUoUOTerminalRuleCall_1_1_0; }
		
		//arg=Atom
		public Assignment getArgAssignment_1_2() { return cArgAssignment_1_2; }
		
		//Atom
		public RuleCall getArgAtomParserRuleCall_1_2_0() { return cArgAtomParserRuleCall_1_2_0; }
	}
	public class AtomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.Atom");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cParentesesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpExpressionParserRuleCall_1_2_0 = (RuleCall)cExpAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final RuleCall cLValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Atom Expression:
		//	Literal
		//	| {Parenteses} '(' exp=Expression ')'
		//	| lValue;
		@Override public ParserRule getRule() { return rule; }
		
		//Literal | {Parenteses} '(' exp=Expression ')' | lValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Literal
		public RuleCall getLiteralParserRuleCall_0() { return cLiteralParserRuleCall_0; }
		
		//{Parenteses} '(' exp=Expression ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//{Parenteses}
		public Action getParentesesAction_1_0() { return cParentesesAction_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//exp=Expression
		public Assignment getExpAssignment_1_2() { return cExpAssignment_1_2; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_2_0() { return cExpExpressionParserRuleCall_1_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//lValue
		public RuleCall getLValueParserRuleCall_2() { return cLValueParserRuleCall_2; }
	}
	public class LValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.lValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cVarAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cValorDefinitionCrossReference_0_1_0 = (CrossReference)cValorAssignment_0_1.eContents().get(0);
		private final RuleCall cValorDefinitionIDTerminalRuleCall_0_1_0_1 = (RuleCall)cValorDefinitionCrossReference_0_1_0.eContents().get(1);
		private final Alternatives cAlternatives_0_2 = (Alternatives)cGroup_0.eContents().get(2);
		private final Group cGroup_0_2_0 = (Group)cAlternatives_0_2.eContents().get(0);
		private final Action cFuncCallDefAction_0_2_0_0 = (Action)cGroup_0_2_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_2_0_1 = (Keyword)cGroup_0_2_0.eContents().get(1);
		private final Assignment cArgAssignment_0_2_0_2 = (Assignment)cGroup_0_2_0.eContents().get(2);
		private final RuleCall cArgArgumentParserRuleCall_0_2_0_2_0 = (RuleCall)cArgAssignment_0_2_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_2_0_3 = (Keyword)cGroup_0_2_0.eContents().get(3);
		private final Group cGroup_0_2_1 = (Group)cAlternatives_0_2.eContents().get(1);
		private final Action cFieldAccessObjAction_0_2_1_0 = (Action)cGroup_0_2_1.eContents().get(0);
		private final Keyword cFullStopKeyword_0_2_1_1 = (Keyword)cGroup_0_2_1.eContents().get(1);
		private final Assignment cFieldAssignment_0_2_1_2 = (Assignment)cGroup_0_2_1.eContents().get(2);
		private final RuleCall cFieldIDTerminalRuleCall_0_2_1_2_0 = (RuleCall)cFieldAssignment_0_2_1_2.eContents().get(0);
		private final Group cGroup_0_2_2 = (Group)cAlternatives_0_2.eContents().get(2);
		private final Action cArrayAccessArrAction_0_2_2_0 = (Action)cGroup_0_2_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_2_2_1 = (Keyword)cGroup_0_2_2.eContents().get(1);
		private final Assignment cIndexAssignment_0_2_2_2 = (Assignment)cGroup_0_2_2.eContents().get(2);
		private final RuleCall cIndexExpressionParserRuleCall_0_2_2_2_0 = (RuleCall)cIndexAssignment_0_2_2_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_2_2_3 = (Keyword)cGroup_0_2_2.eContents().get(3);
		private final RuleCall cPointerExpParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//lValue Expression:
		//	{Var} valor=[Definition] ({FuncCall.def=current} '(' arg=Argument? ')' | {FieldAccess.obj=current} '.' field=ID |
		//	{ArrayAccess.arr=current} '[' index=Expression ']')*
		//	| PointerExp;
		@Override public ParserRule getRule() { return rule; }
		
		//{Var} valor=[Definition] ({FuncCall.def=current} '(' arg=Argument? ')' | {FieldAccess.obj=current} '.' field=ID |
		//{ArrayAccess.arr=current} '[' index=Expression ']')* | PointerExp
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Var} valor=[Definition] ({FuncCall.def=current} '(' arg=Argument? ')' | {FieldAccess.obj=current} '.' field=ID |
		//{ArrayAccess.arr=current} '[' index=Expression ']')*
		public Group getGroup_0() { return cGroup_0; }
		
		//{Var}
		public Action getVarAction_0_0() { return cVarAction_0_0; }
		
		//valor=[Definition]
		public Assignment getValorAssignment_0_1() { return cValorAssignment_0_1; }
		
		//[Definition]
		public CrossReference getValorDefinitionCrossReference_0_1_0() { return cValorDefinitionCrossReference_0_1_0; }
		
		//ID
		public RuleCall getValorDefinitionIDTerminalRuleCall_0_1_0_1() { return cValorDefinitionIDTerminalRuleCall_0_1_0_1; }
		
		//({FuncCall.def=current} '(' arg=Argument? ')' | {FieldAccess.obj=current} '.' field=ID | {ArrayAccess.arr=current} '['
		//index=Expression ']')*
		public Alternatives getAlternatives_0_2() { return cAlternatives_0_2; }
		
		//{FuncCall.def=current} '(' arg=Argument? ')'
		public Group getGroup_0_2_0() { return cGroup_0_2_0; }
		
		//{FuncCall.def=current}
		public Action getFuncCallDefAction_0_2_0_0() { return cFuncCallDefAction_0_2_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_2_0_1() { return cLeftParenthesisKeyword_0_2_0_1; }
		
		//arg=Argument?
		public Assignment getArgAssignment_0_2_0_2() { return cArgAssignment_0_2_0_2; }
		
		//Argument
		public RuleCall getArgArgumentParserRuleCall_0_2_0_2_0() { return cArgArgumentParserRuleCall_0_2_0_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2_0_3() { return cRightParenthesisKeyword_0_2_0_3; }
		
		//{FieldAccess.obj=current} '.' field=ID
		public Group getGroup_0_2_1() { return cGroup_0_2_1; }
		
		//{FieldAccess.obj=current}
		public Action getFieldAccessObjAction_0_2_1_0() { return cFieldAccessObjAction_0_2_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_0_2_1_1() { return cFullStopKeyword_0_2_1_1; }
		
		//field=ID
		public Assignment getFieldAssignment_0_2_1_2() { return cFieldAssignment_0_2_1_2; }
		
		//ID
		public RuleCall getFieldIDTerminalRuleCall_0_2_1_2_0() { return cFieldIDTerminalRuleCall_0_2_1_2_0; }
		
		//{ArrayAccess.arr=current} '[' index=Expression ']'
		public Group getGroup_0_2_2() { return cGroup_0_2_2; }
		
		//{ArrayAccess.arr=current}
		public Action getArrayAccessArrAction_0_2_2_0() { return cArrayAccessArrAction_0_2_2_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_2_2_1() { return cLeftSquareBracketKeyword_0_2_2_1; }
		
		//index=Expression
		public Assignment getIndexAssignment_0_2_2_2() { return cIndexAssignment_0_2_2_2; }
		
		//Expression
		public RuleCall getIndexExpressionParserRuleCall_0_2_2_2_0() { return cIndexExpressionParserRuleCall_0_2_2_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_2_2_3() { return cRightSquareBracketKeyword_0_2_2_3; }
		
		//PointerExp
		public RuleCall getPointerExpParserRuleCall_1() { return cPointerExpParserRuleCall_1; }
	}
	public class PointerExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.PointerExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPointerExpAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAsteriskAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpExpressionParserRuleCall_3_0 = (RuleCall)cExpAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PointerExp:
		//	{PointerExp} '**' '(' exp=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{PointerExp} '**' '(' exp=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//{PointerExp}
		public Action getPointerExpAction_0() { return cPointerExpAction_0; }
		
		//'**'
		public Keyword getAsteriskAsteriskKeyword_1() { return cAsteriskAsteriskKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//exp=Expression
		public Assignment getExpAssignment_3() { return cExpAssignment_3; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_3_0() { return cExpExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class CaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.Case");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValAtomParserRuleCall_1_0 = (RuleCall)cValAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCommandsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCommandsCommandParserRuleCall_3_0 = (RuleCall)cCommandsAssignment_3.eContents().get(0);
		
		//Case:
		//	'case' val=Atom ':' commands+=Command*;
		@Override public ParserRule getRule() { return rule; }
		
		//'case' val=Atom ':' commands+=Command*
		public Group getGroup() { return cGroup; }
		
		//'case'
		public Keyword getCaseKeyword_0() { return cCaseKeyword_0; }
		
		//val=Atom
		public Assignment getValAssignment_1() { return cValAssignment_1; }
		
		//Atom
		public RuleCall getValAtomParserRuleCall_1_0() { return cValAtomParserRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//commands+=Command*
		public Assignment getCommandsAssignment_3() { return cCommandsAssignment_3; }
		
		//Command
		public RuleCall getCommandsCommandParserRuleCall_3_0() { return cCommandsCommandParserRuleCall_3_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTipoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTipoTYPELITTerminalRuleCall_0_0 = (RuleCall)cTipoAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_1_1_0 = (RuleCall)cExpAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Type:
		//	tipo=TYPELIT ('[' exp=Expression? ']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//tipo=TYPELIT ('[' exp=Expression? ']')?
		public Group getGroup() { return cGroup; }
		
		//tipo=TYPELIT
		public Assignment getTipoAssignment_0() { return cTipoAssignment_0; }
		
		//TYPELIT
		public RuleCall getTipoTYPELITTerminalRuleCall_0_0() { return cTipoTYPELITTerminalRuleCall_0_0; }
		
		//('[' exp=Expression? ']')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//exp=Expression?
		public Assignment getExpAssignment_1_1() { return cExpAssignment_1_1; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_1_0() { return cExpExpressionParserRuleCall_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntLitAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValINTTerminalRuleCall_0_1_0 = (RuleCall)cValAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cTrueLitAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cTrueKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cFalseLitAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cFalseKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cStrLitAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cValAssignment_3_1.eContents().get(0);
		
		//Literal:
		//	{IntLit} val=INT | {TrueLit} 'true' | {FalseLit} 'false' | {StrLit} val=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//{IntLit} val=INT | {TrueLit} 'true' | {FalseLit} 'false' | {StrLit} val=STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{IntLit} val=INT
		public Group getGroup_0() { return cGroup_0; }
		
		//{IntLit}
		public Action getIntLitAction_0_0() { return cIntLitAction_0_0; }
		
		//val=INT
		public Assignment getValAssignment_0_1() { return cValAssignment_0_1; }
		
		//INT
		public RuleCall getValINTTerminalRuleCall_0_1_0() { return cValINTTerminalRuleCall_0_1_0; }
		
		//{TrueLit} 'true'
		public Group getGroup_1() { return cGroup_1; }
		
		//{TrueLit}
		public Action getTrueLitAction_1_0() { return cTrueLitAction_1_0; }
		
		//'true'
		public Keyword getTrueKeyword_1_1() { return cTrueKeyword_1_1; }
		
		//{FalseLit} 'false'
		public Group getGroup_2() { return cGroup_2; }
		
		//{FalseLit}
		public Action getFalseLitAction_2_0() { return cFalseLitAction_2_0; }
		
		//'false'
		public Keyword getFalseKeyword_2_1() { return cFalseKeyword_2_1; }
		
		//{StrLit} val=STRING
		public Group getGroup_3() { return cGroup_3; }
		
		//{StrLit}
		public Action getStrLitAction_3_0() { return cStrLitAction_3_0; }
		
		//val=STRING
		public Assignment getValAssignment_3_1() { return cValAssignment_3_1; }
		
		//STRING
		public RuleCall getValSTRINGTerminalRuleCall_3_1_0() { return cValSTRINGTerminalRuleCall_3_1_0; }
	}
	
	
	private final ProgramElements pProgram;
	private final DefinitionElements pDefinition;
	private final FunctionElements pFunction;
	private final DeclarationElements pDeclaration;
	private final StructElements pStruct;
	private final CommandElements pCommand;
	private final ArgumentElements pArgument;
	private final AssignmentElements pAssignment;
	private final ExpressionElements pExpression;
	private final RelExpElements pRelExp;
	private final ArithExpElements pArithExp;
	private final TermElements pTerm;
	private final FactorElements pFactor;
	private final AtomElements pAtom;
	private final LValueElements pLValue;
	private final PointerExpElements pPointerExp;
	private final CaseElements pCase;
	private final TypeElements pType;
	private final LiteralElements pLiteral;
	private final TerminalRule tTYPELIT;
	private final TerminalRule tAO1;
	private final TerminalRule tAO2;
	private final TerminalRule tRO;
	private final TerminalRule tLO;
	private final TerminalRule tUO;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public CGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pDefinition = new DefinitionElements();
		this.pFunction = new FunctionElements();
		this.pDeclaration = new DeclarationElements();
		this.pStruct = new StructElements();
		this.pCommand = new CommandElements();
		this.pArgument = new ArgumentElements();
		this.pAssignment = new AssignmentElements();
		this.pExpression = new ExpressionElements();
		this.pRelExp = new RelExpElements();
		this.pArithExp = new ArithExpElements();
		this.pTerm = new TermElements();
		this.pFactor = new FactorElements();
		this.pAtom = new AtomElements();
		this.pLValue = new LValueElements();
		this.pPointerExp = new PointerExpElements();
		this.pCase = new CaseElements();
		this.pType = new TypeElements();
		this.pLiteral = new LiteralElements();
		this.tTYPELIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.TYPELIT");
		this.tAO1 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.AO1");
		this.tAO2 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.AO2");
		this.tRO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.RO");
		this.tLO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.LO");
		this.tUO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.UO");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.poli.compilador.C".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////--------------------------------------------------------------------
	//Program:
	//	definition+=Definition*;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Definition:
	//	Struct | Function | Declaration;
	public DefinitionElements getDefinitionAccess() {
		return pDefinition;
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}
	
	//Function:
	//	{Function} 'function' tipo=Type name=ID '(' (params+=Declaration (',' params+=Declaration)*)? ')' '{'
	//	commands+=Command* '}';
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//Declaration:
	//	{Declaration} ({VarDecl.obj=current} (tipo=Type '**'? name=ID val=Assignment?) | {StrDecl.obj=current} ('struct'
	//	str=[Struct] name=ID)) ';';
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//Struct:
	//	{Struct} 'struct' name=ID '{' decl+=Declaration* '}' ';';
	public StructElements getStructAccess() {
		return pStruct;
	}
	
	public ParserRule getStructRule() {
		return getStructAccess().getRule();
	}
	
	//Command:
	//	{IfCmd} 'if' '(' exp=Expression ')' '{' trueCommands+=Command* '}' ('else' '{' falseCommands+=Command* '}')?
	//	| {WhileCmd} 'while' '(' exp=Expression ')' '{' commands+=Command* '}'
	//	| {ForCmd} 'for' '(' init=lValue initAsg=Assignment ';' exp=Expression ';' inc=Factor incAsg=Assignment? ')' '{'
	//	commands+=Command* '}'
	//	| {SwitchCmd} 'switch' '(' exp=Expression ')' '{' cases+=Case* ('default' ':' defaultCmds+=Command*)? '}'
	//	| {DoWhileCmd} 'do' '{' commands+=Command* '}' 'while' '(' exp=Expression ')' ';'
	//	| {VarCmd} lval=Factor asg=Assignment? ';'
	//	| {BreakCmd} 'break' ';'
	//	| {ContinueCmd} 'continue' ';'
	//	| {ReturnCmd} 'return' exp=Expression? ';'
	//	| {DeclCmd} val=Declaration
	//	| {PrintCmd} 'print' '(' exp=Expression? ')' ';';
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//Argument:
	//	exp+=Expression (',' exp+=Expression)*;
	public ArgumentElements getArgumentAccess() {
		return pArgument;
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}
	
	//Assignment:
	//	'=' exp=Expression;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	//Expression:
	//	RelExp ({LogicExp.args+=current} op=LO args+=RelExp)*;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//RelExp Expression:
	//	ArithExp ({RelExp.args+=current} op=RO args+=ArithExp)*;
	public RelExpElements getRelExpAccess() {
		return pRelExp;
	}
	
	public ParserRule getRelExpRule() {
		return getRelExpAccess().getRule();
	}
	
	//ArithExp Expression:
	//	Term ({ArithExp.args+=current} op=AO1 args+=Term)*;
	public ArithExpElements getArithExpAccess() {
		return pArithExp;
	}
	
	public ParserRule getArithExpRule() {
		return getArithExpAccess().getRule();
	}
	
	//Term Expression:
	//	Factor ({Term.args+=current} op=AO2 args+=Factor)*;
	public TermElements getTermAccess() {
		return pTerm;
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}
	
	//Factor Expression:
	//	Atom ({PostfixOp.arg=current} uo=UO)?
	//	| {PrefixOp} uo=UO arg=Atom;
	public FactorElements getFactorAccess() {
		return pFactor;
	}
	
	public ParserRule getFactorRule() {
		return getFactorAccess().getRule();
	}
	
	//Atom Expression:
	//	Literal
	//	| {Parenteses} '(' exp=Expression ')'
	//	| lValue;
	public AtomElements getAtomAccess() {
		return pAtom;
	}
	
	public ParserRule getAtomRule() {
		return getAtomAccess().getRule();
	}
	
	//lValue Expression:
	//	{Var} valor=[Definition] ({FuncCall.def=current} '(' arg=Argument? ')' | {FieldAccess.obj=current} '.' field=ID |
	//	{ArrayAccess.arr=current} '[' index=Expression ']')*
	//	| PointerExp;
	public LValueElements getLValueAccess() {
		return pLValue;
	}
	
	public ParserRule getLValueRule() {
		return getLValueAccess().getRule();
	}
	
	//PointerExp:
	//	{PointerExp} '**' '(' exp=Expression ')';
	public PointerExpElements getPointerExpAccess() {
		return pPointerExp;
	}
	
	public ParserRule getPointerExpRule() {
		return getPointerExpAccess().getRule();
	}
	
	//Case:
	//	'case' val=Atom ':' commands+=Command*;
	public CaseElements getCaseAccess() {
		return pCase;
	}
	
	public ParserRule getCaseRule() {
		return getCaseAccess().getRule();
	}
	
	//Type:
	//	tipo=TYPELIT ('[' exp=Expression? ']')?;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//Literal:
	//	{IntLit} val=INT | {TrueLit} 'true' | {FalseLit} 'false' | {StrLit} val=STRING;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//terminal TYPELIT:
	//	'int' | 'bool' | 'string' | 'void';
	public TerminalRule getTYPELITRule() {
		return tTYPELIT;
	}
	
	//terminal AO1:
	//	'+' | '-';
	public TerminalRule getAO1Rule() {
		return tAO1;
	}
	
	//terminal AO2:
	//	'*' | '/';
	public TerminalRule getAO2Rule() {
		return tAO2;
	}
	
	//terminal RO:
	//	'>' | '>=' | '<' | '<=' | '==' | '!=';
	public TerminalRule getRORule() {
		return tRO;
	}
	
	//terminal LO:
	//	'&&' | '||';
	public TerminalRule getLORule() {
		return tLO;
	}
	
	//terminal UO:
	//	'!' | '++' | '--' | '&';
	public TerminalRule getUORule() {
		return tUO;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
