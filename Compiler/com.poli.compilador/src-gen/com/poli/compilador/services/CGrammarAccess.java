/*
 * generated by Xtext 2.12.0
 */
package com.poli.compilador.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.Program");
		private final Assignment cDefinitionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDefinitionDefinitionParserRuleCall_0 = (RuleCall)cDefinitionAssignment.eContents().get(0);
		
		////--------------------------------------------------------------------
		//Program:
		//	definition+=Definition*;
		@Override public ParserRule getRule() { return rule; }
		
		//definition+=Definition*
		public Assignment getDefinitionAssignment() { return cDefinitionAssignment; }
		
		//Definition
		public RuleCall getDefinitionDefinitionParserRuleCall_0() { return cDefinitionDefinitionParserRuleCall_0; }
	}
	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.Definition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStructParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Definition:
		//	Struct | Function | Declaration;
		@Override public ParserRule getRule() { return rule; }
		
		//Struct | Function | Declaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Struct
		public RuleCall getStructParserRuleCall_0() { return cStructParserRuleCall_0; }
		
		//Function
		public RuleCall getFunctionParserRuleCall_1() { return cFunctionParserRuleCall_1; }
		
		//Declaration
		public RuleCall getDeclarationParserRuleCall_2() { return cDeclarationParserRuleCall_2; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFunctionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTipoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTipoTypeParserRuleCall_2_0 = (RuleCall)cTipoAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cParamsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cParamsIdDefParserRuleCall_5_0_0 = (RuleCall)cParamsAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cParamsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cParamsIdDefParserRuleCall_5_1_1_0 = (RuleCall)cParamsAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cCommandsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cCommandsCommandParserRuleCall_8_0 = (RuleCall)cCommandsAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Function:
		//	{Function} 'function' tipo=Type name=ID '(' (params+=IdDef (',' params+=IdDef)*)? ')' '{' commands+=Command* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Function} 'function' tipo=Type name=ID '(' (params+=IdDef (',' params+=IdDef)*)? ')' '{' commands+=Command* '}'
		public Group getGroup() { return cGroup; }
		
		//{Function}
		public Action getFunctionAction_0() { return cFunctionAction_0; }
		
		//'function'
		public Keyword getFunctionKeyword_1() { return cFunctionKeyword_1; }
		
		//tipo=Type
		public Assignment getTipoAssignment_2() { return cTipoAssignment_2; }
		
		//Type
		public RuleCall getTipoTypeParserRuleCall_2_0() { return cTipoTypeParserRuleCall_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//(params+=IdDef (',' params+=IdDef)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//params+=IdDef
		public Assignment getParamsAssignment_5_0() { return cParamsAssignment_5_0; }
		
		//IdDef
		public RuleCall getParamsIdDefParserRuleCall_5_0_0() { return cParamsIdDefParserRuleCall_5_0_0; }
		
		//(',' params+=IdDef)*
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//','
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }
		
		//params+=IdDef
		public Assignment getParamsAssignment_5_1_1() { return cParamsAssignment_5_1_1; }
		
		//IdDef
		public RuleCall getParamsIdDefParserRuleCall_5_1_1_0() { return cParamsIdDefParserRuleCall_5_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }
		
		//commands+=Command*
		public Assignment getCommandsAssignment_8() { return cCommandsAssignment_8; }
		
		//Command
		public RuleCall getCommandsCommandParserRuleCall_8_0() { return cCommandsCommandParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.Declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cTipoAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cTipoTypeParserRuleCall_1_0_0_0 = (RuleCall)cTipoAssignment_1_0_0.eContents().get(0);
		private final Keyword cAsteriskAsteriskKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cNameAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_1_0_2_0 = (RuleCall)cNameAssignment_1_0_2.eContents().get(0);
		private final Assignment cValAssignment_1_0_3 = (Assignment)cGroup_1_0.eContents().get(3);
		private final RuleCall cValAssignmentParserRuleCall_1_0_3_0 = (RuleCall)cValAssignment_1_0_3.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cStructKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cStrAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final CrossReference cStrStructCrossReference_1_1_1_0 = (CrossReference)cStrAssignment_1_1_1.eContents().get(0);
		private final RuleCall cStrStructIDTerminalRuleCall_1_1_1_0_1 = (RuleCall)cStrStructCrossReference_1_1_1_0.eContents().get(1);
		private final Assignment cNameAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_1_1_2_0 = (RuleCall)cNameAssignment_1_1_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Declaration:
		//	{Declaration} (tipo=Type '**'? name=ID val=Assignment? | 'struct' str=[Struct] name=ID) ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{Declaration} (tipo=Type '**'? name=ID val=Assignment? | 'struct' str=[Struct] name=ID) ';'
		public Group getGroup() { return cGroup; }
		
		//{Declaration}
		public Action getDeclarationAction_0() { return cDeclarationAction_0; }
		
		//tipo=Type '**'? name=ID val=Assignment? | 'struct' str=[Struct] name=ID
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//tipo=Type '**'? name=ID val=Assignment?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//tipo=Type
		public Assignment getTipoAssignment_1_0_0() { return cTipoAssignment_1_0_0; }
		
		//Type
		public RuleCall getTipoTypeParserRuleCall_1_0_0_0() { return cTipoTypeParserRuleCall_1_0_0_0; }
		
		//'**'?
		public Keyword getAsteriskAsteriskKeyword_1_0_1() { return cAsteriskAsteriskKeyword_1_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1_0_2() { return cNameAssignment_1_0_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_2_0() { return cNameIDTerminalRuleCall_1_0_2_0; }
		
		//val=Assignment?
		public Assignment getValAssignment_1_0_3() { return cValAssignment_1_0_3; }
		
		//Assignment
		public RuleCall getValAssignmentParserRuleCall_1_0_3_0() { return cValAssignmentParserRuleCall_1_0_3_0; }
		
		//'struct' str=[Struct] name=ID
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'struct'
		public Keyword getStructKeyword_1_1_0() { return cStructKeyword_1_1_0; }
		
		//str=[Struct]
		public Assignment getStrAssignment_1_1_1() { return cStrAssignment_1_1_1; }
		
		//[Struct]
		public CrossReference getStrStructCrossReference_1_1_1_0() { return cStrStructCrossReference_1_1_1_0; }
		
		//ID
		public RuleCall getStrStructIDTerminalRuleCall_1_1_1_0_1() { return cStrStructIDTerminalRuleCall_1_1_1_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1_1_2() { return cNameAssignment_1_1_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_2_0() { return cNameIDTerminalRuleCall_1_1_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class StructElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.Struct");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStructAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStructKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDeclAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDeclDeclarationParserRuleCall_4_0 = (RuleCall)cDeclAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Struct:
		//	{Struct} 'struct' name=ID '{' decl+=Declaration* '}' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{Struct} 'struct' name=ID '{' decl+=Declaration* '}' ';'
		public Group getGroup() { return cGroup; }
		
		//{Struct}
		public Action getStructAction_0() { return cStructAction_0; }
		
		//'struct'
		public Keyword getStructKeyword_1() { return cStructKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//decl+=Declaration*
		public Assignment getDeclAssignment_4() { return cDeclAssignment_4; }
		
		//Declaration
		public RuleCall getDeclDeclarationParserRuleCall_4_0() { return cDeclDeclarationParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class IdDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.IdDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTipoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTipoTypeParserRuleCall_0_0 = (RuleCall)cTipoAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameVariableParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//IdDef:
		//	tipo=Type name=Variable;
		@Override public ParserRule getRule() { return rule; }
		
		//tipo=Type name=Variable
		public Group getGroup() { return cGroup; }
		
		//tipo=Type
		public Assignment getTipoAssignment_0() { return cTipoAssignment_0; }
		
		//Type
		public RuleCall getTipoTypeParserRuleCall_0_0() { return cTipoTypeParserRuleCall_0_0; }
		
		//name=Variable
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Variable
		public RuleCall getNameVariableParserRuleCall_1_0() { return cNameVariableParserRuleCall_1_0; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.Variable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cVariableAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cPointerExpParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Variable:
		//	{Variable} ID | PointerExp;
		@Override public ParserRule getRule() { return rule; }
		
		//{Variable} ID | PointerExp
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Variable} ID
		public Group getGroup_0() { return cGroup_0; }
		
		//{Variable}
		public Action getVariableAction_0_0() { return cVariableAction_0_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0_1() { return cIDTerminalRuleCall_0_1; }
		
		//PointerExp
		public RuleCall getPointerExpParserRuleCall_1() { return cPointerExpParserRuleCall_1; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.Command");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIfCmdAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cIfKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cExpAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cExpExpressionParserRuleCall_0_3_0 = (RuleCall)cExpAssignment_0_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cTrueCommandsAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final RuleCall cTrueCommandsCommandBlockParserRuleCall_0_5_0 = (RuleCall)cTrueCommandsAssignment_0_5.eContents().get(0);
		private final Group cGroup_0_6 = (Group)cGroup_0.eContents().get(6);
		private final Keyword cElseKeyword_0_6_0 = (Keyword)cGroup_0_6.eContents().get(0);
		private final Assignment cFalseCommandsAssignment_0_6_1 = (Assignment)cGroup_0_6.eContents().get(1);
		private final RuleCall cFalseCommandsCommandBlockParserRuleCall_0_6_1_0 = (RuleCall)cFalseCommandsAssignment_0_6_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cWhileCmdAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cWhileKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cExpAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cExpExpressionParserRuleCall_1_3_0 = (RuleCall)cExpAssignment_1_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cCommandsAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cCommandsCommandBlockParserRuleCall_1_5_0 = (RuleCall)cCommandsAssignment_1_5.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cForCmdAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cForKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cInitAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cInitLValueParserRuleCall_2_3_0 = (RuleCall)cInitAssignment_2_3.eContents().get(0);
		private final Assignment cInitAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cInitAssignmentParserRuleCall_2_4_0 = (RuleCall)cInitAssignment_2_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		private final Assignment cExpAssignment_2_6 = (Assignment)cGroup_2.eContents().get(6);
		private final RuleCall cExpExpressionParserRuleCall_2_6_0 = (RuleCall)cExpAssignment_2_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_7 = (Keyword)cGroup_2.eContents().get(7);
		private final Assignment cIncAssignment_2_8 = (Assignment)cGroup_2.eContents().get(8);
		private final RuleCall cIncFactorParserRuleCall_2_8_0 = (RuleCall)cIncAssignment_2_8.eContents().get(0);
		private final Assignment cIncAssignment_2_9 = (Assignment)cGroup_2.eContents().get(9);
		private final RuleCall cIncAssignmentParserRuleCall_2_9_0 = (RuleCall)cIncAssignment_2_9.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_10 = (Keyword)cGroup_2.eContents().get(10);
		private final Assignment cCommandsAssignment_2_11 = (Assignment)cGroup_2.eContents().get(11);
		private final RuleCall cCommandsCommandBlockParserRuleCall_2_11_0 = (RuleCall)cCommandsAssignment_2_11.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cSwitchCmdAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cSwitchKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cExpAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cExpExpressionParserRuleCall_3_3_0 = (RuleCall)cExpAssignment_3_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_3_5 = (Keyword)cGroup_3.eContents().get(5);
		private final Assignment cCasesAssignment_3_6 = (Assignment)cGroup_3.eContents().get(6);
		private final RuleCall cCasesCaseParserRuleCall_3_6_0 = (RuleCall)cCasesAssignment_3_6.eContents().get(0);
		private final Group cGroup_3_7 = (Group)cGroup_3.eContents().get(7);
		private final Keyword cDefaultKeyword_3_7_0 = (Keyword)cGroup_3_7.eContents().get(0);
		private final Keyword cColonKeyword_3_7_1 = (Keyword)cGroup_3_7.eContents().get(1);
		private final Assignment cCommandsAssignment_3_7_2 = (Assignment)cGroup_3_7.eContents().get(2);
		private final RuleCall cCommandsCommandParserRuleCall_3_7_2_0 = (RuleCall)cCommandsAssignment_3_7_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_8 = (Keyword)cGroup_3.eContents().get(8);
		private final RuleCall cDeclarationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cDoWhileCmdAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cDoKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cCommandsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cCommandsCommandBlockParserRuleCall_5_2_0 = (RuleCall)cCommandsAssignment_5_2.eContents().get(0);
		private final Keyword cWhileKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Assignment cExpAssignment_5_5 = (Assignment)cGroup_5.eContents().get(5);
		private final RuleCall cExpExpressionParserRuleCall_5_5_0 = (RuleCall)cExpAssignment_5_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_6 = (Keyword)cGroup_5.eContents().get(6);
		private final Keyword cSemicolonKeyword_5_7 = (Keyword)cGroup_5.eContents().get(7);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cVarCmdAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Assignment cValAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cValFactorParserRuleCall_6_1_0 = (RuleCall)cValAssignment_6_1.eContents().get(0);
		private final Assignment cValAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cValAssignmentParserRuleCall_6_2_0 = (RuleCall)cValAssignment_6_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cBreakCmdAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Keyword cBreakKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Keyword cSemicolonKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cContinueCmdAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Keyword cContinueKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Keyword cSemicolonKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Action cReturnCmdAction_9_0 = (Action)cGroup_9.eContents().get(0);
		private final Keyword cReturnKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cExpAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cExpExpressionParserRuleCall_9_2_0 = (RuleCall)cExpAssignment_9_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_9_3 = (Keyword)cGroup_9.eContents().get(3);
		
		//Command:
		//	{ifCmd} 'if' '(' exp=Expression ')' trueCommands=CommandBlock ('else' falseCommands=CommandBlock)?
		//	| {whileCmd} 'while' '(' exp=Expression ')' commands=CommandBlock
		//	| {forCmd} 'for' '(' init+=lValue init+=Assignment ';' exp=Expression ';' inc+=Factor inc+=Assignment? ')'
		//	commands=CommandBlock
		//	| {switchCmd} 'switch' '(' exp=Expression ')' '{' cases+=Case* ('default' ':' commands+=Command*)? '}'
		//	| Declaration
		//	| {doWhileCmd} 'do' commands=CommandBlock 'while' '(' exp=Expression ')' ';'
		//	| {varCmd} val+=Factor val+=Assignment? ';'
		//	| {breakCmd} 'break' ';'
		//	| {continueCmd} 'continue' ';'
		//	| {returnCmd} 'return' exp+=Expression? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{ifCmd} 'if' '(' exp=Expression ')' trueCommands=CommandBlock ('else' falseCommands=CommandBlock)? | {whileCmd} 'while'
		//'(' exp=Expression ')' commands=CommandBlock | {forCmd} 'for' '(' init+=lValue init+=Assignment ';' exp=Expression ';'
		//inc+=Factor inc+=Assignment? ')' commands=CommandBlock | {switchCmd} 'switch' '(' exp=Expression ')' '{' cases+=Case*
		//('default' ':' commands+=Command*)? '}' | Declaration | {doWhileCmd} 'do' commands=CommandBlock 'while' '('
		//exp=Expression ')' ';' | {varCmd} val+=Factor val+=Assignment? ';' | {breakCmd} 'break' ';' | {continueCmd} 'continue'
		//';' | {returnCmd} 'return' exp+=Expression? ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{ifCmd} 'if' '(' exp=Expression ')' trueCommands=CommandBlock ('else' falseCommands=CommandBlock)?
		public Group getGroup_0() { return cGroup_0; }
		
		//{ifCmd}
		public Action getIfCmdAction_0_0() { return cIfCmdAction_0_0; }
		
		//'if'
		public Keyword getIfKeyword_0_1() { return cIfKeyword_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_2() { return cLeftParenthesisKeyword_0_2; }
		
		//exp=Expression
		public Assignment getExpAssignment_0_3() { return cExpAssignment_0_3; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_0_3_0() { return cExpExpressionParserRuleCall_0_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_4() { return cRightParenthesisKeyword_0_4; }
		
		//trueCommands=CommandBlock
		public Assignment getTrueCommandsAssignment_0_5() { return cTrueCommandsAssignment_0_5; }
		
		//CommandBlock
		public RuleCall getTrueCommandsCommandBlockParserRuleCall_0_5_0() { return cTrueCommandsCommandBlockParserRuleCall_0_5_0; }
		
		//('else' falseCommands=CommandBlock)?
		public Group getGroup_0_6() { return cGroup_0_6; }
		
		//'else'
		public Keyword getElseKeyword_0_6_0() { return cElseKeyword_0_6_0; }
		
		//falseCommands=CommandBlock
		public Assignment getFalseCommandsAssignment_0_6_1() { return cFalseCommandsAssignment_0_6_1; }
		
		//CommandBlock
		public RuleCall getFalseCommandsCommandBlockParserRuleCall_0_6_1_0() { return cFalseCommandsCommandBlockParserRuleCall_0_6_1_0; }
		
		//{whileCmd} 'while' '(' exp=Expression ')' commands=CommandBlock
		public Group getGroup_1() { return cGroup_1; }
		
		//{whileCmd}
		public Action getWhileCmdAction_1_0() { return cWhileCmdAction_1_0; }
		
		//'while'
		public Keyword getWhileKeyword_1_1() { return cWhileKeyword_1_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }
		
		//exp=Expression
		public Assignment getExpAssignment_1_3() { return cExpAssignment_1_3; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_3_0() { return cExpExpressionParserRuleCall_1_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }
		
		//commands=CommandBlock
		public Assignment getCommandsAssignment_1_5() { return cCommandsAssignment_1_5; }
		
		//CommandBlock
		public RuleCall getCommandsCommandBlockParserRuleCall_1_5_0() { return cCommandsCommandBlockParserRuleCall_1_5_0; }
		
		//{forCmd} 'for' '(' init+=lValue init+=Assignment ';' exp=Expression ';' inc+=Factor inc+=Assignment? ')'
		//commands=CommandBlock
		public Group getGroup_2() { return cGroup_2; }
		
		//{forCmd}
		public Action getForCmdAction_2_0() { return cForCmdAction_2_0; }
		
		//'for'
		public Keyword getForKeyword_2_1() { return cForKeyword_2_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_2() { return cLeftParenthesisKeyword_2_2; }
		
		//init+=lValue
		public Assignment getInitAssignment_2_3() { return cInitAssignment_2_3; }
		
		//lValue
		public RuleCall getInitLValueParserRuleCall_2_3_0() { return cInitLValueParserRuleCall_2_3_0; }
		
		//init+=Assignment
		public Assignment getInitAssignment_2_4() { return cInitAssignment_2_4; }
		
		//Assignment
		public RuleCall getInitAssignmentParserRuleCall_2_4_0() { return cInitAssignmentParserRuleCall_2_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_5() { return cSemicolonKeyword_2_5; }
		
		//exp=Expression
		public Assignment getExpAssignment_2_6() { return cExpAssignment_2_6; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_2_6_0() { return cExpExpressionParserRuleCall_2_6_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_7() { return cSemicolonKeyword_2_7; }
		
		//inc+=Factor
		public Assignment getIncAssignment_2_8() { return cIncAssignment_2_8; }
		
		//Factor
		public RuleCall getIncFactorParserRuleCall_2_8_0() { return cIncFactorParserRuleCall_2_8_0; }
		
		//inc+=Assignment?
		public Assignment getIncAssignment_2_9() { return cIncAssignment_2_9; }
		
		//Assignment
		public RuleCall getIncAssignmentParserRuleCall_2_9_0() { return cIncAssignmentParserRuleCall_2_9_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_10() { return cRightParenthesisKeyword_2_10; }
		
		//commands=CommandBlock
		public Assignment getCommandsAssignment_2_11() { return cCommandsAssignment_2_11; }
		
		//CommandBlock
		public RuleCall getCommandsCommandBlockParserRuleCall_2_11_0() { return cCommandsCommandBlockParserRuleCall_2_11_0; }
		
		//{switchCmd} 'switch' '(' exp=Expression ')' '{' cases+=Case* ('default' ':' commands+=Command*)? '}'
		public Group getGroup_3() { return cGroup_3; }
		
		//{switchCmd}
		public Action getSwitchCmdAction_3_0() { return cSwitchCmdAction_3_0; }
		
		//'switch'
		public Keyword getSwitchKeyword_3_1() { return cSwitchKeyword_3_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_2() { return cLeftParenthesisKeyword_3_2; }
		
		//exp=Expression
		public Assignment getExpAssignment_3_3() { return cExpAssignment_3_3; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_3_3_0() { return cExpExpressionParserRuleCall_3_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_4() { return cRightParenthesisKeyword_3_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_5() { return cLeftCurlyBracketKeyword_3_5; }
		
		//cases+=Case*
		public Assignment getCasesAssignment_3_6() { return cCasesAssignment_3_6; }
		
		//Case
		public RuleCall getCasesCaseParserRuleCall_3_6_0() { return cCasesCaseParserRuleCall_3_6_0; }
		
		//('default' ':' commands+=Command*)?
		public Group getGroup_3_7() { return cGroup_3_7; }
		
		//'default'
		public Keyword getDefaultKeyword_3_7_0() { return cDefaultKeyword_3_7_0; }
		
		//':'
		public Keyword getColonKeyword_3_7_1() { return cColonKeyword_3_7_1; }
		
		//commands+=Command*
		public Assignment getCommandsAssignment_3_7_2() { return cCommandsAssignment_3_7_2; }
		
		//Command
		public RuleCall getCommandsCommandParserRuleCall_3_7_2_0() { return cCommandsCommandParserRuleCall_3_7_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_8() { return cRightCurlyBracketKeyword_3_8; }
		
		//Declaration
		public RuleCall getDeclarationParserRuleCall_4() { return cDeclarationParserRuleCall_4; }
		
		//{doWhileCmd} 'do' commands=CommandBlock 'while' '(' exp=Expression ')' ';'
		public Group getGroup_5() { return cGroup_5; }
		
		//{doWhileCmd}
		public Action getDoWhileCmdAction_5_0() { return cDoWhileCmdAction_5_0; }
		
		//'do'
		public Keyword getDoKeyword_5_1() { return cDoKeyword_5_1; }
		
		//commands=CommandBlock
		public Assignment getCommandsAssignment_5_2() { return cCommandsAssignment_5_2; }
		
		//CommandBlock
		public RuleCall getCommandsCommandBlockParserRuleCall_5_2_0() { return cCommandsCommandBlockParserRuleCall_5_2_0; }
		
		//'while'
		public Keyword getWhileKeyword_5_3() { return cWhileKeyword_5_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_4() { return cLeftParenthesisKeyword_5_4; }
		
		//exp=Expression
		public Assignment getExpAssignment_5_5() { return cExpAssignment_5_5; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_5_5_0() { return cExpExpressionParserRuleCall_5_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_6() { return cRightParenthesisKeyword_5_6; }
		
		//';'
		public Keyword getSemicolonKeyword_5_7() { return cSemicolonKeyword_5_7; }
		
		//{varCmd} val+=Factor val+=Assignment? ';'
		public Group getGroup_6() { return cGroup_6; }
		
		//{varCmd}
		public Action getVarCmdAction_6_0() { return cVarCmdAction_6_0; }
		
		//val+=Factor
		public Assignment getValAssignment_6_1() { return cValAssignment_6_1; }
		
		//Factor
		public RuleCall getValFactorParserRuleCall_6_1_0() { return cValFactorParserRuleCall_6_1_0; }
		
		//val+=Assignment?
		public Assignment getValAssignment_6_2() { return cValAssignment_6_2; }
		
		//Assignment
		public RuleCall getValAssignmentParserRuleCall_6_2_0() { return cValAssignmentParserRuleCall_6_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_6_3() { return cSemicolonKeyword_6_3; }
		
		//{breakCmd} 'break' ';'
		public Group getGroup_7() { return cGroup_7; }
		
		//{breakCmd}
		public Action getBreakCmdAction_7_0() { return cBreakCmdAction_7_0; }
		
		//'break'
		public Keyword getBreakKeyword_7_1() { return cBreakKeyword_7_1; }
		
		//';'
		public Keyword getSemicolonKeyword_7_2() { return cSemicolonKeyword_7_2; }
		
		//{continueCmd} 'continue' ';'
		public Group getGroup_8() { return cGroup_8; }
		
		//{continueCmd}
		public Action getContinueCmdAction_8_0() { return cContinueCmdAction_8_0; }
		
		//'continue'
		public Keyword getContinueKeyword_8_1() { return cContinueKeyword_8_1; }
		
		//';'
		public Keyword getSemicolonKeyword_8_2() { return cSemicolonKeyword_8_2; }
		
		//{returnCmd} 'return' exp+=Expression? ';'
		public Group getGroup_9() { return cGroup_9; }
		
		//{returnCmd}
		public Action getReturnCmdAction_9_0() { return cReturnCmdAction_9_0; }
		
		//'return'
		public Keyword getReturnKeyword_9_1() { return cReturnKeyword_9_1; }
		
		//exp+=Expression?
		public Assignment getExpAssignment_9_2() { return cExpAssignment_9_2; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_9_2_0() { return cExpExpressionParserRuleCall_9_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_9_3() { return cSemicolonKeyword_9_3; }
	}
	public class CommandBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.CommandBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCommandBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCommandsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCommandsCommandParserRuleCall_2_0 = (RuleCall)cCommandsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//CommandBlock:
		//	{CommandBlock} '{' commands+=Command* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{CommandBlock} '{' commands+=Command* '}'
		public Group getGroup() { return cGroup; }
		
		//{CommandBlock}
		public Action getCommandBlockAction_0() { return cCommandBlockAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//commands+=Command*
		public Assignment getCommandsAssignment_2() { return cCommandsAssignment_2; }
		
		//Command
		public RuleCall getCommandsCommandParserRuleCall_2_0() { return cCommandsCommandParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.Argument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpExpressionParserRuleCall_0_0 = (RuleCall)cExpAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_1_1_0 = (RuleCall)cExpAssignment_1_1.eContents().get(0);
		
		//Argument:
		//	exp+=Expression (',' exp+=Expression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//exp+=Expression (',' exp+=Expression)*
		public Group getGroup() { return cGroup; }
		
		//exp+=Expression
		public Assignment getExpAssignment_0() { return cExpAssignment_0; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_0_0() { return cExpExpressionParserRuleCall_0_0; }
		
		//(',' exp+=Expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//exp+=Expression
		public Assignment getExpAssignment_1_1() { return cExpAssignment_1_1; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_1_0() { return cExpExpressionParserRuleCall_1_1_0; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		
		//Assignment:
		//	'=' exp=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'=' exp=Expression
		public Group getGroup() { return cGroup; }
		
		//'='
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }
		
		//exp=Expression
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_0() { return cExpExpressionParserRuleCall_1_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArgsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArgsRelExpParserRuleCall_0_0 = (RuleCall)cArgsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLogicExpArgsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpLOTerminalRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cArgsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cArgsRelExpParserRuleCall_1_2_0 = (RuleCall)cArgsAssignment_1_2.eContents().get(0);
		
		//Expression:
		//	args+=RelExp ({LogicExp.args+=current} op=LO args+=RelExp)*;
		@Override public ParserRule getRule() { return rule; }
		
		//args+=RelExp ({LogicExp.args+=current} op=LO args+=RelExp)*
		public Group getGroup() { return cGroup; }
		
		//args+=RelExp
		public Assignment getArgsAssignment_0() { return cArgsAssignment_0; }
		
		//RelExp
		public RuleCall getArgsRelExpParserRuleCall_0_0() { return cArgsRelExpParserRuleCall_0_0; }
		
		//({LogicExp.args+=current} op=LO args+=RelExp)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{LogicExp.args+=current}
		public Action getLogicExpArgsAction_1_0() { return cLogicExpArgsAction_1_0; }
		
		//op=LO
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//LO
		public RuleCall getOpLOTerminalRuleCall_1_1_0() { return cOpLOTerminalRuleCall_1_1_0; }
		
		//args+=RelExp
		public Assignment getArgsAssignment_1_2() { return cArgsAssignment_1_2; }
		
		//RelExp
		public RuleCall getArgsRelExpParserRuleCall_1_2_0() { return cArgsRelExpParserRuleCall_1_2_0; }
	}
	public class RelExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.RelExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cArithExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cRelExpArgsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpROTerminalRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cArgsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cArgsArithExpParserRuleCall_1_2_0 = (RuleCall)cArgsAssignment_1_2.eContents().get(0);
		
		//RelExp:
		//	ArithExp ({RelExp.args+=current} op=RO args+=ArithExp)?;
		@Override public ParserRule getRule() { return rule; }
		
		//ArithExp ({RelExp.args+=current} op=RO args+=ArithExp)?
		public Group getGroup() { return cGroup; }
		
		//ArithExp
		public RuleCall getArithExpParserRuleCall_0() { return cArithExpParserRuleCall_0; }
		
		//({RelExp.args+=current} op=RO args+=ArithExp)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{RelExp.args+=current}
		public Action getRelExpArgsAction_1_0() { return cRelExpArgsAction_1_0; }
		
		//op=RO
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//RO
		public RuleCall getOpROTerminalRuleCall_1_1_0() { return cOpROTerminalRuleCall_1_1_0; }
		
		//args+=ArithExp
		public Assignment getArgsAssignment_1_2() { return cArgsAssignment_1_2; }
		
		//ArithExp
		public RuleCall getArgsArithExpParserRuleCall_1_2_0() { return cArgsArithExpParserRuleCall_1_2_0; }
	}
	public class ArithExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.ArithExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTermParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAritmExpArgsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpAO1TerminalRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cArgsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cArgsTermParserRuleCall_1_2_0 = (RuleCall)cArgsAssignment_1_2.eContents().get(0);
		
		//ArithExp:
		//	Term ({AritmExp.args+=current} op=AO1 args+=Term)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Term ({AritmExp.args+=current} op=AO1 args+=Term)*
		public Group getGroup() { return cGroup; }
		
		//Term
		public RuleCall getTermParserRuleCall_0() { return cTermParserRuleCall_0; }
		
		//({AritmExp.args+=current} op=AO1 args+=Term)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AritmExp.args+=current}
		public Action getAritmExpArgsAction_1_0() { return cAritmExpArgsAction_1_0; }
		
		//op=AO1
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//AO1
		public RuleCall getOpAO1TerminalRuleCall_1_1_0() { return cOpAO1TerminalRuleCall_1_1_0; }
		
		//args+=Term
		public Assignment getArgsAssignment_1_2() { return cArgsAssignment_1_2; }
		
		//Term
		public RuleCall getArgsTermParserRuleCall_1_2_0() { return cArgsTermParserRuleCall_1_2_0; }
	}
	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.Term");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFactorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cTermArgsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpAO2TerminalRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cArgsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cArgsFactorParserRuleCall_1_2_0 = (RuleCall)cArgsAssignment_1_2.eContents().get(0);
		
		//Term:
		//	Factor ({Term.args+=current} op=AO2 args+=Factor)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Factor ({Term.args+=current} op=AO2 args+=Factor)*
		public Group getGroup() { return cGroup; }
		
		//Factor
		public RuleCall getFactorParserRuleCall_0() { return cFactorParserRuleCall_0; }
		
		//({Term.args+=current} op=AO2 args+=Factor)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Term.args+=current}
		public Action getTermArgsAction_1_0() { return cTermArgsAction_1_0; }
		
		//op=AO2
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//AO2
		public RuleCall getOpAO2TerminalRuleCall_1_1_0() { return cOpAO2TerminalRuleCall_1_1_0; }
		
		//args+=Factor
		public Assignment getArgsAssignment_1_2() { return cArgsAssignment_1_2; }
		
		//Factor
		public RuleCall getArgsFactorParserRuleCall_1_2_0() { return cArgsFactorParserRuleCall_1_2_0; }
	}
	public class FactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.Factor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cUoUOTerminalRuleCall_0_0 = (RuleCall)cUoAssignment_0.eContents().get(0);
		private final Assignment cArgAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgAtomParserRuleCall_1_0 = (RuleCall)cArgAssignment_1.eContents().get(0);
		private final Assignment cUoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUoUOTerminalRuleCall_2_0 = (RuleCall)cUoAssignment_2.eContents().get(0);
		
		//Factor:
		//	uo+=UO? arg=Atom uo+=UO?;
		@Override public ParserRule getRule() { return rule; }
		
		//uo+=UO? arg=Atom uo+=UO?
		public Group getGroup() { return cGroup; }
		
		//uo+=UO?
		public Assignment getUoAssignment_0() { return cUoAssignment_0; }
		
		//UO
		public RuleCall getUoUOTerminalRuleCall_0_0() { return cUoUOTerminalRuleCall_0_0; }
		
		//arg=Atom
		public Assignment getArgAssignment_1() { return cArgAssignment_1; }
		
		//Atom
		public RuleCall getArgAtomParserRuleCall_1_0() { return cArgAtomParserRuleCall_1_0; }
		
		//uo+=UO?
		public Assignment getUoAssignment_2() { return cUoAssignment_2; }
		
		//UO
		public RuleCall getUoUOTerminalRuleCall_2_0() { return cUoUOTerminalRuleCall_2_0; }
	}
	public class AtomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.Atom");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final RuleCall cLValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Atom:
		//	Literal
		//	| '(' Expression ')'
		//	| lValue;
		@Override public ParserRule getRule() { return rule; }
		
		//Literal | '(' Expression ')' | lValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Literal
		public RuleCall getLiteralParserRuleCall_0() { return cLiteralParserRuleCall_0; }
		
		//'(' Expression ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_1_1() { return cExpressionParserRuleCall_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
		
		//lValue
		public RuleCall getLValueParserRuleCall_2() { return cLValueParserRuleCall_2; }
	}
	public class LValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.lValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cValorAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cValorDefinitionCrossReference_0_0_0 = (CrossReference)cValorAssignment_0_0.eContents().get(0);
		private final RuleCall cValorDefinitionIDTerminalRuleCall_0_0_0_1 = (RuleCall)cValorDefinitionCrossReference_0_0_0.eContents().get(1);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Group cGroup_0_1_0 = (Group)cAlternatives_0_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1_0_0 = (Keyword)cGroup_0_1_0.eContents().get(0);
		private final Assignment cArgAssignment_0_1_0_1 = (Assignment)cGroup_0_1_0.eContents().get(1);
		private final RuleCall cArgArgumentParserRuleCall_0_1_0_1_0 = (RuleCall)cArgAssignment_0_1_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_1_0_2 = (Keyword)cGroup_0_1_0.eContents().get(2);
		private final Assignment cAccAssignment_0_1_1 = (Assignment)cAlternatives_0_1.eContents().get(1);
		private final RuleCall cAccAccessExpParserRuleCall_0_1_1_0 = (RuleCall)cAccAssignment_0_1_1.eContents().get(0);
		private final RuleCall cPointerExpParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//lValue:
		//	valor=[Definition] ('(' arg=Argument? ')' | acc=AccessExp)?
		//	| PointerExp;
		@Override public ParserRule getRule() { return rule; }
		
		//valor=[Definition] ('(' arg=Argument? ')' | acc=AccessExp)? | PointerExp
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//valor=[Definition] ('(' arg=Argument? ')' | acc=AccessExp)?
		public Group getGroup_0() { return cGroup_0; }
		
		//valor=[Definition]
		public Assignment getValorAssignment_0_0() { return cValorAssignment_0_0; }
		
		//[Definition]
		public CrossReference getValorDefinitionCrossReference_0_0_0() { return cValorDefinitionCrossReference_0_0_0; }
		
		//ID
		public RuleCall getValorDefinitionIDTerminalRuleCall_0_0_0_1() { return cValorDefinitionIDTerminalRuleCall_0_0_0_1; }
		
		//('(' arg=Argument? ')' | acc=AccessExp)?
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//'(' arg=Argument? ')'
		public Group getGroup_0_1_0() { return cGroup_0_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1_0_0() { return cLeftParenthesisKeyword_0_1_0_0; }
		
		//arg=Argument?
		public Assignment getArgAssignment_0_1_0_1() { return cArgAssignment_0_1_0_1; }
		
		//Argument
		public RuleCall getArgArgumentParserRuleCall_0_1_0_1_0() { return cArgArgumentParserRuleCall_0_1_0_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_1_0_2() { return cRightParenthesisKeyword_0_1_0_2; }
		
		//acc=AccessExp
		public Assignment getAccAssignment_0_1_1() { return cAccAssignment_0_1_1; }
		
		//AccessExp
		public RuleCall getAccAccessExpParserRuleCall_0_1_1_0() { return cAccAccessExpParserRuleCall_0_1_1_0; }
		
		//PointerExp
		public RuleCall getPointerExpParserRuleCall_1() { return cPointerExpParserRuleCall_1; }
	}
	public class PointerExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.PointerExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPointerExpAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAsteriskAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cIDTerminalRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cExpAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_2_1_1_0 = (RuleCall)cExpAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//PointerExp:
		//	{PointerExp} '**' (ID | '(' exp=Expression ')');
		@Override public ParserRule getRule() { return rule; }
		
		//{PointerExp} '**' (ID | '(' exp=Expression ')')
		public Group getGroup() { return cGroup; }
		
		//{PointerExp}
		public Action getPointerExpAction_0() { return cPointerExpAction_0; }
		
		//'**'
		public Keyword getAsteriskAsteriskKeyword_1() { return cAsteriskAsteriskKeyword_1; }
		
		//ID | '(' exp=Expression ')'
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_2_0() { return cIDTerminalRuleCall_2_0; }
		
		//'(' exp=Expression ')'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1_0() { return cLeftParenthesisKeyword_2_1_0; }
		
		//exp=Expression
		public Assignment getExpAssignment_2_1_1() { return cExpAssignment_2_1_1; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_2_1_1_0() { return cExpExpressionParserRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_1_2() { return cRightParenthesisKeyword_2_1_2; }
	}
	public class AccessExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.AccessExp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cArrayAccessAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cExpAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExpExpressionParserRuleCall_0_2_0 = (RuleCall)cExpAssignment_0_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cFieldAccessAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cFieldAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cFieldIDTerminalRuleCall_1_2_0 = (RuleCall)cFieldAssignment_1_2.eContents().get(0);
		
		//AccessExp:
		//	{arrayAccess} '[' exp=Expression? ']'
		//	| {fieldAccess} '.' field=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{arrayAccess} '[' exp=Expression? ']' | {fieldAccess} '.' field=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{arrayAccess} '[' exp=Expression? ']'
		public Group getGroup_0() { return cGroup_0; }
		
		//{arrayAccess}
		public Action getArrayAccessAction_0_0() { return cArrayAccessAction_0_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_1() { return cLeftSquareBracketKeyword_0_1; }
		
		//exp=Expression?
		public Assignment getExpAssignment_0_2() { return cExpAssignment_0_2; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_0_2_0() { return cExpExpressionParserRuleCall_0_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_3() { return cRightSquareBracketKeyword_0_3; }
		
		//{fieldAccess} '.' field=ID
		public Group getGroup_1() { return cGroup_1; }
		
		//{fieldAccess}
		public Action getFieldAccessAction_1_0() { return cFieldAccessAction_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }
		
		//field=ID
		public Assignment getFieldAssignment_1_2() { return cFieldAssignment_1_2; }
		
		//ID
		public RuleCall getFieldIDTerminalRuleCall_1_2_0() { return cFieldIDTerminalRuleCall_1_2_0; }
	}
	public class CaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.Case");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValAtomParserRuleCall_1_0 = (RuleCall)cValAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCommandsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCommandsCommandParserRuleCall_3_0 = (RuleCall)cCommandsAssignment_3.eContents().get(0);
		
		//Case:
		//	'case' val=Atom ':' commands+=Command*;
		@Override public ParserRule getRule() { return rule; }
		
		//'case' val=Atom ':' commands+=Command*
		public Group getGroup() { return cGroup; }
		
		//'case'
		public Keyword getCaseKeyword_0() { return cCaseKeyword_0; }
		
		//val=Atom
		public Assignment getValAssignment_1() { return cValAssignment_1; }
		
		//Atom
		public RuleCall getValAtomParserRuleCall_1_0() { return cValAtomParserRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//commands+=Command*
		public Assignment getCommandsAssignment_3() { return cCommandsAssignment_3; }
		
		//Command
		public RuleCall getCommandsCommandParserRuleCall_3_0() { return cCommandsCommandParserRuleCall_3_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTipoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTipoTYPELITTerminalRuleCall_0_0 = (RuleCall)cTipoAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_1_1_0 = (RuleCall)cExpAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Type:
		//	tipo=TYPELIT ('[' exp=Expression? ']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//tipo=TYPELIT ('[' exp=Expression? ']')?
		public Group getGroup() { return cGroup; }
		
		//tipo=TYPELIT
		public Assignment getTipoAssignment_0() { return cTipoAssignment_0; }
		
		//TYPELIT
		public RuleCall getTipoTYPELITTerminalRuleCall_0_0() { return cTipoTYPELITTerminalRuleCall_0_0; }
		
		//('[' exp=Expression? ']')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//exp=Expression?
		public Assignment getExpAssignment_1_1() { return cExpAssignment_1_1; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_1_0() { return cExpExpressionParserRuleCall_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntLitAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValINTTerminalRuleCall_0_1_0 = (RuleCall)cValAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cTrueLitAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValTRUETerminalRuleCall_1_1_0 = (RuleCall)cValAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cFalseLitAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValFALSETerminalRuleCall_2_1_0 = (RuleCall)cValAssignment_2_1.eContents().get(0);
		
		//Literal:
		//	{IntLit} val=INT | {TrueLit} val=TRUE | {FalseLit} val=FALSE;
		@Override public ParserRule getRule() { return rule; }
		
		//{IntLit} val=INT | {TrueLit} val=TRUE | {FalseLit} val=FALSE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{IntLit} val=INT
		public Group getGroup_0() { return cGroup_0; }
		
		//{IntLit}
		public Action getIntLitAction_0_0() { return cIntLitAction_0_0; }
		
		//val=INT
		public Assignment getValAssignment_0_1() { return cValAssignment_0_1; }
		
		//INT
		public RuleCall getValINTTerminalRuleCall_0_1_0() { return cValINTTerminalRuleCall_0_1_0; }
		
		//{TrueLit} val=TRUE
		public Group getGroup_1() { return cGroup_1; }
		
		//{TrueLit}
		public Action getTrueLitAction_1_0() { return cTrueLitAction_1_0; }
		
		//val=TRUE
		public Assignment getValAssignment_1_1() { return cValAssignment_1_1; }
		
		//TRUE
		public RuleCall getValTRUETerminalRuleCall_1_1_0() { return cValTRUETerminalRuleCall_1_1_0; }
		
		//{FalseLit} val=FALSE
		public Group getGroup_2() { return cGroup_2; }
		
		//{FalseLit}
		public Action getFalseLitAction_2_0() { return cFalseLitAction_2_0; }
		
		//val=FALSE
		public Assignment getValAssignment_2_1() { return cValAssignment_2_1; }
		
		//FALSE
		public RuleCall getValFALSETerminalRuleCall_2_1_0() { return cValFALSETerminalRuleCall_2_1_0; }
	}
	
	
	private final ProgramElements pProgram;
	private final DefinitionElements pDefinition;
	private final FunctionElements pFunction;
	private final DeclarationElements pDeclaration;
	private final StructElements pStruct;
	private final IdDefElements pIdDef;
	private final VariableElements pVariable;
	private final CommandElements pCommand;
	private final CommandBlockElements pCommandBlock;
	private final ArgumentElements pArgument;
	private final AssignmentElements pAssignment;
	private final ExpressionElements pExpression;
	private final RelExpElements pRelExp;
	private final ArithExpElements pArithExp;
	private final TermElements pTerm;
	private final FactorElements pFactor;
	private final AtomElements pAtom;
	private final LValueElements pLValue;
	private final PointerExpElements pPointerExp;
	private final AccessExpElements pAccessExp;
	private final CaseElements pCase;
	private final TypeElements pType;
	private final LiteralElements pLiteral;
	private final TerminalRule tTYPELIT;
	private final TerminalRule tTRUE;
	private final TerminalRule tFALSE;
	private final TerminalRule tAO1;
	private final TerminalRule tAO2;
	private final TerminalRule tRO;
	private final TerminalRule tLO;
	private final TerminalRule tUO;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public CGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pDefinition = new DefinitionElements();
		this.pFunction = new FunctionElements();
		this.pDeclaration = new DeclarationElements();
		this.pStruct = new StructElements();
		this.pIdDef = new IdDefElements();
		this.pVariable = new VariableElements();
		this.pCommand = new CommandElements();
		this.pCommandBlock = new CommandBlockElements();
		this.pArgument = new ArgumentElements();
		this.pAssignment = new AssignmentElements();
		this.pExpression = new ExpressionElements();
		this.pRelExp = new RelExpElements();
		this.pArithExp = new ArithExpElements();
		this.pTerm = new TermElements();
		this.pFactor = new FactorElements();
		this.pAtom = new AtomElements();
		this.pLValue = new LValueElements();
		this.pPointerExp = new PointerExpElements();
		this.pAccessExp = new AccessExpElements();
		this.pCase = new CaseElements();
		this.pType = new TypeElements();
		this.pLiteral = new LiteralElements();
		this.tTYPELIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.TYPELIT");
		this.tTRUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.TRUE");
		this.tFALSE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.FALSE");
		this.tAO1 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.AO1");
		this.tAO2 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.AO2");
		this.tRO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.RO");
		this.tLO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.LO");
		this.tUO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.UO");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.poli.compilador.C".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////--------------------------------------------------------------------
	//Program:
	//	definition+=Definition*;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Definition:
	//	Struct | Function | Declaration;
	public DefinitionElements getDefinitionAccess() {
		return pDefinition;
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}
	
	//Function:
	//	{Function} 'function' tipo=Type name=ID '(' (params+=IdDef (',' params+=IdDef)*)? ')' '{' commands+=Command* '}';
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//Declaration:
	//	{Declaration} (tipo=Type '**'? name=ID val=Assignment? | 'struct' str=[Struct] name=ID) ';';
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//Struct:
	//	{Struct} 'struct' name=ID '{' decl+=Declaration* '}' ';';
	public StructElements getStructAccess() {
		return pStruct;
	}
	
	public ParserRule getStructRule() {
		return getStructAccess().getRule();
	}
	
	//IdDef:
	//	tipo=Type name=Variable;
	public IdDefElements getIdDefAccess() {
		return pIdDef;
	}
	
	public ParserRule getIdDefRule() {
		return getIdDefAccess().getRule();
	}
	
	//Variable:
	//	{Variable} ID | PointerExp;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//Command:
	//	{ifCmd} 'if' '(' exp=Expression ')' trueCommands=CommandBlock ('else' falseCommands=CommandBlock)?
	//	| {whileCmd} 'while' '(' exp=Expression ')' commands=CommandBlock
	//	| {forCmd} 'for' '(' init+=lValue init+=Assignment ';' exp=Expression ';' inc+=Factor inc+=Assignment? ')'
	//	commands=CommandBlock
	//	| {switchCmd} 'switch' '(' exp=Expression ')' '{' cases+=Case* ('default' ':' commands+=Command*)? '}'
	//	| Declaration
	//	| {doWhileCmd} 'do' commands=CommandBlock 'while' '(' exp=Expression ')' ';'
	//	| {varCmd} val+=Factor val+=Assignment? ';'
	//	| {breakCmd} 'break' ';'
	//	| {continueCmd} 'continue' ';'
	//	| {returnCmd} 'return' exp+=Expression? ';';
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//CommandBlock:
	//	{CommandBlock} '{' commands+=Command* '}';
	public CommandBlockElements getCommandBlockAccess() {
		return pCommandBlock;
	}
	
	public ParserRule getCommandBlockRule() {
		return getCommandBlockAccess().getRule();
	}
	
	//Argument:
	//	exp+=Expression (',' exp+=Expression)*;
	public ArgumentElements getArgumentAccess() {
		return pArgument;
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}
	
	//Assignment:
	//	'=' exp=Expression;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	//Expression:
	//	args+=RelExp ({LogicExp.args+=current} op=LO args+=RelExp)*;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//RelExp:
	//	ArithExp ({RelExp.args+=current} op=RO args+=ArithExp)?;
	public RelExpElements getRelExpAccess() {
		return pRelExp;
	}
	
	public ParserRule getRelExpRule() {
		return getRelExpAccess().getRule();
	}
	
	//ArithExp:
	//	Term ({AritmExp.args+=current} op=AO1 args+=Term)*;
	public ArithExpElements getArithExpAccess() {
		return pArithExp;
	}
	
	public ParserRule getArithExpRule() {
		return getArithExpAccess().getRule();
	}
	
	//Term:
	//	Factor ({Term.args+=current} op=AO2 args+=Factor)*;
	public TermElements getTermAccess() {
		return pTerm;
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}
	
	//Factor:
	//	uo+=UO? arg=Atom uo+=UO?;
	public FactorElements getFactorAccess() {
		return pFactor;
	}
	
	public ParserRule getFactorRule() {
		return getFactorAccess().getRule();
	}
	
	//Atom:
	//	Literal
	//	| '(' Expression ')'
	//	| lValue;
	public AtomElements getAtomAccess() {
		return pAtom;
	}
	
	public ParserRule getAtomRule() {
		return getAtomAccess().getRule();
	}
	
	//lValue:
	//	valor=[Definition] ('(' arg=Argument? ')' | acc=AccessExp)?
	//	| PointerExp;
	public LValueElements getLValueAccess() {
		return pLValue;
	}
	
	public ParserRule getLValueRule() {
		return getLValueAccess().getRule();
	}
	
	//PointerExp:
	//	{PointerExp} '**' (ID | '(' exp=Expression ')');
	public PointerExpElements getPointerExpAccess() {
		return pPointerExp;
	}
	
	public ParserRule getPointerExpRule() {
		return getPointerExpAccess().getRule();
	}
	
	//AccessExp:
	//	{arrayAccess} '[' exp=Expression? ']'
	//	| {fieldAccess} '.' field=ID;
	public AccessExpElements getAccessExpAccess() {
		return pAccessExp;
	}
	
	public ParserRule getAccessExpRule() {
		return getAccessExpAccess().getRule();
	}
	
	//Case:
	//	'case' val=Atom ':' commands+=Command*;
	public CaseElements getCaseAccess() {
		return pCase;
	}
	
	public ParserRule getCaseRule() {
		return getCaseAccess().getRule();
	}
	
	//Type:
	//	tipo=TYPELIT ('[' exp=Expression? ']')?;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//Literal:
	//	{IntLit} val=INT | {TrueLit} val=TRUE | {FalseLit} val=FALSE;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//terminal TYPELIT:
	//	'int' | 'bool' | 'char' | 'void';
	public TerminalRule getTYPELITRule() {
		return tTYPELIT;
	}
	
	//terminal TRUE:
	//	'true';
	public TerminalRule getTRUERule() {
		return tTRUE;
	}
	
	//terminal FALSE:
	//	'false';
	public TerminalRule getFALSERule() {
		return tFALSE;
	}
	
	//terminal AO1:
	//	'+' | '-';
	public TerminalRule getAO1Rule() {
		return tAO1;
	}
	
	//terminal AO2:
	//	'*' | '/';
	public TerminalRule getAO2Rule() {
		return tAO2;
	}
	
	//terminal RO:
	//	'>' | '>=' | '<' | '<=' | '==' | '!=';
	public TerminalRule getRORule() {
		return tRO;
	}
	
	//terminal LO:
	//	'&&' | '||';
	public TerminalRule getLORule() {
		return tLO;
	}
	
	//terminal UO:
	//	'!' | '++' | '--' | '&';
	public TerminalRule getUORule() {
		return tUO;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
