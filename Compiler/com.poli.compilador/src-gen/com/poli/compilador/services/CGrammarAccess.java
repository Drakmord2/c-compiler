/*
 * generated by Xtext 2.12.0
 */
package com.poli.compilador.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.Program");
		private final Assignment cDefinitionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDefinitionDefinitionParserRuleCall_0 = (RuleCall)cDefinitionAssignment.eContents().get(0);
		
		////--------------------------------------------------------------------
		//Program:
		//	definition+=Definition*;
		@Override public ParserRule getRule() { return rule; }
		
		//definition+=Definition*
		public Assignment getDefinitionAssignment() { return cDefinitionAssignment; }
		
		//Definition
		public RuleCall getDefinitionDefinitionParserRuleCall_0() { return cDefinitionDefinitionParserRuleCall_0; }
	}
	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.Definition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValFunctionParserRuleCall_0_0 = (RuleCall)cValAssignment_0.eContents().get(0);
		private final RuleCall cDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Definition:
		//	val+=Function | Declaration;
		@Override public ParserRule getRule() { return rule; }
		
		//val+=Function | Declaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//val+=Function
		public Assignment getValAssignment_0() { return cValAssignment_0; }
		
		//Function
		public RuleCall getValFunctionParserRuleCall_0_0() { return cValFunctionParserRuleCall_0_0; }
		
		//Declaration
		public RuleCall getDeclarationParserRuleCall_1() { return cDeclarationParserRuleCall_1; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTipoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTipoTypeParserRuleCall_0_0 = (RuleCall)cTipoAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParamsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParamsParameterParserRuleCall_3_0 = (RuleCall)cParamsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cCommandsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cCommandsCommandParserRuleCall_6_0 = (RuleCall)cCommandsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//// TODO Comandos e Declarações
		//Function:
		//	tipo=Type name=ID '(' params+=Parameter? ')' '{' commands+=Command* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//tipo=Type name=ID '(' params+=Parameter? ')' '{' commands+=Command* '}'
		public Group getGroup() { return cGroup; }
		
		//tipo=Type
		public Assignment getTipoAssignment_0() { return cTipoAssignment_0; }
		
		//Type
		public RuleCall getTipoTypeParserRuleCall_0_0() { return cTipoTypeParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//params+=Parameter?
		public Assignment getParamsAssignment_3() { return cParamsAssignment_3; }
		
		//Parameter
		public RuleCall getParamsParameterParserRuleCall_3_0() { return cParamsParameterParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//commands+=Command*
		public Assignment getCommandsAssignment_6() { return cCommandsAssignment_6; }
		
		//Command
		public RuleCall getCommandsCommandParserRuleCall_6_0() { return cCommandsCommandParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.Declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTipoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTipoTypeParserRuleCall_0_0 = (RuleCall)cTipoAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cAsgAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAsgAssignmentParserRuleCall_2_0 = (RuleCall)cAsgAssignment_2.eContents().get(0);
		
		//Declaration:
		//	tipo=Type name+=ID* asg=Assignment;
		@Override public ParserRule getRule() { return rule; }
		
		//tipo=Type name+=ID* asg=Assignment
		public Group getGroup() { return cGroup; }
		
		//tipo=Type
		public Assignment getTipoAssignment_0() { return cTipoAssignment_0; }
		
		//Type
		public RuleCall getTipoTypeParserRuleCall_0_0() { return cTipoTypeParserRuleCall_0_0; }
		
		//name+=ID*
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//asg=Assignment
		public Assignment getAsgAssignment_2() { return cAsgAssignment_2; }
		
		//Assignment
		public RuleCall getAsgAssignmentParserRuleCall_2_0() { return cAsgAssignmentParserRuleCall_2_0; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.Command");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cCommandAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cIfKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cExpAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cExpExpressionParserRuleCall_0_3_0 = (RuleCall)cExpAssignment_0_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Assignment cCommandsAssignment_0_6 = (Assignment)cGroup_0.eContents().get(6);
		private final RuleCall cCommandsCommandParserRuleCall_0_6_0 = (RuleCall)cCommandsAssignment_0_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_7 = (Keyword)cGroup_0.eContents().get(7);
		private final Group cGroup_0_8 = (Group)cGroup_0.eContents().get(8);
		private final Keyword cElseKeyword_0_8_0 = (Keyword)cGroup_0_8.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_8_1 = (Keyword)cGroup_0_8.eContents().get(1);
		private final Assignment cCommandsAssignment_0_8_2 = (Assignment)cGroup_0_8.eContents().get(2);
		private final RuleCall cCommandsCommandParserRuleCall_0_8_2_0 = (RuleCall)cCommandsAssignment_0_8_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_8_3 = (Keyword)cGroup_0_8.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cCommandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cBreakKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cCommandAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cContinueKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cSemicolonKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cCommandAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cReturnKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cExpAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cExpExpressionParserRuleCall_3_2_0 = (RuleCall)cExpAssignment_3_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//Command:
		//	{Command} "if" '(' exp+=Expression ')' '{' commands+=Command* '}' ("else" '{' commands+=Command* '}')?
		//	| {Command} "break" ';'
		//	| {Command} "continue" ';'
		//	| {Command} "return" exp+=Expression? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{Command} "if" '(' exp+=Expression ')' '{' commands+=Command* '}' ("else" '{' commands+=Command* '}')? | {Command}
		//"break" ';' | {Command} "continue" ';' | {Command} "return" exp+=Expression? ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Command} "if" '(' exp+=Expression ')' '{' commands+=Command* '}' ("else" '{' commands+=Command* '}')?
		public Group getGroup_0() { return cGroup_0; }
		
		//{Command}
		public Action getCommandAction_0_0() { return cCommandAction_0_0; }
		
		//"if"
		public Keyword getIfKeyword_0_1() { return cIfKeyword_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_2() { return cLeftParenthesisKeyword_0_2; }
		
		//exp+=Expression
		public Assignment getExpAssignment_0_3() { return cExpAssignment_0_3; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_0_3_0() { return cExpExpressionParserRuleCall_0_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_4() { return cRightParenthesisKeyword_0_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_5() { return cLeftCurlyBracketKeyword_0_5; }
		
		//commands+=Command*
		public Assignment getCommandsAssignment_0_6() { return cCommandsAssignment_0_6; }
		
		//Command
		public RuleCall getCommandsCommandParserRuleCall_0_6_0() { return cCommandsCommandParserRuleCall_0_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_0_7() { return cRightCurlyBracketKeyword_0_7; }
		
		//("else" '{' commands+=Command* '}')?
		public Group getGroup_0_8() { return cGroup_0_8; }
		
		//"else"
		public Keyword getElseKeyword_0_8_0() { return cElseKeyword_0_8_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_8_1() { return cLeftCurlyBracketKeyword_0_8_1; }
		
		//commands+=Command*
		public Assignment getCommandsAssignment_0_8_2() { return cCommandsAssignment_0_8_2; }
		
		//Command
		public RuleCall getCommandsCommandParserRuleCall_0_8_2_0() { return cCommandsCommandParserRuleCall_0_8_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_0_8_3() { return cRightCurlyBracketKeyword_0_8_3; }
		
		//{Command} "break" ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//{Command}
		public Action getCommandAction_1_0() { return cCommandAction_1_0; }
		
		//"break"
		public Keyword getBreakKeyword_1_1() { return cBreakKeyword_1_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1_2() { return cSemicolonKeyword_1_2; }
		
		//{Command} "continue" ';'
		public Group getGroup_2() { return cGroup_2; }
		
		//{Command}
		public Action getCommandAction_2_0() { return cCommandAction_2_0; }
		
		//"continue"
		public Keyword getContinueKeyword_2_1() { return cContinueKeyword_2_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2_2() { return cSemicolonKeyword_2_2; }
		
		//{Command} "return" exp+=Expression? ';'
		public Group getGroup_3() { return cGroup_3; }
		
		//{Command}
		public Action getCommandAction_3_0() { return cCommandAction_3_0; }
		
		//"return"
		public Keyword getReturnKeyword_3_1() { return cReturnKeyword_3_1; }
		
		//exp+=Expression?
		public Assignment getExpAssignment_3_2() { return cExpAssignment_3_2; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_3_2_0() { return cExpExpressionParserRuleCall_3_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_3() { return cSemicolonKeyword_3_3; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.Parameter");
		private final Keyword cDigitOneKeyword = (Keyword)rule.eContents().get(1);
		
		//Parameter:
		//	'1';
		@Override public ParserRule getRule() { return rule; }
		
		//'1'
		public Keyword getDigitOneKeyword() { return cDigitOneKeyword; }
	}
	public class ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.Argument");
		private final Keyword cDigitOneKeyword = (Keyword)rule.eContents().get(1);
		
		//Argument:
		//	'1';
		@Override public ParserRule getRule() { return rule; }
		
		//'1'
		public Keyword getDigitOneKeyword() { return cDigitOneKeyword; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.Assignment");
		private final Keyword cDigitOneKeyword = (Keyword)rule.eContents().get(1);
		
		//Assignment:
		//	'1';
		@Override public ParserRule getRule() { return rule; }
		
		//'1'
		public Keyword getDigitOneKeyword() { return cDigitOneKeyword; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArgsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArgsRelExpParserRuleCall_0_0 = (RuleCall)cArgsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLogicExpArgsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValLOTerminalRuleCall_1_1_0 = (RuleCall)cValAssignment_1_1.eContents().get(0);
		private final Assignment cArgsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cArgsRelExpParserRuleCall_1_2_0 = (RuleCall)cArgsAssignment_1_2.eContents().get(0);
		
		//Expression:
		//	args+=RelExp ({LogicExp.args+=current} val=LO args+=RelExp)*;
		@Override public ParserRule getRule() { return rule; }
		
		//args+=RelExp ({LogicExp.args+=current} val=LO args+=RelExp)*
		public Group getGroup() { return cGroup; }
		
		//args+=RelExp
		public Assignment getArgsAssignment_0() { return cArgsAssignment_0; }
		
		//RelExp
		public RuleCall getArgsRelExpParserRuleCall_0_0() { return cArgsRelExpParserRuleCall_0_0; }
		
		//({LogicExp.args+=current} val=LO args+=RelExp)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{LogicExp.args+=current}
		public Action getLogicExpArgsAction_1_0() { return cLogicExpArgsAction_1_0; }
		
		//val=LO
		public Assignment getValAssignment_1_1() { return cValAssignment_1_1; }
		
		//LO
		public RuleCall getValLOTerminalRuleCall_1_1_0() { return cValLOTerminalRuleCall_1_1_0; }
		
		//args+=RelExp
		public Assignment getArgsAssignment_1_2() { return cArgsAssignment_1_2; }
		
		//RelExp
		public RuleCall getArgsRelExpParserRuleCall_1_2_0() { return cArgsRelExpParserRuleCall_1_2_0; }
	}
	public class RelExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.RelExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cArithExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cRelExpArgsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValROTerminalRuleCall_1_1_0 = (RuleCall)cValAssignment_1_1.eContents().get(0);
		private final Assignment cArgsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cArgsArithExpParserRuleCall_1_2_0 = (RuleCall)cArgsAssignment_1_2.eContents().get(0);
		
		//RelExp:
		//	ArithExp ({RelExp.args+=current} val=RO args+=ArithExp)?;
		@Override public ParserRule getRule() { return rule; }
		
		//ArithExp ({RelExp.args+=current} val=RO args+=ArithExp)?
		public Group getGroup() { return cGroup; }
		
		//ArithExp
		public RuleCall getArithExpParserRuleCall_0() { return cArithExpParserRuleCall_0; }
		
		//({RelExp.args+=current} val=RO args+=ArithExp)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{RelExp.args+=current}
		public Action getRelExpArgsAction_1_0() { return cRelExpArgsAction_1_0; }
		
		//val=RO
		public Assignment getValAssignment_1_1() { return cValAssignment_1_1; }
		
		//RO
		public RuleCall getValROTerminalRuleCall_1_1_0() { return cValROTerminalRuleCall_1_1_0; }
		
		//args+=ArithExp
		public Assignment getArgsAssignment_1_2() { return cArgsAssignment_1_2; }
		
		//ArithExp
		public RuleCall getArgsArithExpParserRuleCall_1_2_0() { return cArgsArithExpParserRuleCall_1_2_0; }
	}
	public class ArithExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.ArithExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTermParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAritmExpArgsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValAO1TerminalRuleCall_1_1_0 = (RuleCall)cValAssignment_1_1.eContents().get(0);
		private final Assignment cArgsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cArgsTermParserRuleCall_1_2_0 = (RuleCall)cArgsAssignment_1_2.eContents().get(0);
		
		//ArithExp:
		//	Term ({AritmExp.args+=current} val=AO1 args+=Term)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Term ({AritmExp.args+=current} val=AO1 args+=Term)*
		public Group getGroup() { return cGroup; }
		
		//Term
		public RuleCall getTermParserRuleCall_0() { return cTermParserRuleCall_0; }
		
		//({AritmExp.args+=current} val=AO1 args+=Term)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AritmExp.args+=current}
		public Action getAritmExpArgsAction_1_0() { return cAritmExpArgsAction_1_0; }
		
		//val=AO1
		public Assignment getValAssignment_1_1() { return cValAssignment_1_1; }
		
		//AO1
		public RuleCall getValAO1TerminalRuleCall_1_1_0() { return cValAO1TerminalRuleCall_1_1_0; }
		
		//args+=Term
		public Assignment getArgsAssignment_1_2() { return cArgsAssignment_1_2; }
		
		//Term
		public RuleCall getArgsTermParserRuleCall_1_2_0() { return cArgsTermParserRuleCall_1_2_0; }
	}
	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.Term");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFactorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cTermArgsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValAO2TerminalRuleCall_1_1_0 = (RuleCall)cValAssignment_1_1.eContents().get(0);
		private final Assignment cArgsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cArgsFactorParserRuleCall_1_2_0 = (RuleCall)cArgsAssignment_1_2.eContents().get(0);
		
		//Term:
		//	Factor ({Term.args+=current} val=AO2 args+=Factor)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Factor ({Term.args+=current} val=AO2 args+=Factor)*
		public Group getGroup() { return cGroup; }
		
		//Factor
		public RuleCall getFactorParserRuleCall_0() { return cFactorParserRuleCall_0; }
		
		//({Term.args+=current} val=AO2 args+=Factor)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Term.args+=current}
		public Action getTermArgsAction_1_0() { return cTermArgsAction_1_0; }
		
		//val=AO2
		public Assignment getValAssignment_1_1() { return cValAssignment_1_1; }
		
		//AO2
		public RuleCall getValAO2TerminalRuleCall_1_1_0() { return cValAO2TerminalRuleCall_1_1_0; }
		
		//args+=Factor
		public Assignment getArgsAssignment_1_2() { return cArgsAssignment_1_2; }
		
		//Factor
		public RuleCall getArgsFactorParserRuleCall_1_2_0() { return cArgsFactorParserRuleCall_1_2_0; }
	}
	public class FactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.Factor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cUnaryExpAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValUOTerminalRuleCall_0_1_0 = (RuleCall)cValAssignment_0_1.eContents().get(0);
		private final Assignment cArgsAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cArgsAtomParserRuleCall_0_2_0 = (RuleCall)cArgsAssignment_0_2.eContents().get(0);
		private final RuleCall cAtomParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Factor:
		//	{UnaryExp} val=UO args+=Atom
		//	| Atom;
		@Override public ParserRule getRule() { return rule; }
		
		//{UnaryExp} val=UO args+=Atom | Atom
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{UnaryExp} val=UO args+=Atom
		public Group getGroup_0() { return cGroup_0; }
		
		//{UnaryExp}
		public Action getUnaryExpAction_0_0() { return cUnaryExpAction_0_0; }
		
		//val=UO
		public Assignment getValAssignment_0_1() { return cValAssignment_0_1; }
		
		//UO
		public RuleCall getValUOTerminalRuleCall_0_1_0() { return cValUOTerminalRuleCall_0_1_0; }
		
		//args+=Atom
		public Assignment getArgsAssignment_0_2() { return cArgsAssignment_0_2; }
		
		//Atom
		public RuleCall getArgsAtomParserRuleCall_0_2_0() { return cArgsAtomParserRuleCall_0_2_0; }
		
		//Atom
		public RuleCall getAtomParserRuleCall_1() { return cAtomParserRuleCall_1; }
	}
	public class AtomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.Atom");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final RuleCall cLValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Atom:
		//	Literal
		//	| '(' Expression ')'
		//	| lValue;
		@Override public ParserRule getRule() { return rule; }
		
		//Literal | '(' Expression ')' | lValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Literal
		public RuleCall getLiteralParserRuleCall_0() { return cLiteralParserRuleCall_0; }
		
		//'(' Expression ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_1_1() { return cExpressionParserRuleCall_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
		
		//lValue
		public RuleCall getLValueParserRuleCall_2() { return cLValueParserRuleCall_2; }
	}
	public class LValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.lValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIDValAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValIDTerminalRuleCall_0_1_0 = (RuleCall)cValAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final RuleCall cArgumentParserRuleCall_0_2_1 = (RuleCall)cGroup_0_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2_2 = (Keyword)cGroup_0_2.eContents().get(2);
		private final RuleCall cPointerExpParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//lValue:
		//	{IDVal} val=ID ('(' Argument ')')?
		//	| PointerExp;
		@Override public ParserRule getRule() { return rule; }
		
		//{IDVal} val=ID ('(' Argument ')')? | PointerExp
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{IDVal} val=ID ('(' Argument ')')?
		public Group getGroup_0() { return cGroup_0; }
		
		//{IDVal}
		public Action getIDValAction_0_0() { return cIDValAction_0_0; }
		
		//val=ID
		public Assignment getValAssignment_0_1() { return cValAssignment_0_1; }
		
		//ID
		public RuleCall getValIDTerminalRuleCall_0_1_0() { return cValIDTerminalRuleCall_0_1_0; }
		
		//('(' Argument ')')?
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_2_0() { return cLeftParenthesisKeyword_0_2_0; }
		
		//Argument
		public RuleCall getArgumentParserRuleCall_0_2_1() { return cArgumentParserRuleCall_0_2_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2_2() { return cRightParenthesisKeyword_0_2_2; }
		
		//PointerExp
		public RuleCall getPointerExpParserRuleCall_1() { return cPointerExpParserRuleCall_1; }
	}
	public class PointerExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.PointerExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAsteriskAsteriskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPtrAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPtrAtomParserRuleCall_1_0 = (RuleCall)cPtrAssignment_1.eContents().get(0);
		
		//PointerExp:
		//	'**' ptr=Atom;
		@Override public ParserRule getRule() { return rule; }
		
		//'**' ptr=Atom
		public Group getGroup() { return cGroup; }
		
		//'**'
		public Keyword getAsteriskAsteriskKeyword_0() { return cAsteriskAsteriskKeyword_0; }
		
		//ptr=Atom
		public Assignment getPtrAssignment_1() { return cPtrAssignment_1; }
		
		//Atom
		public RuleCall getPtrAtomParserRuleCall_1_0() { return cPtrAtomParserRuleCall_1_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.Type");
		private final RuleCall cTYPELITTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Type:
		//	TYPELIT;
		@Override public ParserRule getRule() { return rule; }
		
		//TYPELIT
		public RuleCall getTYPELITTerminalRuleCall() { return cTYPELITTerminalRuleCall; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntLitAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValorINTTerminalRuleCall_0_1_0 = (RuleCall)cValorAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cTrueLitAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValTRUETerminalRuleCall_1_1_0 = (RuleCall)cValAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cFalseLitAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValFALSETerminalRuleCall_2_1_0 = (RuleCall)cValAssignment_2_1.eContents().get(0);
		
		//Literal:
		//	{IntLit} valor=INT | {TrueLit} val=TRUE | {FalseLit} val=FALSE;
		@Override public ParserRule getRule() { return rule; }
		
		//{IntLit} valor=INT | {TrueLit} val=TRUE | {FalseLit} val=FALSE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{IntLit} valor=INT
		public Group getGroup_0() { return cGroup_0; }
		
		//{IntLit}
		public Action getIntLitAction_0_0() { return cIntLitAction_0_0; }
		
		//valor=INT
		public Assignment getValorAssignment_0_1() { return cValorAssignment_0_1; }
		
		//INT
		public RuleCall getValorINTTerminalRuleCall_0_1_0() { return cValorINTTerminalRuleCall_0_1_0; }
		
		//{TrueLit} val=TRUE
		public Group getGroup_1() { return cGroup_1; }
		
		//{TrueLit}
		public Action getTrueLitAction_1_0() { return cTrueLitAction_1_0; }
		
		//val=TRUE
		public Assignment getValAssignment_1_1() { return cValAssignment_1_1; }
		
		//TRUE
		public RuleCall getValTRUETerminalRuleCall_1_1_0() { return cValTRUETerminalRuleCall_1_1_0; }
		
		//{FalseLit} val=FALSE
		public Group getGroup_2() { return cGroup_2; }
		
		//{FalseLit}
		public Action getFalseLitAction_2_0() { return cFalseLitAction_2_0; }
		
		//val=FALSE
		public Assignment getValAssignment_2_1() { return cValAssignment_2_1; }
		
		//FALSE
		public RuleCall getValFALSETerminalRuleCall_2_1_0() { return cValFALSETerminalRuleCall_2_1_0; }
	}
	
	
	private final ProgramElements pProgram;
	private final DefinitionElements pDefinition;
	private final FunctionElements pFunction;
	private final DeclarationElements pDeclaration;
	private final CommandElements pCommand;
	private final ParameterElements pParameter;
	private final ArgumentElements pArgument;
	private final AssignmentElements pAssignment;
	private final ExpressionElements pExpression;
	private final RelExpElements pRelExp;
	private final ArithExpElements pArithExp;
	private final TermElements pTerm;
	private final FactorElements pFactor;
	private final AtomElements pAtom;
	private final LValueElements pLValue;
	private final PointerExpElements pPointerExp;
	private final TypeElements pType;
	private final LiteralElements pLiteral;
	private final TerminalRule tTYPELIT;
	private final TerminalRule tTRUE;
	private final TerminalRule tFALSE;
	private final TerminalRule tAO1;
	private final TerminalRule tAO2;
	private final TerminalRule tRO;
	private final TerminalRule tLO;
	private final TerminalRule tUO;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public CGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pDefinition = new DefinitionElements();
		this.pFunction = new FunctionElements();
		this.pDeclaration = new DeclarationElements();
		this.pCommand = new CommandElements();
		this.pParameter = new ParameterElements();
		this.pArgument = new ArgumentElements();
		this.pAssignment = new AssignmentElements();
		this.pExpression = new ExpressionElements();
		this.pRelExp = new RelExpElements();
		this.pArithExp = new ArithExpElements();
		this.pTerm = new TermElements();
		this.pFactor = new FactorElements();
		this.pAtom = new AtomElements();
		this.pLValue = new LValueElements();
		this.pPointerExp = new PointerExpElements();
		this.pType = new TypeElements();
		this.pLiteral = new LiteralElements();
		this.tTYPELIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.TYPELIT");
		this.tTRUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.TRUE");
		this.tFALSE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.FALSE");
		this.tAO1 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.AO1");
		this.tAO2 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.AO2");
		this.tRO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.RO");
		this.tLO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.LO");
		this.tUO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.poli.compilador.C.UO");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.poli.compilador.C".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////--------------------------------------------------------------------
	//Program:
	//	definition+=Definition*;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Definition:
	//	val+=Function | Declaration;
	public DefinitionElements getDefinitionAccess() {
		return pDefinition;
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}
	
	//// TODO Comandos e Declarações
	//Function:
	//	tipo=Type name=ID '(' params+=Parameter? ')' '{' commands+=Command* '}';
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//Declaration:
	//	tipo=Type name+=ID* asg=Assignment;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//Command:
	//	{Command} "if" '(' exp+=Expression ')' '{' commands+=Command* '}' ("else" '{' commands+=Command* '}')?
	//	| {Command} "break" ';'
	//	| {Command} "continue" ';'
	//	| {Command} "return" exp+=Expression? ';';
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//Parameter:
	//	'1';
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//Argument:
	//	'1';
	public ArgumentElements getArgumentAccess() {
		return pArgument;
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}
	
	//Assignment:
	//	'1';
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	//Expression:
	//	args+=RelExp ({LogicExp.args+=current} val=LO args+=RelExp)*;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//RelExp:
	//	ArithExp ({RelExp.args+=current} val=RO args+=ArithExp)?;
	public RelExpElements getRelExpAccess() {
		return pRelExp;
	}
	
	public ParserRule getRelExpRule() {
		return getRelExpAccess().getRule();
	}
	
	//ArithExp:
	//	Term ({AritmExp.args+=current} val=AO1 args+=Term)*;
	public ArithExpElements getArithExpAccess() {
		return pArithExp;
	}
	
	public ParserRule getArithExpRule() {
		return getArithExpAccess().getRule();
	}
	
	//Term:
	//	Factor ({Term.args+=current} val=AO2 args+=Factor)*;
	public TermElements getTermAccess() {
		return pTerm;
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}
	
	//Factor:
	//	{UnaryExp} val=UO args+=Atom
	//	| Atom;
	public FactorElements getFactorAccess() {
		return pFactor;
	}
	
	public ParserRule getFactorRule() {
		return getFactorAccess().getRule();
	}
	
	//Atom:
	//	Literal
	//	| '(' Expression ')'
	//	| lValue;
	public AtomElements getAtomAccess() {
		return pAtom;
	}
	
	public ParserRule getAtomRule() {
		return getAtomAccess().getRule();
	}
	
	//lValue:
	//	{IDVal} val=ID ('(' Argument ')')?
	//	| PointerExp;
	public LValueElements getLValueAccess() {
		return pLValue;
	}
	
	public ParserRule getLValueRule() {
		return getLValueAccess().getRule();
	}
	
	//PointerExp:
	//	'**' ptr=Atom;
	public PointerExpElements getPointerExpAccess() {
		return pPointerExp;
	}
	
	public ParserRule getPointerExpRule() {
		return getPointerExpAccess().getRule();
	}
	
	//Type:
	//	TYPELIT;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//Literal:
	//	{IntLit} valor=INT | {TrueLit} val=TRUE | {FalseLit} val=FALSE;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//terminal TYPELIT:
	//	"int" | "bool" | "char" | "void";
	public TerminalRule getTYPELITRule() {
		return tTYPELIT;
	}
	
	//terminal TRUE:
	//	'true';
	public TerminalRule getTRUERule() {
		return tTRUE;
	}
	
	//terminal FALSE:
	//	'false';
	public TerminalRule getFALSERule() {
		return tFALSE;
	}
	
	//terminal AO1:
	//	'+' | '-';
	public TerminalRule getAO1Rule() {
		return tAO1;
	}
	
	//terminal AO2:
	//	'*' | '/';
	public TerminalRule getAO2Rule() {
		return tAO2;
	}
	
	//terminal RO:
	//	'>' | '>=' | '<' | '<=' | '==' | '!=';
	public TerminalRule getRORule() {
		return tRO;
	}
	
	//terminal LO:
	//	'&&' | '||';
	public TerminalRule getLORule() {
		return tLO;
	}
	
	//terminal UO:
	//	'~' | '++' | '--' | '&';
	public TerminalRule getUORule() {
		return tUO;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
