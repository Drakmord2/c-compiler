/*
 * generated by Xtext 2.12.0
 */
package com.poli.compilador.ide.contentassist.antlr;

import com.google.inject.Inject;
import com.poli.compilador.ide.contentassist.antlr.internal.InternalCParser;
import com.poli.compilador.services.CGrammarAccess;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class CParser extends AbstractContentAssistParser {

	@Inject
	private CGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalCParser createParser() {
		InternalCParser result = new InternalCParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getDefinitionAccess().getAlternatives(), "rule__Definition__Alternatives");
					put(grammarAccess.getCommandAccess().getAlternatives(), "rule__Command__Alternatives");
					put(grammarAccess.getFactorAccess().getAlternatives(), "rule__Factor__Alternatives");
					put(grammarAccess.getAtomAccess().getAlternatives(), "rule__Atom__Alternatives");
					put(grammarAccess.getLValueAccess().getAlternatives(), "rule__LValue__Alternatives");
					put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
					put(grammarAccess.getFunctionAccess().getGroup(), "rule__Function__Group__0");
					put(grammarAccess.getDeclarationAccess().getGroup(), "rule__Declaration__Group__0");
					put(grammarAccess.getCommandAccess().getGroup_0(), "rule__Command__Group_0__0");
					put(grammarAccess.getCommandAccess().getGroup_0_8(), "rule__Command__Group_0_8__0");
					put(grammarAccess.getCommandAccess().getGroup_1(), "rule__Command__Group_1__0");
					put(grammarAccess.getCommandAccess().getGroup_2(), "rule__Command__Group_2__0");
					put(grammarAccess.getCommandAccess().getGroup_3(), "rule__Command__Group_3__0");
					put(grammarAccess.getExpressionAccess().getGroup(), "rule__Expression__Group__0");
					put(grammarAccess.getExpressionAccess().getGroup_1(), "rule__Expression__Group_1__0");
					put(grammarAccess.getRelExpAccess().getGroup(), "rule__RelExp__Group__0");
					put(grammarAccess.getRelExpAccess().getGroup_1(), "rule__RelExp__Group_1__0");
					put(grammarAccess.getArithExpAccess().getGroup(), "rule__ArithExp__Group__0");
					put(grammarAccess.getArithExpAccess().getGroup_1(), "rule__ArithExp__Group_1__0");
					put(grammarAccess.getTermAccess().getGroup(), "rule__Term__Group__0");
					put(grammarAccess.getTermAccess().getGroup_1(), "rule__Term__Group_1__0");
					put(grammarAccess.getFactorAccess().getGroup_0(), "rule__Factor__Group_0__0");
					put(grammarAccess.getAtomAccess().getGroup_1(), "rule__Atom__Group_1__0");
					put(grammarAccess.getLValueAccess().getGroup_0(), "rule__LValue__Group_0__0");
					put(grammarAccess.getLValueAccess().getGroup_0_2(), "rule__LValue__Group_0_2__0");
					put(grammarAccess.getPointerExpAccess().getGroup(), "rule__PointerExp__Group__0");
					put(grammarAccess.getLiteralAccess().getGroup_0(), "rule__Literal__Group_0__0");
					put(grammarAccess.getLiteralAccess().getGroup_1(), "rule__Literal__Group_1__0");
					put(grammarAccess.getLiteralAccess().getGroup_2(), "rule__Literal__Group_2__0");
					put(grammarAccess.getProgramAccess().getDefinitionAssignment(), "rule__Program__DefinitionAssignment");
					put(grammarAccess.getDefinitionAccess().getValAssignment_0(), "rule__Definition__ValAssignment_0");
					put(grammarAccess.getFunctionAccess().getTipoAssignment_0(), "rule__Function__TipoAssignment_0");
					put(grammarAccess.getFunctionAccess().getNameAssignment_1(), "rule__Function__NameAssignment_1");
					put(grammarAccess.getFunctionAccess().getParamsAssignment_3(), "rule__Function__ParamsAssignment_3");
					put(grammarAccess.getFunctionAccess().getCommandsAssignment_6(), "rule__Function__CommandsAssignment_6");
					put(grammarAccess.getDeclarationAccess().getTipoAssignment_0(), "rule__Declaration__TipoAssignment_0");
					put(grammarAccess.getDeclarationAccess().getNameAssignment_1(), "rule__Declaration__NameAssignment_1");
					put(grammarAccess.getDeclarationAccess().getAsgAssignment_2(), "rule__Declaration__AsgAssignment_2");
					put(grammarAccess.getCommandAccess().getExpAssignment_0_3(), "rule__Command__ExpAssignment_0_3");
					put(grammarAccess.getCommandAccess().getCommandsAssignment_0_6(), "rule__Command__CommandsAssignment_0_6");
					put(grammarAccess.getCommandAccess().getCommandsAssignment_0_8_2(), "rule__Command__CommandsAssignment_0_8_2");
					put(grammarAccess.getCommandAccess().getExpAssignment_3_2(), "rule__Command__ExpAssignment_3_2");
					put(grammarAccess.getExpressionAccess().getArgsAssignment_0(), "rule__Expression__ArgsAssignment_0");
					put(grammarAccess.getExpressionAccess().getValAssignment_1_1(), "rule__Expression__ValAssignment_1_1");
					put(grammarAccess.getExpressionAccess().getArgsAssignment_1_2(), "rule__Expression__ArgsAssignment_1_2");
					put(grammarAccess.getRelExpAccess().getValAssignment_1_1(), "rule__RelExp__ValAssignment_1_1");
					put(grammarAccess.getRelExpAccess().getArgsAssignment_1_2(), "rule__RelExp__ArgsAssignment_1_2");
					put(grammarAccess.getArithExpAccess().getValAssignment_1_1(), "rule__ArithExp__ValAssignment_1_1");
					put(grammarAccess.getArithExpAccess().getArgsAssignment_1_2(), "rule__ArithExp__ArgsAssignment_1_2");
					put(grammarAccess.getTermAccess().getValAssignment_1_1(), "rule__Term__ValAssignment_1_1");
					put(grammarAccess.getTermAccess().getArgsAssignment_1_2(), "rule__Term__ArgsAssignment_1_2");
					put(grammarAccess.getFactorAccess().getValAssignment_0_1(), "rule__Factor__ValAssignment_0_1");
					put(grammarAccess.getFactorAccess().getArgsAssignment_0_2(), "rule__Factor__ArgsAssignment_0_2");
					put(grammarAccess.getLValueAccess().getValAssignment_0_1(), "rule__LValue__ValAssignment_0_1");
					put(grammarAccess.getPointerExpAccess().getPtrAssignment_1(), "rule__PointerExp__PtrAssignment_1");
					put(grammarAccess.getLiteralAccess().getValorAssignment_0_1(), "rule__Literal__ValorAssignment_0_1");
					put(grammarAccess.getLiteralAccess().getValAssignment_1_1(), "rule__Literal__ValAssignment_1_1");
					put(grammarAccess.getLiteralAccess().getValAssignment_2_1(), "rule__Literal__ValAssignment_2_1");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public CGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(CGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
