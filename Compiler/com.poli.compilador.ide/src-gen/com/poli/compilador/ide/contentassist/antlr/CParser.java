/*
 * generated by Xtext 2.12.0
 */
package com.poli.compilador.ide.contentassist.antlr;

import com.google.inject.Inject;
import com.poli.compilador.ide.contentassist.antlr.internal.InternalCParser;
import com.poli.compilador.services.CGrammarAccess;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class CParser extends AbstractContentAssistParser {

	@Inject
	private CGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalCParser createParser() {
		InternalCParser result = new InternalCParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getDefinitionAccess().getAlternatives(), "rule__Definition__Alternatives");
					put(grammarAccess.getDefinitionAccess().getAlternatives_0_1(), "rule__Definition__Alternatives_0_1");
					put(grammarAccess.getVariableAccess().getAlternatives(), "rule__Variable__Alternatives");
					put(grammarAccess.getCommandAccess().getAlternatives(), "rule__Command__Alternatives");
					put(grammarAccess.getCommandAccess().getAlternatives_6_1(), "rule__Command__Alternatives_6_1");
					put(grammarAccess.getFactorAccess().getAlternatives(), "rule__Factor__Alternatives");
					put(grammarAccess.getAtomAccess().getAlternatives(), "rule__Atom__Alternatives");
					put(grammarAccess.getLValueAccess().getAlternatives(), "rule__LValue__Alternatives");
					put(grammarAccess.getLValueAccess().getAlternatives_0_1(), "rule__LValue__Alternatives_0_1");
					put(grammarAccess.getPointerExpAccess().getAlternatives_2(), "rule__PointerExp__Alternatives_2");
					put(grammarAccess.getAccessExpAccess().getAlternatives(), "rule__AccessExp__Alternatives");
					put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
					put(grammarAccess.getDefinitionAccess().getGroup_0(), "rule__Definition__Group_0__0");
					put(grammarAccess.getFunctionAccess().getGroup(), "rule__Function__Group__0");
					put(grammarAccess.getDeclarationAccess().getGroup(), "rule__Declaration__Group__0");
					put(grammarAccess.getDeclarationAccess().getGroup_1(), "rule__Declaration__Group_1__0");
					put(grammarAccess.getStructAccess().getGroup(), "rule__Struct__Group__0");
					put(grammarAccess.getIdDefAccess().getGroup(), "rule__IdDef__Group__0");
					put(grammarAccess.getVariableAccess().getGroup_0(), "rule__Variable__Group_0__0");
					put(grammarAccess.getCommandAccess().getGroup_0(), "rule__Command__Group_0__0");
					put(grammarAccess.getCommandAccess().getGroup_0_8(), "rule__Command__Group_0_8__0");
					put(grammarAccess.getCommandAccess().getGroup_1(), "rule__Command__Group_1__0");
					put(grammarAccess.getCommandAccess().getGroup_2(), "rule__Command__Group_2__0");
					put(grammarAccess.getCommandAccess().getGroup_3(), "rule__Command__Group_3__0");
					put(grammarAccess.getCommandAccess().getGroup_3_7(), "rule__Command__Group_3_7__0");
					put(grammarAccess.getCommandAccess().getGroup_4(), "rule__Command__Group_4__0");
					put(grammarAccess.getCommandAccess().getGroup_5(), "rule__Command__Group_5__0");
					put(grammarAccess.getCommandAccess().getGroup_6(), "rule__Command__Group_6__0");
					put(grammarAccess.getCommandAccess().getGroup_6_1_0(), "rule__Command__Group_6_1_0__0");
					put(grammarAccess.getCommandAccess().getGroup_6_1_1(), "rule__Command__Group_6_1_1__0");
					put(grammarAccess.getCommandAccess().getGroup_7(), "rule__Command__Group_7__0");
					put(grammarAccess.getCommandAccess().getGroup_8(), "rule__Command__Group_8__0");
					put(grammarAccess.getCommandAccess().getGroup_9(), "rule__Command__Group_9__0");
					put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
					put(grammarAccess.getParameterAccess().getGroup_1(), "rule__Parameter__Group_1__0");
					put(grammarAccess.getArgumentAccess().getGroup(), "rule__Argument__Group__0");
					put(grammarAccess.getArgumentAccess().getGroup_1(), "rule__Argument__Group_1__0");
					put(grammarAccess.getAssignmentAccess().getGroup(), "rule__Assignment__Group__0");
					put(grammarAccess.getExpressionAccess().getGroup(), "rule__Expression__Group__0");
					put(grammarAccess.getExpressionAccess().getGroup_1(), "rule__Expression__Group_1__0");
					put(grammarAccess.getRelExpAccess().getGroup(), "rule__RelExp__Group__0");
					put(grammarAccess.getRelExpAccess().getGroup_1(), "rule__RelExp__Group_1__0");
					put(grammarAccess.getArithExpAccess().getGroup(), "rule__ArithExp__Group__0");
					put(grammarAccess.getArithExpAccess().getGroup_1(), "rule__ArithExp__Group_1__0");
					put(grammarAccess.getTermAccess().getGroup(), "rule__Term__Group__0");
					put(grammarAccess.getTermAccess().getGroup_1(), "rule__Term__Group_1__0");
					put(grammarAccess.getFactorAccess().getGroup_0(), "rule__Factor__Group_0__0");
					put(grammarAccess.getAtomAccess().getGroup_1(), "rule__Atom__Group_1__0");
					put(grammarAccess.getLValueAccess().getGroup_0(), "rule__LValue__Group_0__0");
					put(grammarAccess.getLValueAccess().getGroup_0_1_0(), "rule__LValue__Group_0_1_0__0");
					put(grammarAccess.getPointerExpAccess().getGroup(), "rule__PointerExp__Group__0");
					put(grammarAccess.getPointerExpAccess().getGroup_2_1(), "rule__PointerExp__Group_2_1__0");
					put(grammarAccess.getAccessExpAccess().getGroup_0(), "rule__AccessExp__Group_0__0");
					put(grammarAccess.getAccessExpAccess().getGroup_1(), "rule__AccessExp__Group_1__0");
					put(grammarAccess.getCaseAccess().getGroup(), "rule__Case__Group__0");
					put(grammarAccess.getTypeAccess().getGroup(), "rule__Type__Group__0");
					put(grammarAccess.getTypeAccess().getGroup_1(), "rule__Type__Group_1__0");
					put(grammarAccess.getLiteralAccess().getGroup_0(), "rule__Literal__Group_0__0");
					put(grammarAccess.getLiteralAccess().getGroup_1(), "rule__Literal__Group_1__0");
					put(grammarAccess.getLiteralAccess().getGroup_2(), "rule__Literal__Group_2__0");
					put(grammarAccess.getProgramAccess().getDefinitionAssignment(), "rule__Program__DefinitionAssignment");
					put(grammarAccess.getDefinitionAccess().getValAssignment_0_1_0(), "rule__Definition__ValAssignment_0_1_0");
					put(grammarAccess.getDefinitionAccess().getValAssignment_0_1_1(), "rule__Definition__ValAssignment_0_1_1");
					put(grammarAccess.getFunctionAccess().getParamsAssignment_2(), "rule__Function__ParamsAssignment_2");
					put(grammarAccess.getFunctionAccess().getCommandsAssignment_5(), "rule__Function__CommandsAssignment_5");
					put(grammarAccess.getDeclarationAccess().getNameAssignment_1_1(), "rule__Declaration__NameAssignment_1_1");
					put(grammarAccess.getDeclarationAccess().getValAssignment_2(), "rule__Declaration__ValAssignment_2");
					put(grammarAccess.getStructAccess().getNameAssignment_2(), "rule__Struct__NameAssignment_2");
					put(grammarAccess.getStructAccess().getDefAssignment_4(), "rule__Struct__DefAssignment_4");
					put(grammarAccess.getStructAccess().getDeclAssignment_5(), "rule__Struct__DeclAssignment_5");
					put(grammarAccess.getIdDefAccess().getTipoAssignment_0(), "rule__IdDef__TipoAssignment_0");
					put(grammarAccess.getIdDefAccess().getNameAssignment_1(), "rule__IdDef__NameAssignment_1");
					put(grammarAccess.getCommandAccess().getExpAssignment_0_3(), "rule__Command__ExpAssignment_0_3");
					put(grammarAccess.getCommandAccess().getCommandsAssignment_0_6(), "rule__Command__CommandsAssignment_0_6");
					put(grammarAccess.getCommandAccess().getCommandsAssignment_0_8_2(), "rule__Command__CommandsAssignment_0_8_2");
					put(grammarAccess.getCommandAccess().getExpAssignment_1_3(), "rule__Command__ExpAssignment_1_3");
					put(grammarAccess.getCommandAccess().getCommandsAssignment_1_6(), "rule__Command__CommandsAssignment_1_6");
					put(grammarAccess.getCommandAccess().getCommandsAssignment_2_5(), "rule__Command__CommandsAssignment_2_5");
					put(grammarAccess.getCommandAccess().getExpAssignment_3_3(), "rule__Command__ExpAssignment_3_3");
					put(grammarAccess.getCommandAccess().getCasesAssignment_3_6(), "rule__Command__CasesAssignment_3_6");
					put(grammarAccess.getCommandAccess().getCommandsAssignment_3_7_2(), "rule__Command__CommandsAssignment_3_7_2");
					put(grammarAccess.getCommandAccess().getDefAssignment_4_1(), "rule__Command__DefAssignment_4_1");
					put(grammarAccess.getCommandAccess().getDeclAssignment_4_2(), "rule__Command__DeclAssignment_4_2");
					put(grammarAccess.getCommandAccess().getCommandsAssignment_5_3(), "rule__Command__CommandsAssignment_5_3");
					put(grammarAccess.getCommandAccess().getExpAssignment_5_7(), "rule__Command__ExpAssignment_5_7");
					put(grammarAccess.getCommandAccess().getValAssignment_6_1_0_0(), "rule__Command__ValAssignment_6_1_0_0");
					put(grammarAccess.getCommandAccess().getValAssignment_6_1_0_1(), "rule__Command__ValAssignment_6_1_0_1");
					put(grammarAccess.getCommandAccess().getExpAssignment_9_2(), "rule__Command__ExpAssignment_9_2");
					put(grammarAccess.getParameterAccess().getDefAssignment_0(), "rule__Parameter__DefAssignment_0");
					put(grammarAccess.getParameterAccess().getDefAssignment_1_1(), "rule__Parameter__DefAssignment_1_1");
					put(grammarAccess.getArgumentAccess().getExpAssignment_0(), "rule__Argument__ExpAssignment_0");
					put(grammarAccess.getArgumentAccess().getExpAssignment_1_1(), "rule__Argument__ExpAssignment_1_1");
					put(grammarAccess.getAssignmentAccess().getExpAssignment_1(), "rule__Assignment__ExpAssignment_1");
					put(grammarAccess.getExpressionAccess().getArgsAssignment_0(), "rule__Expression__ArgsAssignment_0");
					put(grammarAccess.getExpressionAccess().getValAssignment_1_1(), "rule__Expression__ValAssignment_1_1");
					put(grammarAccess.getExpressionAccess().getArgsAssignment_1_2(), "rule__Expression__ArgsAssignment_1_2");
					put(grammarAccess.getRelExpAccess().getValAssignment_1_1(), "rule__RelExp__ValAssignment_1_1");
					put(grammarAccess.getRelExpAccess().getArgsAssignment_1_2(), "rule__RelExp__ArgsAssignment_1_2");
					put(grammarAccess.getArithExpAccess().getValAssignment_1_1(), "rule__ArithExp__ValAssignment_1_1");
					put(grammarAccess.getArithExpAccess().getArgsAssignment_1_2(), "rule__ArithExp__ArgsAssignment_1_2");
					put(grammarAccess.getTermAccess().getValAssignment_1_1(), "rule__Term__ValAssignment_1_1");
					put(grammarAccess.getTermAccess().getArgsAssignment_1_2(), "rule__Term__ArgsAssignment_1_2");
					put(grammarAccess.getFactorAccess().getValAssignment_0_1(), "rule__Factor__ValAssignment_0_1");
					put(grammarAccess.getFactorAccess().getArgsAssignment_0_2(), "rule__Factor__ArgsAssignment_0_2");
					put(grammarAccess.getLValueAccess().getValAssignment_0_0(), "rule__LValue__ValAssignment_0_0");
					put(grammarAccess.getLValueAccess().getArgsAssignment_0_1_0_1(), "rule__LValue__ArgsAssignment_0_1_0_1");
					put(grammarAccess.getLValueAccess().getAccAssignment_0_1_1(), "rule__LValue__AccAssignment_0_1_1");
					put(grammarAccess.getPointerExpAccess().getExpAssignment_2_1_1(), "rule__PointerExp__ExpAssignment_2_1_1");
					put(grammarAccess.getAccessExpAccess().getExpAssignment_0_2(), "rule__AccessExp__ExpAssignment_0_2");
					put(grammarAccess.getAccessExpAccess().getFieldAssignment_1_2(), "rule__AccessExp__FieldAssignment_1_2");
					put(grammarAccess.getCaseAccess().getValAssignment_1(), "rule__Case__ValAssignment_1");
					put(grammarAccess.getCaseAccess().getCommandsAssignment_3(), "rule__Case__CommandsAssignment_3");
					put(grammarAccess.getTypeAccess().getTipoAssignment_0(), "rule__Type__TipoAssignment_0");
					put(grammarAccess.getTypeAccess().getExpAssignment_1_1(), "rule__Type__ExpAssignment_1_1");
					put(grammarAccess.getLiteralAccess().getValorAssignment_0_1(), "rule__Literal__ValorAssignment_0_1");
					put(grammarAccess.getLiteralAccess().getValAssignment_1_1(), "rule__Literal__ValAssignment_1_1");
					put(grammarAccess.getLiteralAccess().getValAssignment_2_1(), "rule__Literal__ValAssignment_2_1");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public CGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(CGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
