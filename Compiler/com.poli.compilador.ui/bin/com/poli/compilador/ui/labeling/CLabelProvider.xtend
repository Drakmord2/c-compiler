/*
 * generated by Xtext 2.12.0
 */
package com.poli.compilador.ui.labeling

import com.google.inject.Inject
import com.poli.compilador.c.ArithExp
import com.poli.compilador.c.BreakCmd
import com.poli.compilador.c.Command
import com.poli.compilador.c.Declaration
import com.poli.compilador.c.DoWhileCmd
import com.poli.compilador.c.Expression
import com.poli.compilador.c.FalseLit
import com.poli.compilador.c.ForCmd
import com.poli.compilador.c.Function
import com.poli.compilador.c.IfCmd
import com.poli.compilador.c.IntLit
import com.poli.compilador.c.LogicExp
import com.poli.compilador.c.Parenteses
import com.poli.compilador.c.PostfixOp
import com.poli.compilador.c.PrefixOp
import com.poli.compilador.c.RelExp
import com.poli.compilador.c.ReturnCmd
import com.poli.compilador.c.Struct
import com.poli.compilador.c.SwitchCmd
import com.poli.compilador.c.Term
import com.poli.compilador.c.TrueLit
import com.poli.compilador.c.Var
import com.poli.compilador.c.WhileCmd
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider

/**
 * Provides labels for EObjects.
 * 
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#label-provider
 */
class CLabelProvider extends DefaultEObjectLabelProvider {

	@Inject
	new(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}
	
	def text(Function f) {
		return 'Function - ' + f.name
	}
		
	def text(Struct s) {
		return 'Struct - ' + s.name
	}
	
	def text(Command c) {
		if (c instanceof IfCmd) {
			return 'If'
		}
		
		if (c instanceof WhileCmd) {
			return 'While'
		}
		
		if (c instanceof ForCmd) {
			return 'For'
		}
		
		if (c instanceof DoWhileCmd) {
			return 'Do-While'
		}
		
		if (c instanceof Declaration) {
			return 'Declaration - ' + c.name
		}
		
		if (c instanceof BreakCmd) {
			return 'Break'
		}
		
		if (c instanceof ReturnCmd) {
			return 'Return'
		}
		
		if (c instanceof SwitchCmd) {
			return 'Switch'
		}
		
		return 'Command'
	}
	
	def text(Expression e) {
		if (e instanceof LogicExp) {
			return 'Logic'
		}
		
		if (e instanceof RelExp) {
			return 'Relational'
		}
		
		if (e instanceof ArithExp) {
			return 'Arithmetic'
		}
		
		if (e instanceof Term) {
			return 'Term'
		}
		
		if (e instanceof PostfixOp) {
			return 'Postfix'
		}
		
		if (e instanceof PrefixOp) {
			return 'Prefix'
		}
		
		if (e instanceof Parenteses) {
			return 'Parenteses'
		}
		
		if (e instanceof IntLit) {
			return e.^val
		}
		
		if (e instanceof TrueLit) {
			return 'True'
		}
		
		if (e instanceof FalseLit) {
			return 'False'
		}
		
		if (e instanceof Var) {
			return e.valor.name
		}
		
		return 'Expression'
	}
	
}
